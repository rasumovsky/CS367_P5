0 Hash
1 table
2 Not
3 to
4 be
5 confused
6 with
7 Hash
8 list
9 or
10 Hash
11 tree
12 Hash
13 table
14 Type
15 Unordered
16 associative
17 array
18 Invented
19 1953
20 A
21 small
22 phone
23 book
24 as
25 a
26 hash
27 table
28 In
29 computing
30 a
31 hash
32 table
33 hash
34 map
35 is
36 a
37 data
38 structure
39 used
40 to
41 implement
42 an
43 associative
44 array
45 a
46 structure
47 that
48 can
49 map
50 keys
51 to
52 values
53 A
54 hash
55 table
56 uses
57 a
58 hash
59 function
60 to
61 compute
62 an
63 index
64 into
65 an
66 array
67 of
68 buckets
69 or
70 slots
71 from
72 which
73 the
74 correct
75 value
76 can
77 be
78 found
79 Ideally
80 the
81 hash
82 function
83 will
84 assign
85 each
86 key
87 to
88 a
89 unique
90 bucket
91 but
92 this
93 situation
94 is
95 rarely
96 achievable
97 in
98 practice
99 usually
100 some
101 keys
102 will
103 hash
104 to
105 the
106 same
107 bucket
108 Instead
109 most
110 hash
111 table
112 designs
113 assume
114 that
115 hash
116 collisions
117 different
118 keys
119 that
120 are
121 assigned
122 by
123 the
124 hash
125 function
126 to
127 the
128 same
129 bucket
130 will
131 occur
132 and
133 must
134 be
135 accommodated
136 in
137 some
138 way
139 In
140 a
141 well
142 dimensioned
143 hash
144 table
145 the
146 average
147 cost
148 number
149 of
150 instructions
151 for
152 each
153 lookup
154 is
155 independent
156 of
157 the
158 number
159 of
160 elements
161 stored
162 in
163 the
164 table
165 Many
166 hash
167 table
168 designs
169 also
170 allow
171 arbitrary
172 insertions
173 and
174 deletions
175 of
176 key
177 value
178 pairs
179 at
180 amortized2
181 constant
182 average
183 cost
184 per
185 operation34
186 In
187 many
188 situations
189 hash
190 tables
191 turn
192 out
193 to
194 be
195 more
196 efficient
197 than
198 search
199 trees
200 or
201 any
202 other
203 table
204 lookup
205 structure
206 For
207 this
208 reason
209 they
210 are
211 widely
212 used
213 in
214 many
215 kinds
216 of
217 computer
218 software
219 particularly
220 for
221 associative
222 arrays
223 database
224 indexing
225 caches
226 and
227 sets
228 Hash
229 function
230 The
231 idea
232 of
233 hashing
234 is
235 to
236 distribute
237 the
238 entries
239 key
240 value
241 pairs
242 across
243 an
244 array
245 of
246 buckets
247 Given
248 a
249 key
250 the
251 algorithm
252 computes
253 an
254 index
255 that
256 suggests
257 where
258 the
259 entry
260 can
261 be
262 found
263 index
264 fkey
265 array
266 size
267 Often
268 this
269 is
270 done
271 in
272 two
273 steps
274 hash
275 hashfunckey
276 index
277 hash
278 array
279 size
280 In
281 this
282 method
283 the
284 hash
285 is
286 independent
287 of
288 the
289 array
290 size
291 and
292 it
293 is
294 then
295 reduced
296 to
297 an
298 index
299 a
300 number
301 between
302 0
303 and
304 array
305 size
306 1
307 using
308 the
309 modulo
310 operator
311 In
312 the
313 case
314 that
315 the
316 array
317 size
318 is
319 a
320 power
321 of
322 two
323 the
324 remainder
325 operation
326 is
327 reduced
328 to
329 masking
330 which
331 improves
332 speed
333 but
334 can
335 increase
336 problems
337 with
338 a
339 poor
340 hash
341 function
342 Choosing
343 a
344 good
345 hash
346 function
347 A
348 good
349 hash
350 function
351 and
352 implementation
353 algorithm
354 are
355 essential
356 for
357 good
358 hash
359 table
360 performance
361 but
362 may
363 be
364 difficult
365 to
366 achieve
367 A
368 basic
369 requirement
370 is
371 that
372 the
373 function
374 should
375 provide
376 a
377 uniform
378 distribution
379 of
380 hash
381 values
382 A
383 non
384 uniform
385 distribution
386 increases
387 the
388 number
389 of
390 collisions
391 and
392 the
393 cost
394 of
395 resolving
396 them
397 Uniformity
398 is
399 sometimes
400 difficult
401 to
402 ensure
403 by
404 design
405 but
406 may
407 be
408 evaluated
409 empirically
410 using
411 statistical
412 tests
413 eg
414 a
415 Pearsons
416 chi
417 squared
418 test
419 for
420 discrete
421 uniform
422 distributions56
423 The
424 distribution
425 needs
426 to
427 be
428 uniform
429 only
430 for
431 table
432 sizes
433 that
434 occur
435 in
436 the
437 application
438 In
439 particular
440 if
441 one
442 uses
443 dynamic
444 resizing
445 with
446 exact
447 doubling
448 and
449 halving
450 of
451 the
452 table
453 size
454 s
455 then
456 the
457 hash
458 function
459 needs
460 to
461 be
462 uniform
463 only
464 when
465 s
466 is
467 a
468 power
469 of
470 two
471 On
472 the
473 other
474 hand
475 some
476 hashing
477 algorithms
478 provide
479 uniform
480 hashes
481 only
482 when
483 s
484 is
485 a
486 prime
487 number7
488 For
489 open
490 addressing
491 schemes
492 the
493 hash
494 function
495 should
496 also
497 avoid
498 clustering
499 the
500 mapping
501 of
502 two
503 or
504 more
505 keys
506 to
507 consecutive
508 slots
509 Such
510 clustering
511 may
512 cause
513 the
514 lookup
515 cost
516 to
517 skyrocket
518 even
519 if
520 the
521 load
522 factor
523 is
524 low
525 and
526 collisions
527 are
528 infrequent
529 The
530 popular
531 multiplicative
532 hash3
533 is
534 claimed
535 to
536 have
537 particularly
538 poor
539 clustering
540 behavior7
541 Cryptographic
542 hash
543 functions
544 are
545 believed
546 to
547 provide
548 good
549 hash
550 functions
551 for
552 any
553 table
554 size
555 s
556 either
557 by
558 modulo
559 reduction
560 or
561 by
562 bit
563 masking
564 They
565 may
566 also
567 be
568 appropriate
569 if
570 there
571 is
572 a
573 risk
574 of
575 malicious
576 users
577 trying
578 to
579 sabotage
580 a
581 network
582 service
583 by
584 submitting
585 requests
586 designed
587 to
588 generate
589 a
590 large
591 number
592 of
593 collisions
594 in
595 the
596 servers
597 hash
598 tables
599 However
600 the
601 risk
602 of
603 sabotage
604 can
605 also
606 be
607 avoided
608 by
609 cheaper
610 methods
611 such
612 as
613 applying
614 a
615 secret
616 salt
617 to
618 the
619 data
620 or
621 using
622 a
623 universal
624 hash
625 function
626 Perfect
627 hash
628 function
629 If
630 all
631 keys
632 are
633 known
634 ahead
635 of
636 time
637 a
638 perfect
639 hash
640 function
641 can
642 be
643 used
644 to
645 create
646 a
647 perfect
648 hash
649 table
650 that
651 has
652 no
653 collisions
654 If
655 minimal
656 perfect
657 hashing
658 is
659 used
660 every
661 location
662 in
663 the
664 hash
665 table
666 can
667 be
668 used
669 as
670 well
671 Perfect
672 hashing
673 allows
674 for
675 constant
676 time
677 lookups
678 in
679 the
680 worst
681 case
682 This
683 is
684 in
685 contrast
686 to
687 most
688 chaining
689 and
690 open
691 addressing
692 methods
693 where
694 the
695 time
696 for
697 lookup
698 is
699 low
700 on
701 average
702 but
703 may
704 be
705 very
706 large
707 proportional
708 to
709 the
710 number
711 of
712 entries
713 for
714 some
715 sets
716 of
717 keys
718 Key
719 statistics
720 A
721 critical
722 statistic
723 for
724 a
725 hash
726 table
727 is
728 called
729 the
730 load
731 factor
732 This
733 is
734 simply
735 the
736 number
737 of
738 entries
739 divided
740 by
741 the
742 number
743 of
744 buckets
745 that
746 is
747 n
748 k
749 where
750 n
751 is
752 the
753 number
754 of
755 entries
756 and
757 k
758 is
759 the
760 number
761 of
762 buckets
763 If
764 the
765 load
766 factor
767 is
768 kept
769 reasonable
770 the
771 hash
772 table
773 should
774 perform
775 well
776 provided
777 the
778 hashing
779 is
780 good
781 If
782 the
783 load
784 factor
785 grows
786 too
787 large
788 the
789 hash
790 table
791 will
792 become
793 slow
794 or
795 it
796 may
797 fail
798 to
799 work
800 depending
801 on
802 the
803 method
804 used
805 The
806 expected
807 constant
808 time
809 property
810 of
811 a
812 hash
813 table
814 assumes
815 that
816 the
817 load
818 factor
819 is
820 kept
821 below
822 some
823 bound
824 For
825 a
826 fixed
827 number
828 of
829 buckets
830 the
831 time
832 for
833 a
834 lookup
835 grows
836 with
837 the
838 number
839 of
840 entries
841 and
842 so
843 does
844 not
845 achieve
846 the
847 desired
848 constant
849 time
850 Second
851 to
852 that
853 one
854 can
855 examine
856 the
857 variance
858 of
859 number
860 of
861 entries
862 per
863 bucket
864 For
865 example
866 two
867 tables
868 both
869 have
870 1000
871 entries
872 and
873 1000
874 buckets
875 one
876 has
877 exactly
878 one
879 entry
880 in
881 each
882 bucket
883 the
884 other
885 has
886 all
887 entries
888 in
889 the
890 same
891 bucket
892 Clearly
893 the
894 hashing
895 is
896 not
897 working
898 in
899 the
900 second
901 one
902 A
903 low
904 load
905 factor
906 is
907 not
908 especially
909 beneficial
910 As
911 the
912 load
913 factor
914 approaches
915 0
916 the
917 proportion
918 of
919 unused
920 areas
921 in
922 the
923 hash
924 table
925 increases
926 but
927 there
928 is
929 not
930 necessarily
931 any
932 reduction
933 in
934 search
935 cost
936 This
937 results
938 in
939 wasted
940 memory
941 Collision
942 resolution
943 Hash
944 collisions
945 are
946 practically
947 unavoidable
948 when
949 hashing
950 a
951 random
952 subset
953 of
954 a
955 large
956 set
957 of
958 possible
959 keys
960 For
961 example
962 if
963 2
964 450
965 keys
966 are
967 hashed
968 into
969 a
970 million
971 buckets
972 even
973 with
974 a
975 perfectly
976 uniform
977 random
978 distribution
979 according
980 to
981 the
982 birthday
983 problem
984 there
985 is
986 approximately
987 a
988 95
989 chance
990 of
991 at
992 least
993 two
994 of
995 the
996 keys
997 being
998 hashed
999 to
1000 the
1001 same
1002 slot
1003 Therefore
1004 most
1005 hash
1006 table
1007 implementations
1008 have
1009 some
1010 collision
1011 resolution
1012 strategy
1013 to
1014 handle
1015 such
1016 events
1017 Some
1018 common
1019 strategies
1020 are
1021 described
1022 below
1023 All
1024 these
1025 methods
1026 require
1027 that
1028 the
1029 keys
1030 or
1031 pointers
1032 to
1033 them
1034 be
1035 stored
1036 in
1037 the
1038 table
1039 together
1040 with
1041 the
1042 associated
1043 values
1044 Separate
1045 chaining
1046 Hash
1047 collision
1048 resolved
1049 by
1050 separate
1051 chaining
1052 In
1053 the
1054 method
1055 known
1056 as
1057 separate
1058 chaining
1059 each
1060 bucket
1061 is
1062 independent
1063 and
1064 has
1065 some
1066 sort
1067 of
1068 list
1069 of
1070 entries
1071 with
1072 the
1073 same
1074 index
1075 The
1076 time
1077 for
1078 hash
1079 table
1080 operations
1081 is
1082 the
1083 time
1084 to
1085 find
1086 the
1087 bucket
1088 which
1089 is
1090 constant
1091 plus
1092 the
1093 time
1094 for
1095 the
1096 list
1097 operation
1098 The
1099 technique
1100 is
1101 also
1102 called
1103 open
1104 hashing
1105 or
1106 closed
1107 addressing
1108 In
1109 a
1110 good
1111 hash
1112 table
1113 each
1114 bucket
1115 has
1116 zero
1117 or
1118 one
1119 entries
1120 and
1121 sometimes
1122 two
1123 or
1124 three
1125 but
1126 rarely
1127 more
1128 than
1129 that
1130 Therefore
1131 structures
1132 that
1133 are
1134 efficient
1135 in
1136 time
1137 and
1138 space
1139 for
1140 these
1141 cases
1142 are
1143 preferred
1144 Structures
1145 that
1146 are
1147 efficient
1148 for
1149 a
1150 fairly
1151 large
1152 number
1153 of
1154 entries
1155 per
1156 bucket
1157 are
1158 not
1159 needed
1160 or
1161 desirable
1162 If
1163 these
1164 cases
1165 happen
1166 often
1167 the
1168 hashing
1169 is
1170 not
1171 working
1172 well
1173 and
1174 this
1175 needs
1176 to
1177 be
1178 fixed
1179 Separate
1180 chaining
1181 with
1182 linked
1183 lists
1184 Chained
1185 hash
1186 tables
1187 with
1188 linked
1189 lists
1190 are
1191 popular
1192 because
1193 they
1194 require
1195 only
1196 basic
1197 data
1198 structures
1199 with
1200 simple
1201 algorithms
1202 and
1203 can
1204 use
1205 simple
1206 hash
1207 functions
1208 that
1209 are
1210 unsuitable
1211 for
1212 other
1213 methods
1214 The
1215 cost
1216 of
1217 a
1218 table
1219 operation
1220 is
1221 that
1222 of
1223 scanning
1224 the
1225 entries
1226 of
1227 the
1228 selected
1229 bucket
1230 for
1231 the
1232 desired
1233 key
1234 If
1235 the
1236 distribution
1237 of
1238 keys
1239 is
1240 sufficiently
1241 uniform
1242 the
1243 average
1244 cost
1245 of
1246 a
1247 lookup
1248 depends
1249 only
1250 on
1251 the
1252 average
1253 number
1254 of
1255 keys
1256 per
1257 bucket
1258 that
1259 is
1260 on
1261 the
1262 load
1263 factor
1264 Chained
1265 hash
1266 tables
1267 remain
1268 effective
1269 even
1270 when
1271 the
1272 number
1273 of
1274 table
1275 entries
1276 n
1277 is
1278 much
1279 higher
1280 than
1281 the
1282 number
1283 of
1284 slots
1285 Their
1286 performance
1287 degrades
1288 more
1289 gracefully
1290 linearly
1291 with
1292 the
1293 load
1294 factor
1295 For
1296 example
1297 a
1298 chained
1299 hash
1300 table
1301 with
1302 1000
1303 slots
1304 and
1305 10
1306 000
1307 stored
1308 keys
1309 load
1310 factor
1311 10
1312 is
1313 five
1314 to
1315 ten
1316 times
1317 slower
1318 than
1319 a
1320 10
1321 000
1322 slot
1323 table
1324 load
1325 factor
1326 1
1327 but
1328 still
1329 1000
1330 times
1331 faster
1332 than
1333 a
1334 plain
1335 sequential
1336 list
1337 and
1338 possibly
1339 even
1340 faster
1341 than
1342 a
1343 balanced
1344 search
1345 tree
1346 For
1347 separate
1348 chaining
1349 the
1350 worst
1351 case
1352 scenario
1353 is
1354 when
1355 all
1356 entries
1357 are
1358 inserted
1359 into
1360 the
1361 same
1362 bucket
1363 in
1364 which
1365 case
1366 the
1367 hash
1368 table
1369 is
1370 ineffective
1371 and
1372 the
1373 cost
1374 is
1375 that
1376 of
1377 searching
1378 the
1379 bucket
1380 data
1381 structure
1382 If
1383 the
1384 latter
1385 is
1386 a
1387 linear
1388 list
1389 the
1390 lookup
1391 procedure
1392 may
1393 have
1394 to
1395 scan
1396 all
1397 its
1398 entries
1399 so
1400 the
1401 worst
1402 case
1403 cost
1404 is
1405 proportional
1406 to
1407 the
1408 number
1409 n
1410 of
1411 entries
1412 in
1413 the
1414 table
1415 The
1416 bucket
1417 chains
1418 are
1419 often
1420 implemented
1421 as
1422 ordered
1423 lists
1424 sorted
1425 by
1426 the
1427 key
1428 field
1429 this
1430 choice
1431 approximately
1432 halves
1433 the
1434 average
1435 cost
1436 of
1437 unsuccessful
1438 lookups
1439 compared
1440 to
1441 an
1442 unordered
1443 list
1444 However
1445 if
1446 some
1447 keys
1448 are
1449 much
1450 more
1451 likely
1452 to
1453 come
1454 up
1455 than
1456 others
1457 an
1458 unordered
1459 list
1460 with
1461 move
1462 to
1463 front
1464 heuristic
1465 may
1466 be
1467 more
1468 effective
1469 More
1470 sophisticated
1471 data
1472 structures
1473 such
1474 as
1475 balanced
1476 search
1477 trees
1478 are
1479 worth
1480 considering
1481 only
1482 if
1483 the
1484 load
1485 factor
1486 is
1487 large
1488 about
1489 10
1490 or
1491 more
1492 or
1493 if
1494 the
1495 hash
1496 distribution
1497 is
1498 likely
1499 to
1500 be
1501 very
1502 non
1503 uniform
1504 or
1505 if
1506 one
1507 must
1508 guarantee
1509 good
1510 performance
1511 even
1512 in
1513 a
1514 worst
1515 case
1516 scenario
1517 However
1518 using
1519 a
1520 larger
1521 table
1522 and
1523 or
1524 a
1525 better
1526 hash
1527 function
1528 may
1529 be
1530 even
1531 more
1532 effective
1533 in
1534 those
1535 cases
1536 Chained
1537 hash
1538 tables
1539 also
1540 inherit
1541 the
1542 disadvantages
1543 of
1544 linked
1545 lists
1546 When
1547 storing
1548 small
1549 keys
1550 and
1551 values
1552 the
1553 space
1554 overhead
1555 of
1556 the
1557 next
1558 pointer
1559 in
1560 each
1561 entry
1562 record
1563 can
1564 be
1565 significant
1566 An
1567 additional
1568 disadvantage
1569 is
1570 that
1571 traversing
1572 a
1573 linked
1574 list
1575 has
1576 poor
1577 cache
1578 performance
1579 making
1580 the
1581 processor
1582 cache
1583 ineffective
1584 Separate
1585 chaining
1586 with
1587 list
1588 head
1589 cells
1590 Hash
1591 collision
1592 by
1593 separate
1594 chaining
1595 with
1596 head
1597 records
1598 in
1599 the
1600 bucket
1601 array
1602 Some
1603 chaining
1604 implementations
1605 store
1606 the
1607 first
1608 record
1609 of
1610 each
1611 chain
1612 in
1613 the
1614 slot
1615 array
1616 itself4
1617 The
1618 number
1619 of
1620 pointer
1621 traversals
1622 is
1623 decreased
1624 by
1625 one
1626 for
1627 most
1628 cases
1629 The
1630 purpose
1631 is
1632 to
1633 increase
1634 cache
1635 efficiency
1636 of
1637 hash
1638 table
1639 access
1640 The
1641 disadvantage
1642 is
1643 that
1644 an
1645 empty
1646 bucket
1647 takes
1648 the
1649 same
1650 space
1651 as
1652 a
1653 bucket
1654 with
1655 one
1656 entry
1657 To
1658 save
1659 space
1660 such
1661 hash
1662 tables
1663 often
1664 have
1665 about
1666 as
1667 many
1668 slots
1669 as
1670 stored
1671 entries
1672 meaning
1673 that
1674 many
1675 slots
1676 have
1677 two
1678 or
1679 more
1680 entries
1681 Separate
1682 chaining
1683 with
1684 other
1685 structures
1686 Instead
1687 of
1688 a
1689 list
1690 one
1691 can
1692 use
1693 any
1694 other
1695 data
1696 structure
1697 that
1698 supports
1699 the
1700 required
1701 operations
1702 For
1703 example
1704 by
1705 using
1706 a
1707 self
1708 balancing
1709 tree
1710 the
1711 theoretical
1712 worst
1713 case
1714 time
1715 of
1716 common
1717 hash
1718 table
1719 operations
1720 insertion
1721 deletion
1722 lookup
1723 can
1724 be
1725 brought
1726 down
1727 to
1728 Olog
1729 n
1730 rather
1731 than
1732 On
1733 However
1734 this
1735 approach
1736 is
1737 only
1738 worth
1739 the
1740 trouble
1741 and
1742 extra
1743 memory
1744 cost
1745 if
1746 long
1747 delays
1748 must
1749 be
1750 avoided
1751 at
1752 all
1753 costs
1754 eg
1755 in
1756 a
1757 real
1758 time
1759 application
1760 or
1761 if
1762 one
1763 must
1764 guard
1765 against
1766 many
1767 entries
1768 hashed
1769 to
1770 the
1771 same
1772 slot
1773 eg
1774 if
1775 one
1776 expects
1777 extremely
1778 non
1779 uniform
1780 distributions
1781 or
1782 in
1783 the
1784 case
1785 of
1786 web
1787 sites
1788 or
1789 other
1790 publicly
1791 accessible
1792 services
1793 which
1794 are
1795 vulnerable
1796 to
1797 malicious
1798 key
1799 distributions
1800 in
1801 requests
1802 The
1803 variant
1804 called
1805 array
1806 hash
1807 table
1808 uses
1809 a
1810 dynamic
1811 array
1812 to
1813 store
1814 all
1815 the
1816 entries
1817 that
1818 hash
1819 to
1820 the
1821 same
1822 slot8910
1823 Each
1824 newly
1825 inserted
1826 entry
1827 gets
1828 appended
1829 to
1830 the
1831 end
1832 of
1833 the
1834 dynamic
1835 array
1836 that
1837 is
1838 assigned
1839 to
1840 the
1841 slot
1842 The
1843 dynamic
1844 array
1845 is
1846 resized
1847 in
1848 an
1849 exact
1850 fit
1851 manner
1852 meaning
1853 it
1854 is
1855 grown
1856 only
1857 by
1858 as
1859 many
1860 bytes
1861 as
1862 needed
1863 Alternative
1864 techniques
1865 such
1866 as
1867 growing
1868 the
1869 array
1870 by
1871 block
1872 sizes
1873 or
1874 pages
1875 were
1876 found
1877 to
1878 improve
1879 insertion
1880 performance
1881 but
1882 at
1883 a
1884 cost
1885 in
1886 space
1887 This
1888 variation
1889 makes
1890 more
1891 efficient
1892 use
1893 of
1894 CPU
1895 caching
1896 and
1897 the
1898 translation
1899 lookaside
1900 buffer
1901 TLB
1902 because
1903 slot
1904 entries
1905 are
1906 stored
1907 in
1908 sequential
1909 memory
1910 positions
1911 It
1912 also
1913 dispenses
1914 with
1915 the
1916 next
1917 pointers
1918 that
1919 are
1920 required
1921 by
1922 linked
1923 lists
1924 which
1925 saves
1926 space
1927 Despite
1928 frequent
1929 array
1930 resizing
1931 space
1932 overheads
1933 incurred
1934 by
1935 operating
1936 system
1937 such
1938 as
1939 memory
1940 fragmentation
1941 were
1942 found
1943 to
1944 be
1945 small
1946 An
1947 elaboration
1948 on
1949 this
1950 approach
1951 is
1952 the
1953 so
1954 called
1955 dynamic
1956 perfect
1957 hashing
1958 11
1959 where
1960 a
1961 bucket
1962 that
1963 contains
1964 k
1965 entries
1966 is
1967 organized
1968 as
1969 a
1970 perfect
1971 hash
1972 table
1973 with
1974 k2
1975 slots
1976 While
1977 it
1978 uses
1979 more
1980 memory
1981 n2
1982 slots
1983 for
1984 n
1985 entries
1986 in
1987 the
1988 worst
1989 case
1990 and
1991 n
1992 k
1993 slots
1994 in
1995 the
1996 average
1997 case
1998 this
1999 variant
2000 has
2001 guaranteed
2002 constant
2003 worst
2004 case
2005 lookup
2006 time
2007 and
2008 low
2009 amortized
2010 time
2011 for
2012 insertion
2013 Open
2014 addressing
2015 Hash
2016 collision
2017 resolved
2018 by
2019 open
2020 addressing
2021 with
2022 linear
2023 probing
2024 interval
2025 1
2026 Note
2027 that
2028 Ted
2029 Baker
2030 has
2031 a
2032 unique
2033 hash
2034 but
2035 nevertheless
2036 collided
2037 with
2038 Sandra
2039 Dee
2040 that
2041 had
2042 previously
2043 collided
2044 with
2045 John
2046 Smith
2047 In
2048 another
2049 strategy
2050 called
2051 open
2052 addressing
2053 all
2054 entry
2055 records
2056 are
2057 stored
2058 in
2059 the
2060 bucket
2061 array
2062 itself
2063 When
2064 a
2065 new
2066 entry
2067 has
2068 to
2069 be
2070 inserted
2071 the
2072 buckets
2073 are
2074 examined
2075 starting
2076 with
2077 the
2078 hashed
2079 to
2080 slot
2081 and
2082 proceeding
2083 in
2084 some
2085 probe
2086 sequence
2087 until
2088 an
2089 unoccupied
2090 slot
2091 is
2092 found
2093 When
2094 searching
2095 for
2096 an
2097 entry
2098 the
2099 buckets
2100 are
2101 scanned
2102 in
2103 the
2104 same
2105 sequence
2106 until
2107 either
2108 the
2109 target
2110 record
2111 is
2112 found
2113 or
2114 an
2115 unused
2116 array
2117 slot
2118 is
2119 found
2120 which
2121 indicates
2122 that
2123 there
2124 is
2125 no
2126 such
2127 key
2128 in
2129 the
2130 table12
2131 The
2132 name
2133 open
2134 addressing
2135 refers
2136 to
2137 the
2138 fact
2139 that
2140 the
2141 location
2142 address
2143 of
2144 the
2145 item
2146 is
2147 not
2148 determined
2149 by
2150 its
2151 hash
2152 value
2153 This
2154 method
2155 is
2156 also
2157 called
2158 closed
2159 hashing
2160 it
2161 should
2162 not
2163 be
2164 confused
2165 with
2166 open
2167 hashing
2168 or
2169 closed
2170 addressing
2171 that
2172 usually
2173 mean
2174 separate
2175 chaining
2176 Well
2177 known
2178 probe
2179 sequences
2180 include
2181 Linear
2182 probing
2183 in
2184 which
2185 the
2186 interval
2187 between
2188 probes
2189 is
2190 fixed
2191 usually
2192 1
2193 Quadratic
2194 probing
2195 in
2196 which
2197 the
2198 interval
2199 between
2200 probes
2201 is
2202 increased
2203 by
2204 adding
2205 the
2206 successive
2207 outputs
2208 of
2209 a
2210 quadratic
2211 polynomial
2212 to
2213 the
2214 starting
2215 value
2216 given
2217 by
2218 the
2219 original
2220 hash
2221 computation
2222 Double
2223 hashing
2224 in
2225 which
2226 the
2227 interval
2228 between
2229 probes
2230 is
2231 computed
2232 by
2233 another
2234 hash
2235 function
2236 A
2237 drawback
2238 of
2239 all
2240 these
2241 open
2242 addressing
2243 schemes
2244 is
2245 that
2246 the
2247 number
2248 of
2249 stored
2250 entries
2251 cannot
2252 exceed
2253 the
2254 number
2255 of
2256 slots
2257 in
2258 the
2259 bucket
2260 array
2261 In
2262 fact
2263 even
2264 with
2265 good
2266 hash
2267 functions
2268 their
2269 performance
2270 dramatically
2271 degrades
2272 when
2273 the
2274 load
2275 factor
2276 grows
2277 beyond
2278 07
2279 or
2280 so
2281 For
2282 many
2283 applications
2284 these
2285 restrictions
2286 mandate
2287 the
2288 use
2289 of
2290 dynamic
2291 resizing
2292 with
2293 its
2294 attendant
2295 costs
2296 Open
2297 addressing
2298 schemes
2299 also
2300 put
2301 more
2302 stringent
2303 requirements
2304 on
2305 the
2306 hash
2307 function
2308 besides
2309 distributing
2310 the
2311 keys
2312 more
2313 uniformly
2314 over
2315 the
2316 buckets
2317 the
2318 function
2319 must
2320 also
2321 minimize
2322 the
2323 clustering
2324 of
2325 hash
2326 values
2327 that
2328 are
2329 consecutive
2330 in
2331 the
2332 probe
2333 order
2334 Using
2335 separate
2336 chaining
2337 the
2338 only
2339 concern
2340 is
2341 that
2342 too
2343 many
2344 objects
2345 map
2346 to
2347 the
2348 same
2349 hash
2350 value
2351 whether
2352 they
2353 are
2354 adjacent
2355 or
2356 nearby
2357 is
2358 completely
2359 irrelevant
2360 Open
2361 addressing
2362 only
2363 saves
2364 memory
2365 if
2366 the
2367 entries
2368 are
2369 small
2370 less
2371 than
2372 four
2373 times
2374 the
2375 size
2376 of
2377 a
2378 pointer
2379 and
2380 the
2381 load
2382 factor
2383 is
2384 not
2385 too
2386 small
2387 If
2388 the
2389 load
2390 factor
2391 is
2392 close
2393 to
2394 zero
2395 that
2396 is
2397 there
2398 are
2399 far
2400 more
2401 buckets
2402 than
2403 stored
2404 entries
2405 open
2406 addressing
2407 is
2408 wasteful
2409 even
2410 if
2411 each
2412 entry
2413 is
2414 just
2415 two
2416 words
2417 This
2418 graph
2419 compares
2420 the
2421 average
2422 number
2423 of
2424 cache
2425 misses
2426 required
2427 to
2428 look
2429 up
2430 elements
2431 in
2432 tables
2433 with
2434 chaining
2435 and
2436 linear
2437 probing
2438 As
2439 the
2440 table
2441 passes
2442 the
2443 80
2444 full
2445 mark
2446 linear
2447 probings
2448 performance
2449 drastically
2450 degrades
2451 Open
2452 addressing
2453 avoids
2454 the
2455 time
2456 overhead
2457 of
2458 allocating
2459 each
2460 new
2461 entry
2462 record
2463 and
2464 can
2465 be
2466 implemented
2467 even
2468 in
2469 the
2470 absence
2471 of
2472 a
2473 memory
2474 allocator
2475 It
2476 also
2477 avoids
2478 the
2479 extra
2480 indirection
2481 required
2482 to
2483 access
2484 the
2485 first
2486 entry
2487 of
2488 each
2489 bucket
2490 that
2491 is
2492 usually
2493 the
2494 only
2495 one
2496 It
2497 also
2498 has
2499 better
2500 locality
2501 of
2502 reference
2503 particularly
2504 with
2505 linear
2506 probing
2507 With
2508 small
2509 record
2510 sizes
2511 these
2512 factors
2513 can
2514 yield
2515 better
2516 performance
2517 than
2518 chaining
2519 particularly
2520 for
2521 lookups
2522 Hash
2523 tables
2524 with
2525 open
2526 addressing
2527 are
2528 also
2529 easier
2530 to
2531 serialize
2532 because
2533 they
2534 do
2535 not
2536 use
2537 pointers
2538 On
2539 the
2540 other
2541 hand
2542 normal
2543 open
2544 addressing
2545 is
2546 a
2547 poor
2548 choice
2549 for
2550 large
2551 elements
2552 because
2553 these
2554 elements
2555 fill
2556 entire
2557 CPU
2558 cache
2559 lines
2560 negating
2561 the
2562 cache
2563 advantage
2564 and
2565 a
2566 large
2567 amount
2568 of
2569 space
2570 is
2571 wasted
2572 on
2573 large
2574 empty
2575 table
2576 slots
2577 If
2578 the
2579 open
2580 addressing
2581 table
2582 only
2583 stores
2584 references
2585 to
2586 elements
2587 external
2588 storage
2589 it
2590 uses
2591 space
2592 comparable
2593 to
2594 chaining
2595 even
2596 for
2597 large
2598 records
2599 but
2600 loses
2601 its
2602 speed
2603 advantage
2604 Generally
2605 speaking
2606 open
2607 addressing
2608 is
2609 better
2610 used
2611 for
2612 hash
2613 tables
2614 with
2615 small
2616 records
2617 that
2618 can
2619 be
2620 stored
2621 within
2622 the
2623 table
2624 internal
2625 storage
2626 and
2627 fit
2628 in
2629 a
2630 cache
2631 line
2632 They
2633 are
2634 particularly
2635 suitable
2636 for
2637 elements
2638 of
2639 one
2640 word
2641 or
2642 less
2643 If
2644 the
2645 table
2646 is
2647 expected
2648 to
2649 have
2650 a
2651 high
2652 load
2653 factor
2654 the
2655 records
2656 are
2657 large
2658 or
2659 the
2660 data
2661 is
2662 variable
2663 sized
2664 chained
2665 hash
2666 tables
2667 often
2668 perform
2669 as
2670 well
2671 or
2672 better
2673 Ultimately
2674 used
2675 sensibly
2676 any
2677 kind
2678 of
2679 hash
2680 table
2681 algorithm
2682 is
2683 usually
2684 fast
2685 enough
2686 and
2687 the
2688 percentage
2689 of
2690 a
2691 calculation
2692 spent
2693 in
2694 hash
2695 table
2696 code
2697 is
2698 low
2699 Memory
2700 usage
2701 is
2702 rarely
2703 considered
2704 excessive
2705 Therefore
2706 in
2707 most
2708 cases
2709 the
2710 differences
2711 between
2712 these
2713 algorithms
2714 are
2715 marginal
2716 and
2717 other
2718 considerations
2719 typically
2720 come
2721 into
2722 play
2723 Coalesced
2724 hashing
2725 A
2726 hybrid
2727 of
2728 chaining
2729 and
2730 open
2731 addressing
2732 coalesced
2733 hashing
2734 links
2735 together
2736 chains
2737 of
2738 nodes
2739 within
2740 the
2741 table
2742 itself12
2743 Like
2744 open
2745 addressing
2746 it
2747 achieves
2748 space
2749 usage
2750 and
2751 somewhat
2752 diminished
2753 cache
2754 advantages
2755 over
2756 chaining
2757 Like
2758 chaining
2759 it
2760 does
2761 not
2762 exhibit
2763 clustering
2764 effects
2765 in
2766 fact
2767 the
2768 table
2769 can
2770 be
2771 efficiently
2772 filled
2773 to
2774 a
2775 high
2776 density
2777 Unlike
2778 chaining
2779 it
2780 cannot
2781 have
2782 more
2783 elements
2784 than
2785 table
2786 slots
2787 Cuckoo
2788 hashing
2789 Another
2790 alternative
2791 open
2792 addressing
2793 solution
2794 is
2795 cuckoo
2796 hashing
2797 which
2798 ensures
2799 constant
2800 lookup
2801 time
2802 in
2803 the
2804 worst
2805 case
2806 and
2807 constant
2808 amortized
2809 time
2810 for
2811 insertions
2812 and
2813 deletions
2814 It
2815 uses
2816 two
2817 or
2818 more
2819 hash
2820 functions
2821 which
2822 means
2823 any
2824 key
2825 value
2826 pair
2827 could
2828 be
2829 in
2830 two
2831 or
2832 more
2833 locations
2834 For
2835 lookup
2836 the
2837 first
2838 hash
2839 function
2840 is
2841 used
2842 if
2843 the
2844 key
2845 value
2846 is
2847 not
2848 found
2849 then
2850 the
2851 second
2852 hash
2853 function
2854 is
2855 used
2856 and
2857 so
2858 on
2859 If
2860 a
2861 collision
2862 happens
2863 during
2864 insertion
2865 then
2866 the
2867 key
2868 is
2869 re
2870 hashed
2871 with
2872 the
2873 second
2874 hash
2875 function
2876 to
2877 map
2878 it
2879 to
2880 another
2881 bucket
2882 If
2883 all
2884 hash
2885 functions
2886 are
2887 used
2888 and
2889 there
2890 is
2891 still
2892 a
2893 collision
2894 then
2895 the
2896 key
2897 it
2898 collided
2899 with
2900 is
2901 removed
2902 to
2903 make
2904 space
2905 for
2906 the
2907 new
2908 key
2909 and
2910 the
2911 old
2912 key
2913 is
2914 re
2915 hashed
2916 with
2917 one
2918 of
2919 the
2920 other
2921 hash
2922 functions
2923 which
2924 maps
2925 it
2926 to
2927 another
2928 bucket
2929 If
2930 that
2931 location
2932 also
2933 results
2934 in
2935 a
2936 collision
2937 then
2938 the
2939 process
2940 repeats
2941 until
2942 there
2943 is
2944 no
2945 collision
2946 or
2947 the
2948 process
2949 traverses
2950 all
2951 the
2952 buckets
2953 at
2954 which
2955 point
2956 the
2957 table
2958 is
2959 resized
2960 By
2961 combining
2962 multiple
2963 hash
2964 functions
2965 with
2966 multiple
2967 cells
2968 per
2969 bucket
2970 very
2971 high
2972 space
2973 utilisation
2974 can
2975 be
2976 achieved
2977 Hopscotch
2978 hashing
2979 Another
2980 alternative
2981 open
2982 addressing
2983 solution
2984 is
2985 hopscotch
2986 hashing
2987 13
2988 which
2989 combines
2990 the
2991 approaches
2992 of
2993 cuckoo
2994 hashing
2995 and
2996 linear
2997 probing
2998 yet
2999 seems
3000 in
3001 general
3002 to
3003 avoid
3004 their
3005 limitations
3006 In
3007 particular
3008 it
3009 works
3010 well
3011 even
3012 when
3013 the
3014 load
3015 factor
3016 grows
3017 beyond
3018 09
3019 The
3020 algorithm
3021 is
3022 well
3023 suited
3024 for
3025 implementing
3026 a
3027 resizable
3028 concurrent
3029 hash
3030 table
3031 The
3032 hopscotch
3033 hashing
3034 algorithm
3035 works
3036 by
3037 defining
3038 a
3039 neighborhood
3040 of
3041 buckets
3042 near
3043 the
3044 original
3045 hashed
3046 bucket
3047 where
3048 a
3049 given
3050 entry
3051 is
3052 always
3053 found
3054 Thus
3055 search
3056 is
3057 limited
3058 to
3059 the
3060 number
3061 of
3062 entries
3063 in
3064 this
3065 neighborhood
3066 which
3067 is
3068 logarithmic
3069 in
3070 the
3071 worst
3072 case
3073 constant
3074 on
3075 average
3076 and
3077 with
3078 proper
3079 alignment
3080 of
3081 the
3082 neighborhood
3083 typically
3084 requires
3085 one
3086 cache
3087 miss
3088 When
3089 inserting
3090 an
3091 entry
3092 one
3093 first
3094 attempts
3095 to
3096 add
3097 it
3098 to
3099 a
3100 bucket
3101 in
3102 the
3103 neighborhood
3104 However
3105 if
3106 all
3107 buckets
3108 in
3109 this
3110 neighborhood
3111 are
3112 occupied
3113 the
3114 algorithm
3115 traverses
3116 buckets
3117 in
3118 sequence
3119 until
3120 an
3121 open
3122 slot
3123 an
3124 unoccupied
3125 bucket
3126 is
3127 found
3128 as
3129 in
3130 linear
3131 probing
3132 At
3133 that
3134 point
3135 since
3136 the
3137 empty
3138 bucket
3139 is
3140 outside
3141 the
3142 neighborhood
3143 items
3144 are
3145 repeatedly
3146 displaced
3147 in
3148 a
3149 sequence
3150 of
3151 hops
3152 This
3153 is
3154 similar
3155 to
3156 cuckoo
3157 hashing
3158 but
3159 with
3160 the
3161 difference
3162 that
3163 in
3164 this
3165 case
3166 the
3167 empty
3168 slot
3169 is
3170 being
3171 moved
3172 into
3173 the
3174 neighborhood
3175 instead
3176 of
3177 items
3178 being
3179 moved
3180 out
3181 with
3182 the
3183 hope
3184 of
3185 eventually
3186 finding
3187 an
3188 empty
3189 slot
3190 Each
3191 hop
3192 brings
3193 the
3194 open
3195 slot
3196 closer
3197 to
3198 the
3199 original
3200 neighborhood
3201 without
3202 invalidating
3203 the
3204 neighborhood
3205 property
3206 of
3207 any
3208 of
3209 the
3210 buckets
3211 along
3212 the
3213 way
3214 In
3215 the
3216 end
3217 the
3218 open
3219 slot
3220 has
3221 been
3222 moved
3223 into
3224 the
3225 neighborhood
3226 and
3227 the
3228 entry
3229 being
3230 inserted
3231 can
3232 be
3233 added
3234 to
3235 it
3236 Robin
3237 Hood
3238 hashing
3239 One
3240 interesting
3241 variation
3242 on
3243 double
3244 hashing
3245 collision
3246 resolution
3247 is
3248 Robin
3249 Hood
3250 hashing1415
3251 The
3252 idea
3253 is
3254 that
3255 a
3256 new
3257 key
3258 may
3259 displace
3260 a
3261 key
3262 already
3263 inserted
3264 if
3265 its
3266 probe
3267 count
3268 is
3269 larger
3270 than
3271 that
3272 of
3273 the
3274 key
3275 at
3276 the
3277 current
3278 position
3279 The
3280 net
3281 effect
3282 of
3283 this
3284 is
3285 that
3286 it
3287 reduces
3288 worst
3289 case
3290 search
3291 times
3292 in
3293 the
3294 table
3295 This
3296 is
3297 similar
3298 to
3299 ordered
3300 hash
3301 tables16
3302 except
3303 that
3304 the
3305 criterion
3306 for
3307 bumping
3308 a
3309 key
3310 does
3311 not
3312 depend
3313 on
3314 a
3315 direct
3316 relationship
3317 between
3318 the
3319 keys
3320 Since
3321 both
3322 the
3323 worst
3324 case
3325 and
3326 the
3327 variation
3328 in
3329 the
3330 number
3331 of
3332 probes
3333 is
3334 reduced
3335 dramatically
3336 an
3337 interesting
3338 variation
3339 is
3340 to
3341 probe
3342 the
3343 table
3344 starting
3345 at
3346 the
3347 expected
3348 successful
3349 probe
3350 value
3351 and
3352 then
3353 expand
3354 from
3355 that
3356 position
3357 in
3358 both
3359 directions17
3360 External
3361 Robin
3362 Hashing
3363 is
3364 an
3365 extension
3366 of
3367 this
3368 algorithm
3369 where
3370 the
3371 table
3372 is
3373 stored
3374 in
3375 an
3376 external
3377 file
3378 and
3379 each
3380 table
3381 position
3382 corresponds
3383 to
3384 a
3385 fixed
3386 sized
3387 page
3388 or
3389 bucket
3390 with
3391 B
3392 records18
3393 2
3394 choice
3395 hashing
3396 2
3397 choice
3398 hashing
3399 employs
3400 2
3401 different
3402 hash
3403 functions
3404 h1x
3405 and
3406 h2x
3407 for
3408 the
3409 hash
3410 table
3411 Both
3412 hash
3413 functions
3414 are
3415 used
3416 to
3417 compute
3418 two
3419 table
3420 locations
3421 When
3422 an
3423 object
3424 is
3425 inserted
3426 in
3427 the
3428 table
3429 then
3430 it
3431 is
3432 placed
3433 in
3434 the
3435 table
3436 location
3437 that
3438 contains
3439 fewer
3440 objects
3441 with
3442 the
3443 default
3444 being
3445 the
3446 h1x
3447 table
3448 location
3449 if
3450 there
3451 is
3452 equality
3453 in
3454 bucket
3455 size
3456 2
3457 choice
3458 hashing
3459 employs
3460 the
3461 principle
3462 of
3463 the
3464 power
3465 of
3466 two
3467 choices19
3468 Dynamic
3469 resizing
3470 The
3471 good
3472 functioning
3473 of
3474 a
3475 hash
3476 table
3477 depends
3478 on
3479 the
3480 fact
3481 that
3482 the
3483 table
3484 size
3485 is
3486 proportional
3487 to
3488 the
3489 number
3490 of
3491 entries
3492 With
3493 a
3494 fixed
3495 size
3496 and
3497 the
3498 common
3499 structures
3500 it
3501 is
3502 similar
3503 to
3504 linear
3505 search
3506 except
3507 with
3508 a
3509 better
3510 constant
3511 factor
3512 In
3513 some
3514 cases
3515 the
3516 number
3517 of
3518 entries
3519 may
3520 be
3521 definitely
3522 known
3523 in
3524 advance
3525 for
3526 example
3527 keywords
3528 in
3529 a
3530 language
3531 More
3532 commonly
3533 this
3534 is
3535 not
3536 known
3537 for
3538 sure
3539 if
3540 only
3541 due
3542 to
3543 later
3544 changes
3545 in
3546 code
3547 and
3548 data
3549 It
3550 is
3551 one
3552 serious
3553 although
3554 common
3555 mistake
3556 to
3557 not
3558 provide
3559 any
3560 way
3561 for
3562 the
3563 table
3564 to
3565 resize
3566 A
3567 general
3568 purpose
3569 hash
3570 table
3571 class
3572 will
3573 almost
3574 always
3575 have
3576 some
3577 way
3578 to
3579 resize
3580 and
3581 it
3582 is
3583 good
3584 practice
3585 even
3586 for
3587 simple
3588 custom
3589 tables
3590 An
3591 implementation
3592 should
3593 check
3594 the
3595 load
3596 factor
3597 and
3598 do
3599 something
3600 if
3601 it
3602 becomes
3603 too
3604 large
3605 this
3606 needs
3607 to
3608 be
3609 done
3610 only
3611 on
3612 inserts
3613 since
3614 that
3615 is
3616 the
3617 only
3618 thing
3619 that
3620 would
3621 increase
3622 it
3623 To
3624 keep
3625 the
3626 load
3627 factor
3628 under
3629 a
3630 certain
3631 limit
3632 eg
3633 under
3634 3
3635 4
3636 many
3637 table
3638 implementations
3639 expand
3640 the
3641 table
3642 when
3643 items
3644 are
3645 inserted
3646 For
3647 example
3648 in
3649 Javas
3650 HashMap
3651 class
3652 the
3653 default
3654 load
3655 factor
3656 threshold
3657 for
3658 table
3659 expansion
3660 is
3661 075
3662 and
3663 in
3664 Pythons
3665 dict
3666 table
3667 size
3668 is
3669 resized
3670 when
3671 load
3672 factor
3673 is
3674 greater
3675 than
3676 2
3677 3
3678 Since
3679 buckets
3680 are
3681 usually
3682 implemented
3683 on
3684 top
3685 of
3686 a
3687 dynamic
3688 array
3689 and
3690 any
3691 constant
3692 proportion
3693 for
3694 resizing
3695 greater
3696 than
3697 1
3698 will
3699 keep
3700 the
3701 load
3702 factor
3703 under
3704 the
3705 desired
3706 limit
3707 the
3708 exact
3709 choice
3710 of
3711 the
3712 constant
3713 is
3714 determined
3715 by
3716 the
3717 same
3718 space
3719 time
3720 tradeoff
3721 as
3722 for
3723 dynamic
3724 arrays
3725 Resizing
3726 is
3727 accompanied
3728 by
3729 a
3730 full
3731 or
3732 incremental
3733 table
3734 rehash
3735 whereby
3736 existing
3737 items
3738 are
3739 mapped
3740 to
3741 new
3742 bucket
3743 locations
3744 To
3745 limit
3746 the
3747 proportion
3748 of
3749 memory
3750 wasted
3751 due
3752 to
3753 empty
3754 buckets
3755 some
3756 implementations
3757 also
3758 shrink
3759 the
3760 size
3761 of
3762 the
3763 table
3764 followed
3765 by
3766 a
3767 rehash
3768 when
3769 items
3770 are
3771 deleted
3772 From
3773 the
3774 point
3775 of
3776 space
3777 time
3778 tradeoffs
3779 this
3780 operation
3781 is
3782 similar
3783 to
3784 the
3785 deallocation
3786 in
3787 dynamic
3788 arrays
3789 Resizing
3790 by
3791 copying
3792 all
3793 entries
3794 A
3795 common
3796 approach
3797 is
3798 to
3799 automatically
3800 trigger
3801 a
3802 complete
3803 resizing
3804 when
3805 the
3806 load
3807 factor
3808 exceeds
3809 some
3810 threshold
3811 rmax
3812 Then
3813 a
3814 new
3815 larger
3816 table
3817 is
3818 allocated
3819 all
3820 the
3821 entries
3822 of
3823 the
3824 old
3825 table
3826 are
3827 removed
3828 and
3829 inserted
3830 into
3831 this
3832 new
3833 table
3834 and
3835 the
3836 old
3837 table
3838 is
3839 returned
3840 to
3841 the
3842 free
3843 storage
3844 pool
3845 Symmetrically
3846 when
3847 the
3848 load
3849 factor
3850 falls
3851 below
3852 a
3853 second
3854 threshold
3855 rmin
3856 all
3857 entries
3858 are
3859 moved
3860 to
3861 a
3862 new
3863 smaller
3864 table
3865 If
3866 the
3867 table
3868 size
3869 increases
3870 or
3871 decreases
3872 by
3873 a
3874 fixed
3875 percentage
3876 at
3877 each
3878 expansion
3879 the
3880 total
3881 cost
3882 of
3883 these
3884 resizings
3885 amortized
3886 over
3887 all
3888 insert
3889 and
3890 delete
3891 operations
3892 is
3893 still
3894 a
3895 constant
3896 independent
3897 of
3898 the
3899 number
3900 of
3901 entries
3902 n
3903 and
3904 of
3905 the
3906 number
3907 m
3908 of
3909 operations
3910 performed
3911 For
3912 example
3913 consider
3914 a
3915 table
3916 that
3917 was
3918 created
3919 with
3920 the
3921 minimum
3922 possible
3923 size
3924 and
3925 is
3926 doubled
3927 each
3928 time
3929 the
3930 load
3931 ratio
3932 exceeds
3933 some
3934 threshold
3935 If
3936 m
3937 elements
3938 are
3939 inserted
3940 into
3941 that
3942 table
3943 the
3944 total
3945 number
3946 of
3947 extra
3948 re
3949 insertions
3950 that
3951 occur
3952 in
3953 all
3954 dynamic
3955 resizings
3956 of
3957 the
3958 table
3959 is
3960 at
3961 most
3962 m
3963 1
3964 In
3965 other
3966 words
3967 dynamic
3968 resizing
3969 roughly
3970 doubles
3971 the
3972 cost
3973 of
3974 each
3975 insert
3976 or
3977 delete
3978 operation
3979 Incremental
3980 resizing
3981 Some
3982 hash
3983 table
3984 implementations
3985 notably
3986 in
3987 real
3988 time
3989 systems
3990 cannot
3991 pay
3992 the
3993 price
3994 of
3995 enlarging
3996 the
3997 hash
3998 table
3999 all
4000 at
4001 once
4002 because
4003 it
4004 may
4005 interrupt
4006 time
4007 critical
4008 operations
4009 If
4010 one
4011 cannot
4012 avoid
4013 dynamic
4014 resizing
4015 a
4016 solution
4017 is
4018 to
4019 perform
4020 the
4021 resizing
4022 gradually
4023 During
4024 the
4025 resize
4026 allocate
4027 the
4028 new
4029 hash
4030 table
4031 but
4032 keep
4033 the
4034 old
4035 table
4036 unchanged
4037 In
4038 each
4039 lookup
4040 or
4041 delete
4042 operation
4043 check
4044 both
4045 tables
4046 Perform
4047 insertion
4048 operations
4049 only
4050 in
4051 the
4052 new
4053 table
4054 At
4055 each
4056 insertion
4057 also
4058 move
4059 r
4060 elements
4061 from
4062 the
4063 old
4064 table
4065 to
4066 the
4067 new
4068 table
4069 When
4070 all
4071 elements
4072 are
4073 removed
4074 from
4075 the
4076 old
4077 table
4078 deallocate
4079 it
4080 To
4081 ensure
4082 that
4083 the
4084 old
4085 table
4086 is
4087 completely
4088 copied
4089 over
4090 before
4091 the
4092 new
4093 table
4094 itself
4095 needs
4096 to
4097 be
4098 enlarged
4099 it
4100 is
4101 necessary
4102 to
4103 increase
4104 the
4105 size
4106 of
4107 the
4108 table
4109 by
4110 a
4111 factor
4112 of
4113 at
4114 least
4115 r
4116 1
4117 r
4118 during
4119 resizing
4120 Monotonic
4121 keys
4122 If
4123 it
4124 is
4125 known
4126 that
4127 key
4128 values
4129 will
4130 always
4131 increase
4132 or
4133 decrease
4134 monotonically
4135 then
4136 a
4137 variation
4138 of
4139 consistent
4140 hashing
4141 can
4142 be
4143 achieved
4144 by
4145 keeping
4146 a
4147 list
4148 of
4149 the
4150 single
4151 most
4152 recent
4153 key
4154 value
4155 at
4156 each
4157 hash
4158 table
4159 resize
4160 operation
4161 Upon
4162 lookup
4163 keys
4164 that
4165 fall
4166 in
4167 the
4168 ranges
4169 defined
4170 by
4171 these
4172 list
4173 entries
4174 are
4175 directed
4176 to
4177 the
4178 appropriate
4179 hash
4180 function
4181 and
4182 indeed
4183 hash
4184 table
4185 both
4186 of
4187 which
4188 can
4189 be
4190 different
4191 for
4192 each
4193 range
4194 Since
4195 it
4196 is
4197 common
4198 to
4199 grow
4200 the
4201 overall
4202 number
4203 of
4204 entries
4205 by
4206 doubling
4207 there
4208 will
4209 only
4210 be
4211 OlgN
4212 ranges
4213 to
4214 check
4215 and
4216 binary
4217 search
4218 time
4219 for
4220 the
4221 redirection
4222 would
4223 be
4224 OlglgN
4225 As
4226 with
4227 consistent
4228 hashing
4229 this
4230 approach
4231 guarantees
4232 that
4233 any
4234 keys
4235 hash
4236 once
4237 issued
4238 will
4239 never
4240 change
4241 even
4242 when
4243 the
4244 hash
4245 table
4246 is
4247 later
4248 grown
4249 Other
4250 solutions
4251 Linear
4252 hashing20
4253 is
4254 a
4255 hash
4256 table
4257 algorithm
4258 that
4259 permits
4260 incremental
4261 hash
4262 table
4263 expansion
4264 It
4265 is
4266 implemented
4267 using
4268 a
4269 single
4270 hash
4271 table
4272 but
4273 with
4274 two
4275 possible
4276 look
4277 up
4278 functions
4279 Another
4280 way
4281 to
4282 decrease
4283 the
4284 cost
4285 of
4286 table
4287 resizing
4288 is
4289 to
4290 choose
4291 a
4292 hash
4293 function
4294 in
4295 such
4296 a
4297 way
4298 that
4299 the
4300 hashes
4301 of
4302 most
4303 values
4304 do
4305 not
4306 change
4307 when
4308 the
4309 table
4310 is
4311 resized
4312 This
4313 approach
4314 called
4315 consistent
4316 hashing
4317 is
4318 prevalent
4319 in
4320 disk
4321 based
4322 and
4323 distributed
4324 hashes
4325 where
4326 rehashing
4327 is
4328 prohibitively
4329 costly
4330 Performance
4331 analysis
4332 In
4333 the
4334 simplest
4335 model
4336 the
4337 hash
4338 function
4339 is
4340 completely
4341 unspecified
4342 and
4343 the
4344 table
4345 does
4346 not
4347 resize
4348 For
4349 the
4350 best
4351 possible
4352 choice
4353 of
4354 hash
4355 function
4356 a
4357 table
4358 of
4359 size
4360 k
4361 with
4362 open
4363 addressing
4364 has
4365 no
4366 collisions
4367 and
4368 holds
4369 up
4370 to
4371 k
4372 elements
4373 with
4374 a
4375 single
4376 comparison
4377 for
4378 successful
4379 lookup
4380 and
4381 a
4382 table
4383 of
4384 size
4385 k
4386 with
4387 chaining
4388 and
4389 n
4390 keys
4391 has
4392 the
4393 minimum
4394 max0
4395 n
4396 k
4397 collisions
4398 and
4399 O1
4400 n
4401 k
4402 comparisons
4403 for
4404 lookup
4405 For
4406 the
4407 worst
4408 choice
4409 of
4410 hash
4411 function
4412 every
4413 insertion
4414 causes
4415 a
4416 collision
4417 and
4418 hash
4419 tables
4420 degenerate
4421 to
4422 linear
4423 search
4424 with
4425 Ωn
4426 amortized
4427 comparisons
4428 per
4429 insertion
4430 and
4431 up
4432 to
4433 n
4434 comparisons
4435 for
4436 a
4437 successful
4438 lookup
4439 Adding
4440 rehashing
4441 to
4442 this
4443 model
4444 is
4445 straightforward
4446 As
4447 in
4448 a
4449 dynamic
4450 array
4451 geometric
4452 resizing
4453 by
4454 a
4455 factor
4456 of
4457 b
4458 implies
4459 that
4460 only
4461 n
4462 bi
4463 keys
4464 are
4465 inserted
4466 i
4467 or
4468 more
4469 times
4470 so
4471 that
4472 the
4473 total
4474 number
4475 of
4476 insertions
4477 is
4478 bounded
4479 above
4480 by
4481 bn
4482 b
4483 1
4484 which
4485 is
4486 On
4487 By
4488 using
4489 rehashing
4490 to
4491 maintain
4492 n
4493 k
4494 tables
4495 using
4496 both
4497 chaining
4498 and
4499 open
4500 addressing
4501 can
4502 have
4503 unlimited
4504 elements
4505 and
4506 perform
4507 successful
4508 lookup
4509 in
4510 a
4511 single
4512 comparison
4513 for
4514 the
4515 best
4516 choice
4517 of
4518 hash
4519 function
4520 In
4521 more
4522 realistic
4523 models
4524 the
4525 hash
4526 function
4527 is
4528 a
4529 random
4530 variable
4531 over
4532 a
4533 probability
4534 distribution
4535 of
4536 hash
4537 functions
4538 and
4539 performance
4540 is
4541 computed
4542 on
4543 average
4544 over
4545 the
4546 choice
4547 of
4548 hash
4549 function
4550 When
4551 this
4552 distribution
4553 is
4554 uniform
4555 the
4556 assumption
4557 is
4558 called
4559 simple
4560 uniform
4561 hashing
4562 and
4563 it
4564 can
4565 be
4566 shown
4567 that
4568 hashing
4569 with
4570 chaining
4571 requires
4572 Θ1
4573 n
4574 k
4575 comparisons
4576 on
4577 average
4578 for
4579 an
4580 unsuccessful
4581 lookup
4582 and
4583 hashing
4584 with
4585 open
4586 addressing
4587 requires
4588 Θ1
4589 1
4590 n
4591 k21
4592 Both
4593 these
4594 bounds
4595 are
4596 constant
4597 if
4598 we
4599 maintain
4600 n
4601 k
4602 c
4603 using
4604 table
4605 resizing
4606 where
4607 c
4608 is
4609 a
4610 fixed
4611 constant
4612 less
4613 than
4614 1
4615 Features
4616 Advantages
4617 The
4618 main
4619 advantage
4620 of
4621 hash
4622 tables
4623 over
4624 other
4625 table
4626 data
4627 structures
4628 is
4629 speed
4630 This
4631 advantage
4632 is
4633 more
4634 apparent
4635 when
4636 the
4637 number
4638 of
4639 entries
4640 is
4641 large
4642 Hash
4643 tables
4644 are
4645 particularly
4646 efficient
4647 when
4648 the
4649 maximum
4650 number
4651 of
4652 entries
4653 can
4654 be
4655 predicted
4656 in
4657 advance
4658 so
4659 that
4660 the
4661 bucket
4662 array
4663 can
4664 be
4665 allocated
4666 once
4667 with
4668 the
4669 optimum
4670 size
4671 and
4672 never
4673 resized
4674 If
4675 the
4676 set
4677 of
4678 key
4679 value
4680 pairs
4681 is
4682 fixed
4683 and
4684 known
4685 ahead
4686 of
4687 time
4688 so
4689 insertions
4690 and
4691 deletions
4692 are
4693 not
4694 allowed
4695 one
4696 may
4697 reduce
4698 the
4699 average
4700 lookup
4701 cost
4702 by
4703 a
4704 careful
4705 choice
4706 of
4707 the
4708 hash
4709 function
4710 bucket
4711 table
4712 size
4713 and
4714 internal
4715 data
4716 structures
4717 In
4718 particular
4719 one
4720 may
4721 be
4722 able
4723 to
4724 devise
4725 a
4726 hash
4727 function
4728 that
4729 is
4730 collision
4731 free
4732 or
4733 even
4734 perfect
4735 see
4736 below
4737 In
4738 this
4739 case
4740 the
4741 keys
4742 need
4743 not
4744 be
4745 stored
4746 in
4747 the
4748 table
4749 Drawbacks
4750 Although
4751 operations
4752 on
4753 a
4754 hash
4755 table
4756 take
4757 constant
4758 time
4759 on
4760 average
4761 the
4762 cost
4763 of
4764 a
4765 good
4766 hash
4767 function
4768 can
4769 be
4770 significantly
4771 higher
4772 than
4773 the
4774 inner
4775 loop
4776 of
4777 the
4778 lookup
4779 algorithm
4780 for
4781 a
4782 sequential
4783 list
4784 or
4785 search
4786 tree
4787 Thus
4788 hash
4789 tables
4790 are
4791 not
4792 effective
4793 when
4794 the
4795 number
4796 of
4797 entries
4798 is
4799 very
4800 small
4801 However
4802 in
4803 some
4804 cases
4805 the
4806 high
4807 cost
4808 of
4809 computing
4810 the
4811 hash
4812 function
4813 can
4814 be
4815 mitigated
4816 by
4817 saving
4818 the
4819 hash
4820 value
4821 together
4822 with
4823 the
4824 key
4825 For
4826 certain
4827 string
4828 processing
4829 applications
4830 such
4831 as
4832 spell
4833 checking
4834 hash
4835 tables
4836 may
4837 be
4838 less
4839 efficient
4840 than
4841 tries
4842 finite
4843 automata
4844 or
4845 Judy
4846 arrays
4847 Also
4848 if
4849 each
4850 key
4851 is
4852 represented
4853 by
4854 a
4855 small
4856 enough
4857 number
4858 of
4859 bits
4860 then
4861 instead
4862 of
4863 a
4864 hash
4865 table
4866 one
4867 may
4868 use
4869 the
4870 key
4871 directly
4872 as
4873 the
4874 index
4875 into
4876 an
4877 array
4878 of
4879 values
4880 Note
4881 that
4882 there
4883 are
4884 no
4885 collisions
4886 in
4887 this
4888 case
4889 The
4890 entries
4891 stored
4892 in
4893 a
4894 hash
4895 table
4896 can
4897 be
4898 enumerated
4899 efficiently
4900 at
4901 constant
4902 cost
4903 per
4904 entry
4905 but
4906 only
4907 in
4908 some
4909 pseudo
4910 random
4911 order
4912 Therefore
4913 there
4914 is
4915 no
4916 efficient
4917 way
4918 to
4919 locate
4920 an
4921 entry
4922 whose
4923 key
4924 is
4925 nearest
4926 to
4927 a
4928 given
4929 key
4930 Listing
4931 all
4932 n
4933 entries
4934 in
4935 some
4936 specific
4937 order
4938 generally
4939 requires
4940 a
4941 separate
4942 sorting
4943 step
4944 whose
4945 cost
4946 is
4947 proportional
4948 to
4949 logn
4950 per
4951 entry
4952 In
4953 comparison
4954 ordered
4955 search
4956 trees
4957 have
4958 lookup
4959 and
4960 insertion
4961 cost
4962 proportional
4963 to
4964 logn
4965 but
4966 allow
4967 finding
4968 the
4969 nearest
4970 key
4971 at
4972 about
4973 the
4974 same
4975 cost
4976 and
4977 ordered
4978 enumeration
4979 of
4980 all
4981 entries
4982 at
4983 constant
4984 cost
4985 per
4986 entry
4987 If
4988 the
4989 keys
4990 are
4991 not
4992 stored
4993 because
4994 the
4995 hash
4996 function
4997 is
4998 collision
4999 free
5000 there
5001 may
5002 be
5003 no
5004 easy
5005 way
5006 to
5007 enumerate
5008 the
5009 keys
5010 that
5011 are
5012 present
5013 in
5014 the
5015 table
5016 at
5017 any
5018 given
5019 moment
5020 Although
5021 the
5022 average
5023 cost
5024 per
5025 operation
5026 is
5027 constant
5028 and
5029 fairly
5030 small
5031 the
5032 cost
5033 of
5034 a
5035 single
5036 operation
5037 may
5038 be
5039 quite
5040 high
5041 In
5042 particular
5043 if
5044 the
5045 hash
5046 table
5047 uses
5048 dynamic
5049 resizing
5050 an
5051 insertion
5052 or
5053 deletion
5054 operation
5055 may
5056 occasionally
5057 take
5058 time
5059 proportional
5060 to
5061 the
5062 number
5063 of
5064 entries
5065 This
5066 may
5067 be
5068 a
5069 serious
5070 drawback
5071 in
5072 real
5073 time
5074 or
5075 interactive
5076 applications
5077 Hash
5078 tables
5079 in
5080 general
5081 exhibit
5082 poor
5083 locality
5084 of
5085 reference
5086 that
5087 is
5088 the
5089 data
5090 to
5091 be
5092 accessed
5093 is
5094 distributed
5095 seemingly
5096 at
5097 random
5098 in
5099 memory
5100 Because
5101 hash
5102 tables
5103 cause
5104 access
5105 patterns
5106 that
5107 jump
5108 around
5109 this
5110 can
5111 trigger
5112 microprocessor
5113 cache
5114 misses
5115 that
5116 cause
5117 long
5118 delays
5119 Compact
5120 data
5121 structures
5122 such
5123 as
5124 arrays
5125 searched
5126 with
5127 linear
5128 search
5129 may
5130 be
5131 faster
5132 if
5133 the
5134 table
5135 is
5136 relatively
5137 small
5138 and
5139 keys
5140 are
5141 compact
5142 The
5143 optimal
5144 performance
5145 point
5146 varies
5147 from
5148 system
5149 to
5150 system
5151 Hash
5152 tables
5153 become
5154 quite
5155 inefficient
5156 when
5157 there
5158 are
5159 many
5160 collisions
5161 While
5162 extremely
5163 uneven
5164 hash
5165 distributions
5166 are
5167 extremely
5168 unlikely
5169 to
5170 arise
5171 by
5172 chance
5173 a
5174 malicious
5175 adversary
5176 with
5177 knowledge
5178 of
5179 the
5180 hash
5181 function
5182 may
5183 be
5184 able
5185 to
5186 supply
5187 information
5188 to
5189 a
5190 hash
5191 that
5192 creates
5193 worst
5194 case
5195 behavior
5196 by
5197 causing
5198 excessive
5199 collisions
5200 resulting
5201 in
5202 very
5203 poor
5204 performance
5205 eg
5206 a
5207 denial
5208 of
5209 service
5210 attack22
5211 In
5212 critical
5213 applications
5214 universal
5215 hashing
5216 can
5217 be
5218 used
5219 a
5220 data
5221 structure
5222 with
5223 better
5224 worst
5225 case
5226 guarantees
5227 may
5228 be
5229 preferable23
5230 Uses
5231 Question
5232 book
5233 newsvg
5234 This
5235 section
5236 does
5237 not
5238 cite
5239 any
5240 references
5241 or
5242 sources
5243 Please
5244 help
5245 improve
5246 this
5247 section
5248 by
5249 adding
5250 citations
5251 to
5252 reliable
5253 sources
5254 Unsourced
5255 material
5256 may
5257 be
5258 challenged
5259 and
5260 removed
5261 July
5262 2013
5263 Associative
5264 arrays
5265 Hash
5266 tables
5267 are
5268 commonly
5269 used
5270 to
5271 implement
5272 many
5273 types
5274 of
5275 in
5276 memory
5277 tables
5278 They
5279 are
5280 used
5281 to
5282 implement
5283 associative
5284 arrays
5285 arrays
5286 whose
5287 indices
5288 are
5289 arbitrary
5290 strings
5291 or
5292 other
5293 complicated
5294 objects
5295 especially
5296 in
5297 interpreted
5298 programming
5299 languages
5300 like
5301 Ruby
5302 Python
5303 and
5304 PHP
5305 When
5306 storing
5307 a
5308 new
5309 item
5310 into
5311 a
5312 multimap
5313 and
5314 a
5315 hash
5316 collision
5317 occurs
5318 the
5319 multimap
5320 unconditionally
5321 stores
5322 both
5323 items
5324 When
5325 storing
5326 a
5327 new
5328 item
5329 into
5330 a
5331 typical
5332 associative
5333 array
5334 and
5335 a
5336 hash
5337 collision
5338 occurs
5339 but
5340 the
5341 actual
5342 keys
5343 themselves
5344 are
5345 different
5346 the
5347 associative
5348 array
5349 likewise
5350 stores
5351 both
5352 items
5353 However
5354 if
5355 the
5356 key
5357 of
5358 the
5359 new
5360 item
5361 exactly
5362 matches
5363 the
5364 key
5365 of
5366 an
5367 old
5368 item
5369 the
5370 associative
5371 array
5372 typically
5373 erases
5374 the
5375 old
5376 item
5377 and
5378 overwrites
5379 it
5380 with
5381 the
5382 new
5383 item
5384 so
5385 every
5386 item
5387 in
5388 the
5389 table
5390 has
5391 a
5392 unique
5393 key
5394 Database
5395 indexing
5396 Hash
5397 tables
5398 may
5399 also
5400 be
5401 used
5402 as
5403 disk
5404 based
5405 data
5406 structures
5407 and
5408 database
5409 indices
5410 such
5411 as
5412 in
5413 dbm
5414 although
5415 B
5416 trees
5417 are
5418 more
5419 popular
5420 in
5421 these
5422 applications
5423 Caches
5424 Hash
5425 tables
5426 can
5427 be
5428 used
5429 to
5430 implement
5431 caches
5432 auxiliary
5433 data
5434 tables
5435 that
5436 are
5437 used
5438 to
5439 speed
5440 up
5441 the
5442 access
5443 to
5444 data
5445 that
5446 is
5447 primarily
5448 stored
5449 in
5450 slower
5451 media
5452 In
5453 this
5454 application
5455 hash
5456 collisions
5457 can
5458 be
5459 handled
5460 by
5461 discarding
5462 one
5463 of
5464 the
5465 two
5466 colliding
5467 entries
5468 usually
5469 erasing
5470 the
5471 old
5472 item
5473 that
5474 is
5475 currently
5476 stored
5477 in
5478 the
5479 table
5480 and
5481 overwriting
5482 it
5483 with
5484 the
5485 new
5486 item
5487 so
5488 every
5489 item
5490 in
5491 the
5492 table
5493 has
5494 a
5495 unique
5496 hash
5497 value
5498 Sets
5499 Besides
5500 recovering
5501 the
5502 entry
5503 that
5504 has
5505 a
5506 given
5507 key
5508 many
5509 hash
5510 table
5511 implementations
5512 can
5513 also
5514 tell
5515 whether
5516 such
5517 an
5518 entry
5519 exists
5520 or
5521 not
5522 Those
5523 structures
5524 can
5525 therefore
5526 be
5527 used
5528 to
5529 implement
5530 a
5531 set
5532 data
5533 structure
5534 which
5535 merely
5536 records
5537 whether
5538 a
5539 given
5540 key
5541 belongs
5542 to
5543 a
5544 specified
5545 set
5546 of
5547 keys
5548 In
5549 this
5550 case
5551 the
5552 structure
5553 can
5554 be
5555 simplified
5556 by
5557 eliminating
5558 all
5559 parts
5560 that
5561 have
5562 to
5563 do
5564 with
5565 the
5566 entry
5567 values
5568 Hashing
5569 can
5570 be
5571 used
5572 to
5573 implement
5574 both
5575 static
5576 and
5577 dynamic
5578 sets
5579 Object
5580 representation
5581 Several
5582 dynamic
5583 languages
5584 such
5585 as
5586 Perl
5587 Python
5588 JavaScript
5589 and
5590 Ruby
5591 use
5592 hash
5593 tables
5594 to
5595 implement
5596 objects
5597 In
5598 this
5599 representation
5600 the
5601 keys
5602 are
5603 the
5604 names
5605 of
5606 the
5607 members
5608 and
5609 methods
5610 of
5611 the
5612 object
5613 and
5614 the
5615 values
5616 are
5617 pointers
5618 to
5619 the
5620 corresponding
5621 member
5622 or
5623 method
5624 Unique
5625 data
5626 representation
5627 Hash
5628 tables
5629 can
5630 be
5631 used
5632 by
5633 some
5634 programs
5635 to
5636 avoid
5637 creating
5638 multiple
5639 character
5640 strings
5641 with
5642 the
5643 same
5644 contents
5645 For
5646 that
5647 purpose
5648 all
5649 strings
5650 in
5651 use
5652 by
5653 the
5654 program
5655 are
5656 stored
5657 in
5658 a
5659 single
5660 string
5661 pool
5662 implemented
5663 as
5664 a
5665 hash
5666 table
5667 which
5668 is
5669 checked
5670 whenever
5671 a
5672 new
5673 string
5674 has
5675 to
5676 be
5677 created
5678 This
5679 technique
5680 was
5681 introduced
5682 in
5683 Lisp
5684 interpreters
5685 under
5686 the
5687 name
5688 hash
5689 consing
5690 and
5691 can
5692 be
5693 used
5694 with
5695 many
5696 other
5697 kinds
5698 of
5699 data
5700 expression
5701 trees
5702 in
5703 a
5704 symbolic
5705 algebra
5706 system
5707 records
5708 in
5709 a
5710 database
5711 files
5712 in
5713 a
5714 file
5715 system
5716 binary
5717 decision
5718 diagrams
5719 etc
5720 String
5721 interning
5722 Main
5723 article
5724 String
5725 interning
5726 Implementations
5727 In
5728 programming
5729 languages
5730 Many
5731 programming
5732 languages
5733 provide
5734 hash
5735 table
5736 functionality
5737 either
5738 as
5739 built
5740 in
5741 associative
5742 arrays
5743 or
5744 as
5745 standard
5746 library
5747 modules
5748 In
5749 C
5750 11
5751 for
5752 example
5753 the
5754 unordered
5755 map
5756 class
5757 provides
5758 hash
5759 tables
5760 for
5761 keys
5762 and
5763 values
5764 of
5765 arbitrary
5766 type
5767 In
5768 PHP
5769 5
5770 the
5771 Zend
5772 2
5773 engine
5774 uses
5775 one
5776 of
5777 the
5778 hash
5779 functions
5780 from
5781 Daniel
5782 J
5783 Bernstein
5784 to
5785 generate
5786 the
5787 hash
5788 values
5789 used
5790 in
5791 managing
5792 the
5793 mappings
5794 of
5795 data
5796 pointers
5797 stored
5798 in
5799 a
5800 hash
5801 table
5802 In
5803 the
5804 PHP
5805 source
5806 code
5807 it
5808 is
5809 labelled
5810 as
5811 DJBX33A
5812 Daniel
5813 J
5814 Bernstein
5815 Times
5816 33
5817 with
5818 Addition
5819 Pythons
5820 built
5821 in
5822 hash
5823 table
5824 implementation
5825 in
5826 the
5827 form
5828 of
5829 the
5830 dict
5831 type
5832 as
5833 well
5834 as
5835 Perls
5836 hash
5837 type
5838 are
5839 used
5840 internally
5841 to
5842 implement
5843 namespaces
5844 and
5845 therefore
5846 need
5847 to
5848 pay
5849 more
5850 attention
5851 to
5852 security
5853 ie
5854 collision
5855 attacks
5856 In
5857 the
5858 NET
5859 Framework
5860 support
5861 for
5862 hash
5863 tables
5864 is
5865 provided
5866 via
5867 the
5868 non
5869 generic
5870 Hashtable
5871 and
5872 generic
5873 Dictionary
5874 classes
5875 which
5876 store
5877 key
5878 value
5879 pairs
5880 and
5881 the
5882 generic
5883 HashSet
5884 class
5885 which
5886 stores
5887 only
5888 values
5889 Independent
5890 packages
5891 SparseHash
5892 formerly
5893 Google
5894 SparseHash
5895 An
5896 extremely
5897 memory
5898 efficient
5899 hash
5900 map
5901 implementation
5902 with
5903 only
5904 2
5905 bits
5906 entry
5907 of
5908 overhead
5909 The
5910 SparseHash
5911 library
5912 has
5913 several
5914 C
5915 hash
5916 map
5917 implementations
5918 with
5919 different
5920 performance
5921 characteristics
5922 including
5923 one
5924 that
5925 optimizes
5926 for
5927 memory
5928 use
5929 and
5930 another
5931 that
5932 optimizes
5933 for
5934 speed
5935 Sunrise
5936 DD
5937 An
5938 open
5939 source
5940 C
5941 library
5942 for
5943 hash
5944 table
5945 storage
5946 of
5947 arbitrary
5948 data
5949 objects
5950 with
5951 lock
5952 free
5953 lookups
5954 built
5955 in
5956 reference
5957 counting
5958 and
5959 guaranteed
5960 order
5961 iteration
5962 The
5963 library
5964 can
5965 participate
5966 in
5967 external
5968 reference
5969 counting
5970 systems
5971 or
5972 use
5973 its
5974 own
5975 built
5976 in
5977 reference
5978 counting
5979 It
5980 comes
5981 with
5982 a
5983 variety
5984 of
5985 hash
5986 functions
5987 and
5988 allows
5989 the
5990 use
5991 of
5992 runtime
5993 supplied
5994 hash
5995 functions
5996 via
5997 callback
5998 mechanism
5999 Source
6000 code
6001 is
6002 well
6003 documented
6004 uthash
6005 This
6006 is
6007 an
6008 easy
6009 to
6010 use
6011 hash
6012 table
6013 for
6014 C
6015 structures
6016 History
6017 The
6018 idea
6019 of
6020 hashing
6021 arose
6022 independently
6023 in
6024 different
6025 places
6026 In
6027 January
6028 1953
6029 H
6030 P
6031 Luhn
6032 wrote
6033 an
6034 internal
6035 IBM
6036 memorandum
6037 that
6038 used
6039 hashing
6040 with
6041 chaining24
6042 G
6043 N
6044 Amdahl
6045 E
6046 M
6047 Boehme
6048 N
6049 Rochester
6050 and
6051 Arthur
6052 Samuel
6053 implemented
6054 a
6055 program
6056 using
6057 hashing
6058 at
6059 about
6060 the
6061 same
6062 time
6063 Open
6064 addressing
6065 with
6066 linear
6067 probing
6068 relatively
6069 prime
6070 stepping
6071 is
6072 cr
6073 ed
6074 to
6075 Amdahl
6076 but
6077 Ershov
6078 in
6079 Russia
6080 had
6081 the
6082 same
6083 idea24
6084 See
6085 also
6086 Rabin
6087 Karp
6088 string
6089 search
6090 algorithm
6091 Stable
6092 hashing
6093 Consistent
6094 hashing
6095 Extendible
6096 hashing
6097 Lazy
6098 deletion
6099 Pearson
6100 hashing
6101 Related
6102 data
6103 structures
6104 There
6105 are
6106 several
6107 data
6108 structures
6109 that
6110 use
6111 hash
6112 functions
6113 but
6114 cannot
6115 be
6116 considered
6117 special
6118 cases
6119 of
6120 hash
6121 tables
6122 Bloom
6123 filter
6124 memory
6125 efficient
6126 data
6127 structure
6128 designed
6129 for
6130 constant
6131 time
6132 approximate
6133 lookups
6134 uses
6135 hash
6136 functions
6137 and
6138 can
6139 be
6140 seen
6141 as
6142 an
6143 approximate
6144 hash
6145 table
6146 Distributed
6147 hash
6148 table
6149 DHT
6150 a
6151 resilient
6152 dynamic
6153 table
6154 spread
6155 over
6156 several
6157 nodes
6158 of
6159 a
6160 network
6161 Hash
6162 array
6163 mapped
6164 trie
6165 a
6166 trie
6167 structure
6168 similar
6169 to
6170 the
6171 array
6172 mapped
6173 trie
6174 but
6175 where
6176 each
6177 key
6178 is
6179 hashed
6180 first
6181 A
6182 red
6183 black
6184 tree
6185 is
6186 a
6187 data
6188 structure
6189 which
6190 is
6191 a
6192 type
6193 of
6194 self
6195 balancing
6196 binary
6197 search
6198 tree
6199 Balance
6200 is
6201 preserved
6202 by
6203 painting
6204 each
6205 node
6206 of
6207 the
6208 tree
6209 with
6210 one
6211 of
6212 two
6213 colors
6214 typically
6215 called
6216 red
6217 and
6218 black
6219 in
6220 a
6221 way
6222 that
6223 satisfies
6224 certain
6225 properties
6226 which
6227 collectively
6228 constrain
6229 how
6230 unbalanced
6231 the
6232 tree
6233 can
6234 become
6235 in
6236 the
6237 worst
6238 case
6239 When
6240 the
6241 tree
6242 is
6243 modified
6244 the
6245 new
6246 tree
6247 is
6248 subsequently
6249 rearranged
6250 and
6251 repainted
6252 to
6253 restore
6254 the
6255 coloring
6256 properties
6257 The
6258 properties
6259 are
6260 designed
6261 in
6262 such
6263 a
6264 way
6265 that
6266 this
6267 rearranging
6268 and
6269 recoloring
6270 can
6271 be
6272 performed
6273 efficiently
6274 The
6275 balancing
6276 of
6277 the
6278 tree
6279 is
6280 not
6281 perfect
6282 but
6283 it
6284 is
6285 good
6286 enough
6287 to
6288 allow
6289 it
6290 to
6291 guarantee
6292 searching
6293 in
6294 O
6295 log
6296 n
6297 time
6298 where
6299 n
6300 is
6301 the
6302 total
6303 number
6304 of
6305 elements
6306 in
6307 the
6308 tree
6309 The
6310 insertion
6311 and
6312 deletion
6313 operations
6314 along
6315 with
6316 the
6317 tree
6318 rearrangement
6319 and
6320 recoloring
6321 are
6322 also
6323 performed
6324 in
6325 O
6326 log
6327 n
6328 time
6329 1
6330 Tracking
6331 the
6332 color
6333 of
6334 each
6335 node
6336 requires
6337 only
6338 1
6339 bit
6340 of
6341 information
6342 per
6343 node
6344 because
6345 there
6346 are
6347 only
6348 two
6349 colors
6350 The
6351 tree
6352 does
6353 not
6354 contain
6355 any
6356 other
6357 data
6358 specific
6359 to
6360 its
6361 being
6362 a
6363 red
6364 black
6365 tree
6366 so
6367 its
6368 memory
6369 footprint
6370 is
6371 almost
6372 identical
6373 to
6374 a
6375 classic
6376 uncolored
6377 binary
6378 search
6379 tree
6380 In
6381 many
6382 cases
6383 the
6384 additional
6385 bit
6386 of
6387 information
6388 can
6389 be
6390 stored
6391 at
6392 no
6393 additional
6394 memory
6395 cost
6396 The
6397 original
6398 data
6399 structure
6400 was
6401 invented
6402 in
6403 1972
6404 by
6405 Rudolf
6406 Bayer
6407 2
6408 and
6409 named
6410 symmetric
6411 binary
6412 B
6413 tree
6414 but
6415 acquired
6416 its
6417 modern
6418 name
6419 in
6420 a
6421 paper
6422 in
6423 1978
6424 by
6425 Leonidas
6426 J
6427 Guibas
6428 and
6429 Robert
6430 Sedgewick
6431 entitled
6432 A
6433 Dichromatic
6434 Framework
6435 for
6436 Balanced
6437 Trees
6438 3
6439 The
6440 color
6441 red
6442 was
6443 chosen
6444 because
6445 it
6446 was
6447 the
6448 best
6449 looking
6450 color
6451 produced
6452 by
6453 the
6454 color
6455 laser
6456 printer
6457 available
6458 to
6459 the
6460 authors
6461 while
6462 working
6463 at
6464 Xerox
6465 PARC
6466 4
6467 Terminology
6468 A
6469 red
6470 black
6471 tree
6472 is
6473 a
6474 special
6475 type
6476 of
6477 binary
6478 tree
6479 used
6480 in
6481 computer
6482 science
6483 to
6484 organize
6485 pieces
6486 of
6487 comparable
6488 data
6489 such
6490 as
6491 text
6492 fragments
6493 or
6494 numbers
6495 The
6496 leaf
6497 nodes
6498 of
6499 red
6500 black
6501 trees
6502 do
6503 not
6504 contain
6505 data
6506 These
6507 leaves
6508 need
6509 not
6510 be
6511 explicit
6512 in
6513 computer
6514 memory—a
6515 null
6516 child
6517 pointer
6518 can
6519 encode
6520 the
6521 fact
6522 that
6523 this
6524 child
6525 is
6526 a
6527 leaf—but
6528 it
6529 simplifies
6530 some
6531 algorithms
6532 for
6533 operating
6534 on
6535 red
6536 black
6537 trees
6538 if
6539 the
6540 leaves
6541 really
6542 are
6543 explicit
6544 nodes
6545 To
6546 save
6547 memory
6548 sometimes
6549 a
6550 single
6551 sentinel
6552 node
6553 performs
6554 the
6555 role
6556 of
6557 all
6558 leaf
6559 nodes
6560 all
6561 references
6562 from
6563 internal
6564 nodes
6565 to
6566 leaf
6567 nodes
6568 then
6569 point
6570 to
6571 the
6572 sentinel
6573 node
6574 Red
6575 black
6576 trees
6577 like
6578 all
6579 binary
6580 search
6581 trees
6582 allow
6583 efficient
6584 in
6585 order
6586 traversal
6587 that
6588 is
6589 in
6590 the
6591 order
6592 Left
6593 Root
6594 Right
6595 of
6596 their
6597 elements
6598 The
6599 search
6600 time
6601 results
6602 from
6603 the
6604 traversal
6605 from
6606 root
6607 to
6608 leaf
6609 and
6610 therefore
6611 a
6612 balanced
6613 tree
6614 of
6615 n
6616 nodes
6617 having
6618 the
6619 least
6620 possible
6621 tree
6622 height
6623 results
6624 in
6625 O
6626 log
6627 n
6628 search
6629 time
6630 Properties
6631 Diagram
6632 of
6633 binary
6634 tree
6635 The
6636 black
6637 root
6638 node
6639 has
6640 two
6641 red
6642 children
6643 and
6644 four
6645 black
6646 grandchildren
6647 The
6648 child
6649 nodes
6650 of
6651 the
6652 grandchildren
6653 are
6654 black
6655 nil
6656 pointers
6657 or
6658 red
6659 nodes
6660 with
6661 black
6662 nil
6663 pointers
6664 An
6665 example
6666 of
6667 a
6668 red
6669 black
6670 tree
6671 In
6672 addition
6673 to
6674 the
6675 requirements
6676 imposed
6677 on
6678 a
6679 binary
6680 search
6681 tree
6682 the
6683 following
6684 must
6685 be
6686 satisfied
6687 by
6688 a
6689 red
6690 black
6691 tree
6692 5
6693 A
6694 node
6695 is
6696 either
6697 red
6698 or
6699 black
6700 The
6701 root
6702 is
6703 black
6704 This
6705 rule
6706 is
6707 sometimes
6708 omitted
6709 Since
6710 the
6711 root
6712 can
6713 always
6714 be
6715 changed
6716 from
6717 red
6718 to
6719 black
6720 but
6721 not
6722 necessarily
6723 vice
6724 versa
6725 this
6726 rule
6727 has
6728 little
6729 effect
6730 on
6731 analysis
6732 All
6733 leaves
6734 NIL
6735 are
6736 black
6737 All
6738 leaves
6739 are
6740 same
6741 color
6742 as
6743 the
6744 root
6745 Every
6746 red
6747 node
6748 must
6749 have
6750 two
6751 black
6752 child
6753 nodes
6754 Every
6755 path
6756 from
6757 a
6758 given
6759 node
6760 to
6761 any
6762 of
6763 its
6764 descendant
6765 leaves
6766 contains
6767 the
6768 same
6769 number
6770 of
6771 black
6772 nodes
6773 These
6774 constraints
6775 enforce
6776 a
6777 critical
6778 property
6779 of
6780 red
6781 black
6782 trees
6783 that
6784 the
6785 path
6786 from
6787 the
6788 root
6789 to
6790 the
6791 furthest
6792 leaf
6793 is
6794 no
6795 more
6796 than
6797 twice
6798 as
6799 long
6800 as
6801 the
6802 path
6803 from
6804 the
6805 root
6806 to
6807 the
6808 nearest
6809 leaf
6810 The
6811 result
6812 is
6813 that
6814 the
6815 tree
6816 is
6817 roughly
6818 height
6819 balanced
6820 Since
6821 operations
6822 such
6823 as
6824 inserting
6825 deleting
6826 and
6827 finding
6828 values
6829 require
6830 worst
6831 case
6832 time
6833 proportional
6834 to
6835 the
6836 height
6837 of
6838 the
6839 tree
6840 this
6841 theoretical
6842 upper
6843 bound
6844 on
6845 the
6846 height
6847 allows
6848 red
6849 black
6850 trees
6851 to
6852 be
6853 efficient
6854 in
6855 the
6856 worst
6857 case
6858 unlike
6859 ordinary
6860 binary
6861 search
6862 trees
6863 To
6864 see
6865 why
6866 this
6867 is
6868 guaranteed
6869 it
6870 suffices
6871 to
6872 consider
6873 the
6874 effect
6875 of
6876 properties
6877 4
6878 and
6879 5
6880 together
6881 For
6882 a
6883 red
6884 black
6885 tree
6886 T
6887 let
6888 B
6889 be
6890 the
6891 number
6892 of
6893 black
6894 nodes
6895 in
6896 property
6897 5
6898 Let
6899 the
6900 shortest
6901 possible
6902 path
6903 from
6904 the
6905 root
6906 of
6907 T
6908 to
6909 any
6910 leaf
6911 consist
6912 of
6913 B
6914 black
6915 nodes
6916 Longer
6917 possible
6918 paths
6919 may
6920 be
6921 constructed
6922 by
6923 inserting
6924 red
6925 nodes
6926 However
6927 property
6928 4
6929 makes
6930 it
6931 impossible
6932 to
6933 insert
6934 more
6935 than
6936 one
6937 consecutive
6938 red
6939 node
6940 Therefore
6941 the
6942 longest
6943 possible
6944 path
6945 consists
6946 of
6947 2B
6948 nodes
6949 alternating
6950 black
6951 and
6952 red
6953 The
6954 shortest
6955 possible
6956 path
6957 has
6958 all
6959 black
6960 nodes
6961 and
6962 the
6963 longest
6964 possible
6965 path
6966 alternates
6967 between
6968 red
6969 and
6970 black
6971 nodes
6972 Since
6973 all
6974 maximal
6975 paths
6976 have
6977 the
6978 same
6979 number
6980 of
6981 black
6982 nodes
6983 by
6984 property
6985 5
6986 this
6987 shows
6988 that
6989 no
6990 path
6991 is
6992 more
6993 than
6994 twice
6995 as
6996 long
6997 as
6998 any
6999 other
7000 path
7001 Analogy
7002 to
7003 B
7004 trees
7005 of
7006 order
7007 4
7008 The
7009 same
7010 red
7011 black
7012 tree
7013 as
7014 in
7015 the
7016 example
7017 above
7018 seen
7019 as
7020 a
7021 B
7022 tree
7023 A
7024 red
7025 black
7026 tree
7027 is
7028 similar
7029 in
7030 structure
7031 to
7032 a
7033 B
7034 tree
7035 of
7036 order
7037 note
7038 1
7039 4
7040 where
7041 each
7042 node
7043 can
7044 contain
7045 between
7046 1
7047 and
7048 3
7049 values
7050 and
7051 accordingly
7052 between
7053 2
7054 and
7055 4
7056 child
7057 pointers
7058 In
7059 such
7060 a
7061 B
7062 tree
7063 each
7064 node
7065 will
7066 contain
7067 only
7068 one
7069 value
7070 matching
7071 the
7072 value
7073 in
7074 a
7075 black
7076 node
7077 of
7078 the
7079 red
7080 black
7081 tree
7082 with
7083 an
7084 optional
7085 value
7086 before
7087 and
7088 or
7089 after
7090 it
7091 in
7092 the
7093 same
7094 node
7095 both
7096 matching
7097 an
7098 equivalent
7099 red
7100 node
7101 of
7102 the
7103 red
7104 black
7105 tree
7106 One
7107 way
7108 to
7109 see
7110 this
7111 equivalence
7112 is
7113 to
7114 move
7115 up
7116 the
7117 red
7118 nodes
7119 in
7120 a
7121 graphical
7122 representation
7123 of
7124 the
7125 red
7126 black
7127 tree
7128 so
7129 that
7130 they
7131 align
7132 horizontally
7133 with
7134 their
7135 parent
7136 black
7137 node
7138 by
7139 creating
7140 together
7141 a
7142 horizontal
7143 cluster
7144 In
7145 the
7146 B
7147 tree
7148 or
7149 in
7150 the
7151 modified
7152 graphical
7153 representation
7154 of
7155 the
7156 red
7157 black
7158 tree
7159 all
7160 leaf
7161 nodes
7162 are
7163 at
7164 the
7165 same
7166 depth
7167 The
7168 red
7169 black
7170 tree
7171 is
7172 then
7173 structurally
7174 equivalent
7175 to
7176 a
7177 B
7178 tree
7179 of
7180 order
7181 4
7182 with
7183 a
7184 minimum
7185 fill
7186 factor
7187 of
7188 33
7189 of
7190 values
7191 per
7192 cluster
7193 with
7194 a
7195 maximum
7196 capacity
7197 of
7198 3
7199 values
7200 This
7201 B
7202 tree
7203 type
7204 is
7205 still
7206 more
7207 general
7208 than
7209 a
7210 red
7211 black
7212 tree
7213 though
7214 as
7215 it
7216 allows
7217 ambiguity
7218 in
7219 a
7220 red
7221 black
7222 tree
7223 conversion—multiple
7224 red
7225 black
7226 trees
7227 can
7228 be
7229 produced
7230 from
7231 an
7232 equivalent
7233 B
7234 tree
7235 of
7236 order
7237 4
7238 If
7239 a
7240 B
7241 tree
7242 cluster
7243 contains
7244 only
7245 1
7246 value
7247 it
7248 is
7249 the
7250 minimum
7251 black
7252 and
7253 has
7254 two
7255 child
7256 pointers
7257 If
7258 a
7259 cluster
7260 contains
7261 3
7262 values
7263 then
7264 the
7265 central
7266 value
7267 will
7268 be
7269 black
7270 and
7271 each
7272 value
7273 stored
7274 on
7275 its
7276 sides
7277 will
7278 be
7279 red
7280 If
7281 the
7282 cluster
7283 contains
7284 two
7285 values
7286 however
7287 either
7288 one
7289 can
7290 become
7291 the
7292 black
7293 node
7294 in
7295 the
7296 red
7297 black
7298 tree
7299 and
7300 the
7301 other
7302 one
7303 will
7304 be
7305 red
7306 So
7307 the
7308 order
7309 4
7310 B
7311 tree
7312 does
7313 not
7314 maintain
7315 which
7316 of
7317 the
7318 values
7319 contained
7320 in
7321 each
7322 cluster
7323 is
7324 the
7325 root
7326 black
7327 tree
7328 for
7329 the
7330 whole
7331 cluster
7332 and
7333 the
7334 parent
7335 of
7336 the
7337 other
7338 values
7339 in
7340 the
7341 same
7342 cluster
7343 Despite
7344 this
7345 the
7346 operations
7347 on
7348 red
7349 black
7350 trees
7351 are
7352 more
7353 economical
7354 in
7355 time
7356 because
7357 you
7358 don
7359 t
7360 have
7361 to
7362 maintain
7363 the
7364 vector
7365 of
7366 values
7367 It
7368 may
7369 be
7370 costly
7371 if
7372 values
7373 are
7374 stored
7375 directly
7376 in
7377 each
7378 node
7379 rather
7380 than
7381 being
7382 stored
7383 by
7384 reference
7385 B
7386 tree
7387 nodes
7388 however
7389 are
7390 more
7391 economical
7392 in
7393 space
7394 because
7395 you
7396 don
7397 t
7398 need
7399 to
7400 store
7401 the
7402 color
7403 attribute
7404 for
7405 each
7406 node
7407 Instead
7408 you
7409 have
7410 to
7411 know
7412 which
7413 slot
7414 in
7415 the
7416 cluster
7417 vector
7418 is
7419 used
7420 If
7421 values
7422 are
7423 stored
7424 by
7425 reference
7426 e
7427 g
7428 objects
7429 null
7430 references
7431 can
7432 be
7433 used
7434 and
7435 so
7436 the
7437 cluster
7438 can
7439 be
7440 represented
7441 by
7442 a
7443 vector
7444 containing
7445 3
7446 slots
7447 for
7448 value
7449 pointers
7450 plus
7451 4
7452 slots
7453 for
7454 child
7455 references
7456 in
7457 the
7458 tree
7459 In
7460 that
7461 case
7462 the
7463 B
7464 tree
7465 can
7466 be
7467 more
7468 compact
7469 in
7470 memory
7471 improving
7472 data
7473 locality
7474 The
7475 same
7476 analogy
7477 can
7478 be
7479 made
7480 with
7481 B
7482 trees
7483 with
7484 larger
7485 orders
7486 that
7487 can
7488 be
7489 structurally
7490 equivalent
7491 to
7492 a
7493 colored
7494 binary
7495 tree
7496 you
7497 just
7498 need
7499 more
7500 colors
7501 Suppose
7502 that
7503 you
7504 add
7505 blue
7506 then
7507 the
7508 blue
7509 red
7510 black
7511 tree
7512 defined
7513 like
7514 red
7515 black
7516 trees
7517 but
7518 with
7519 the
7520 additional
7521 constraint
7522 that
7523 no
7524 two
7525 successive
7526 nodes
7527 in
7528 the
7529 hierarchy
7530 will
7531 be
7532 blue
7533 and
7534 all
7535 blue
7536 nodes
7537 will
7538 be
7539 children
7540 of
7541 a
7542 red
7543 node
7544 then
7545 it
7546 becomes
7547 equivalent
7548 to
7549 a
7550 B
7551 tree
7552 whose
7553 clusters
7554 will
7555 have
7556 at
7557 most
7558 7
7559 values
7560 in
7561 the
7562 following
7563 colors
7564 blue
7565 red
7566 blue
7567 black
7568 blue
7569 red
7570 blue
7571 For
7572 each
7573 cluster
7574 there
7575 will
7576 be
7577 at
7578 most
7579 1
7580 black
7581 node
7582 2
7583 red
7584 nodes
7585 and
7586 4
7587 blue
7588 nodes
7589 For
7590 moderate
7591 volumes
7592 of
7593 values
7594 insertions
7595 and
7596 deletions
7597 in
7598 a
7599 colored
7600 binary
7601 tree
7602 are
7603 faster
7604 compared
7605 to
7606 B
7607 trees
7608 because
7609 colored
7610 trees
7611 don
7612 t
7613 attempt
7614 to
7615 maximize
7616 the
7617 fill
7618 factor
7619 of
7620 each
7621 horizontal
7622 cluster
7623 of
7624 nodes
7625 only
7626 the
7627 minimum
7628 fill
7629 factor
7630 is
7631 guaranteed
7632 in
7633 colored
7634 binary
7635 trees
7636 limiting
7637 the
7638 number
7639 of
7640 splits
7641 or
7642 junctions
7643 of
7644 clusters
7645 B
7646 trees
7647 will
7648 be
7649 faster
7650 for
7651 performing
7652 rotations
7653 because
7654 rotations
7655 will
7656 frequently
7657 occur
7658 within
7659 the
7660 same
7661 cluster
7662 rather
7663 than
7664 with
7665 multiple
7666 separate
7667 nodes
7668 in
7669 a
7670 colored
7671 binary
7672 tree
7673 However
7674 for
7675 storing
7676 large
7677 volumes
7678 B
7679 trees
7680 will
7681 be
7682 much
7683 faster
7684 as
7685 they
7686 will
7687 be
7688 more
7689 compact
7690 by
7691 grouping
7692 several
7693 children
7694 in
7695 the
7696 same
7697 cluster
7698 where
7699 they
7700 can
7701 be
7702 accessed
7703 locally
7704 All
7705 optimizations
7706 possible
7707 in
7708 B
7709 trees
7710 to
7711 increase
7712 the
7713 average
7714 fill
7715 factors
7716 of
7717 clusters
7718 are
7719 possible
7720 in
7721 the
7722 equivalent
7723 multicolored
7724 binary
7725 tree
7726 Notably
7727 maximizing
7728 the
7729 average
7730 fill
7731 factor
7732 in
7733 a
7734 structurally
7735 equivalent
7736 B
7737 tree
7738 is
7739 the
7740 same
7741 as
7742 reducing
7743 the
7744 total
7745 height
7746 of
7747 the
7748 multicolored
7749 tree
7750 by
7751 increasing
7752 the
7753 number
7754 of
7755 non
7756 black
7757 nodes
7758 The
7759 worst
7760 case
7761 occurs
7762 when
7763 all
7764 nodes
7765 in
7766 a
7767 colored
7768 binary
7769 tree
7770 are
7771 black
7772 the
7773 best
7774 case
7775 occurs
7776 when
7777 only
7778 a
7779 third
7780 of
7781 them
7782 are
7783 black
7784 and
7785 the
7786 other
7787 two
7788 thirds
7789 are
7790 red
7791 nodes
7792 Notes
7793 Jump
7794 up
7795 Using
7796 Knuth
7797 s
7798 definition
7799 of
7800 order
7801 the
7802 maximum
7803 number
7804 of
7805 children
7806 Applications
7807 and
7808 related
7809 data
7810 structures
7811 Red
7812 black
7813 trees
7814 offer
7815 worst
7816 case
7817 guarantees
7818 for
7819 insertion
7820 time
7821 deletion
7822 time
7823 and
7824 search
7825 time
7826 Not
7827 only
7828 does
7829 this
7830 make
7831 them
7832 valuable
7833 in
7834 time
7835 sensitive
7836 applications
7837 such
7838 as
7839 real
7840 time
7841 applications
7842 but
7843 it
7844 makes
7845 them
7846 valuable
7847 building
7848 blocks
7849 in
7850 other
7851 data
7852 structures
7853 which
7854 provide
7855 worst
7856 case
7857 guarantees
7858 for
7859 example
7860 many
7861 data
7862 structures
7863 used
7864 in
7865 computational
7866 geometry
7867 can
7868 be
7869 based
7870 on
7871 red
7872 black
7873 trees
7874 and
7875 the
7876 Completely
7877 Fair
7878 Scheduler
7879 used
7880 in
7881 current
7882 Linux
7883 kernels
7884 uses
7885 red
7886 black
7887 trees
7888 The
7889 AVL
7890 tree
7891 is
7892 another
7893 structure
7894 supporting
7895 O
7896 log
7897 n
7898 search
7899 insertion
7900 and
7901 removal
7902 It
7903 is
7904 more
7905 rigidly
7906 balanced
7907 than
7908 red
7909 black
7910 trees
7911 leading
7912 to
7913 slower
7914 insertion
7915 and
7916 removal
7917 but
7918 faster
7919 retrieval
7920 This
7921 makes
7922 it
7923 attractive
7924 for
7925 data
7926 structures
7927 that
7928 may
7929 be
7930 built
7931 once
7932 and
7933 loaded
7934 without
7935 reconstruction
7936 such
7937 as
7938 language
7939 dictionaries
7940 or
7941 program
7942 dictionaries
7943 such
7944 as
7945 the
7946 opcodes
7947 of
7948 an
7949 assembler
7950 or
7951 interpreter
7952 Red
7953 black
7954 trees
7955 are
7956 also
7957 particularly
7958 valuable
7959 in
7960 functional
7961 programming
7962 where
7963 they
7964 are
7965 one
7966 of
7967 the
7968 most
7969 common
7970 persistent
7971 data
7972 structures
7973 used
7974 to
7975 construct
7976 associative
7977 arrays
7978 and
7979 sets
7980 which
7981 can
7982 retain
7983 previous
7984 versions
7985 after
7986 mutations
7987 The
7988 persistent
7989 version
7990 of
7991 red
7992 black
7993 trees
7994 requires
7995 O
7996 log
7997 n
7998 space
7999 for
8000 each
8001 insertion
8002 or
8003 deletion
8004 in
8005 addition
8006 to
8007 time
8008 For
8009 every
8010 2
8011 4
8012 tree
8013 there
8014 are
8015 corresponding
8016 red
8017 black
8018 trees
8019 with
8020 data
8021 elements
8022 in
8023 the
8024 same
8025 order
8026 The
8027 insertion
8028 and
8029 deletion
8030 operations
8031 on
8032 2
8033 4
8034 trees
8035 are
8036 also
8037 equivalent
8038 to
8039 color
8040 flipping
8041 and
8042 rotations
8043 in
8044 red
8045 black
8046 trees
8047 This
8048 makes
8049 2
8050 4
8051 trees
8052 an
8053 important
8054 tool
8055 for
8056 understanding
8057 the
8058 logic
8059 behind
8060 red
8061 black
8062 trees
8063 and
8064 this
8065 is
8066 why
8067 many
8068 introductory
8069 algorithm
8070 texts
8071 introduce
8072 2
8073 4
8074 trees
8075 just
8076 before
8077 red
8078 black
8079 trees
8080 even
8081 though
8082 2
8083 4
8084 trees
8085 are
8086 not
8087 often
8088 used
8089 in
8090 practice
8091 In
8092 2008
8093 Sedgewick
8094 introduced
8095 a
8096 simpler
8097 version
8098 of
8099 the
8100 red
8101 black
8102 tree
8103 called
8104 the
8105 left
8106 leaning
8107 red
8108 black
8109 tree
8110 6
8111 by
8112 eliminating
8113 a
8114 previously
8115 unspecified
8116 degree
8117 of
8118 freedom
8119 in
8120 the
8121 implementation
8122 The
8123 LLRB
8124 maintains
8125 an
8126 additional
8127 invariant
8128 that
8129 all
8130 red
8131 links
8132 must
8133 lean
8134 left
8135 except
8136 during
8137 inserts
8138 and
8139 deletes
8140 Red
8141 black
8142 trees
8143 can
8144 be
8145 made
8146 isometric
8147 to
8148 either
8149 2
8150 3
8151 trees
8152 7
8153 or
8154 2
8155 4
8156 trees
8157 6
8158 for
8159 any
8160 sequence
8161 of
8162 operations
8163 The
8164 2
8165 4
8166 tree
8167 isometry
8168 was
8169 described
8170 in
8171 1978
8172 by
8173 Sedgewick
8174 this
8175 quote
8176 needs
8177 a
8178 citation
8179 With
8180 2
8181 4
8182 trees
8183 the
8184 isometry
8185 is
8186 resolved
8187 by
8188 a
8189 color
8190 flip
8191 corresponding
8192 to
8193 a
8194 split
8195 in
8196 which
8197 the
8198 red
8199 color
8200 of
8201 two
8202 children
8203 nodes
8204 leaves
8205 the
8206 children
8207 and
8208 moves
8209 to
8210 the
8211 parent
8212 node
8213 The
8214 tango
8215 tree
8216 a
8217 type
8218 of
8219 tree
8220 optimized
8221 for
8222 fast
8223 searches
8224 usually
8225 when
8226 uses
8227 red
8228 black
8229 trees
8230 as
8231 part
8232 of
8233 its
8234 data
8235 structure
8236 Operations
8237 Read
8238 only
8239 operations
8240 on
8241 a
8242 red
8243 black
8244 tree
8245 require
8246 no
8247 modification
8248 from
8249 those
8250 used
8251 for
8252 binary
8253 search
8254 trees
8255 because
8256 every
8257 red
8258 black
8259 tree
8260 is
8261 a
8262 special
8263 case
8264 of
8265 a
8266 simple
8267 binary
8268 search
8269 tree
8270 However
8271 the
8272 immediate
8273 result
8274 of
8275 an
8276 insertion
8277 or
8278 removal
8279 may
8280 violate
8281 the
8282 properties
8283 of
8284 a
8285 red
8286 black
8287 tree
8288 Restoring
8289 the
8290 red
8291 black
8292 properties
8293 requires
8294 a
8295 small
8296 number
8297 O
8298 log
8299 n
8300 or
8301 amortized
8302 O
8303 1
8304 of
8305 color
8306 changes
8307 which
8308 are
8309 very
8310 quick
8311 in
8312 practice
8313 and
8314 no
8315 more
8316 than
8317 three
8318 tree
8319 rotations
8320 two
8321 for
8322 insertion
8323 Although
8324 insert
8325 and
8326 delete
8327 operations
8328 are
8329 complicated
8330 their
8331 times
8332 remain
8333 O
8334 log
8335 n
8336 Insertion
8337 Insertion
8338 begins
8339 by
8340 adding
8341 the
8342 node
8343 as
8344 any
8345 binary
8346 search
8347 tree
8348 insertion
8349 does
8350 and
8351 by
8352 coloring
8353 it
8354 red
8355 Whereas
8356 in
8357 the
8358 binary
8359 search
8360 tree
8361 we
8362 always
8363 add
8364 a
8365 leaf
8366 in
8367 the
8368 red
8369 black
8370 tree
8371 leaves
8372 contain
8373 no
8374 information
8375 so
8376 instead
8377 we
8378 add
8379 a
8380 red
8381 interior
8382 node
8383 with
8384 two
8385 black
8386 leaves
8387 in
8388 place
8389 of
8390 an
8391 existing
8392 black
8393 leaf
8394 What
8395 happens
8396 next
8397 depends
8398 on
8399 the
8400 color
8401 of
8402 other
8403 nearby
8404 nodes
8405 The
8406 term
8407 uncle
8408 node
8409 will
8410 be
8411 used
8412 to
8413 refer
8414 to
8415 the
8416 sibling
8417 of
8418 a
8419 node
8420 s
8421 parent
8422 as
8423 in
8424 human
8425 family
8426 trees
8427 Note
8428 that
8429 property
8430 3
8431 all
8432 leaves
8433 are
8434 black
8435 always
8436 holds
8437 property
8438 4
8439 both
8440 children
8441 of
8442 every
8443 red
8444 node
8445 are
8446 black
8447 is
8448 threatened
8449 only
8450 by
8451 adding
8452 a
8453 red
8454 node
8455 repainting
8456 a
8457 black
8458 node
8459 red
8460 or
8461 a
8462 rotation
8463 property
8464 5
8465 all
8466 paths
8467 from
8468 any
8469 given
8470 node
8471 to
8472 its
8473 leaf
8474 nodes
8475 contain
8476 the
8477 same
8478 number
8479 of
8480 black
8481 nodes
8482 is
8483 threatened
8484 only
8485 by
8486 adding
8487 a
8488 black
8489 node
8490 repainting
8491 a
8492 red
8493 node
8494 black
8495 or
8496 vice
8497 versa
8498 or
8499 a
8500 rotation
8501 Note
8502 The
8503 label
8504 N
8505 will
8506 be
8507 used
8508 to
8509 denote
8510 the
8511 current
8512 node
8513 colored
8514 red
8515 At
8516 the
8517 beginning
8518 this
8519 is
8520 the
8521 new
8522 node
8523 being
8524 inserted
8525 but
8526 the
8527 entire
8528 procedure
8529 may
8530 also
8531 be
8532 applied
8533 recursively
8534 to
8535 other
8536 nodes
8537 see
8538 case
8539 3
8540 P
8541 will
8542 denote
8543 N
8544 s
8545 parent
8546 node
8547 G
8548 will
8549 denote
8550 N
8551 s
8552 grandparent
8553 and
8554 U
8555 will
8556 denote
8557 N
8558 s
8559 uncle
8560 Note
8561 that
8562 in
8563 between
8564 some
8565 cases
8566 the
8567 roles
8568 and
8569 labels
8570 of
8571 the
8572 nodes
8573 are
8574 exchanged
8575 but
8576 in
8577 each
8578 case
8579 every
8580 label
8581 continues
8582 to
8583 represent
8584 the
8585 same
8586 node
8587 it
8588 represented
8589 at
8590 the
8591 beginning
8592 of
8593 the
8594 case
8595 Any
8596 color
8597 shown
8598 in
8599 the
8600 diagram
8601 is
8602 either
8603 assumed
8604 in
8605 its
8606 case
8607 or
8608 implied
8609 by
8610 those
8611 assumptions
8612 A
8613 numbered
8614 triangle
8615 represents
8616 a
8617 subtree
8618 of
8619 unspecified
8620 depth
8621 A
8622 black
8623 circle
8624 atop
8625 the
8626 triangle
8627 designates
8628 a
8629 black
8630 root
8631 node
8632 otherwise
8633 the
8634 root
8635 node
8636 s
8637 color
8638 is
8639 unspecified
8640 Each
8641 case
8642 will
8643 be
8644 demonstrated
8645 with
8646 example
8647 C
8648 code
8649 The
8650 uncle
8651 and
8652 grandparent
8653 nodes
8654 can
8655 be
8656 found
8657 by
8658 these
8659 functions
8660 In
8661 a
8662 regular
8663 binary
8664 search
8665 tree
8666 when
8667 deleting
8668 a
8669 node
8670 with
8671 two
8672 non
8673 leaf
8674 children
8675 we
8676 find
8677 either
8678 the
8679 maximum
8680 element
8681 in
8682 its
8683 left
8684 subtree
8685 which
8686 is
8687 the
8688 in
8689 order
8690 predecessor
8691 or
8692 the
8693 minimum
8694 element
8695 in
8696 its
8697 right
8698 subtree
8699 which
8700 is
8701 the
8702 in
8703 order
8704 successor
8705 and
8706 move
8707 its
8708 value
8709 into
8710 the
8711 node
8712 being
8713 deleted
8714 as
8715 shown
8716 here
8717 We
8718 then
8719 delete
8720 the
8721 node
8722 we
8723 copied
8724 the
8725 value
8726 from
8727 which
8728 must
8729 have
8730 fewer
8731 than
8732 two
8733 non
8734 leaf
8735 children
8736 Non
8737 leaf
8738 children
8739 rather
8740 than
8741 all
8742 children
8743 are
8744 specified
8745 here
8746 because
8747 unlike
8748 normal
8749 binary
8750 search
8751 trees
8752 red
8753 black
8754 trees
8755 can
8756 have
8757 leaf
8758 nodes
8759 anywhere
8760 so
8761 that
8762 all
8763 nodes
8764 are
8765 either
8766 internal
8767 nodes
8768 with
8769 two
8770 children
8771 or
8772 leaf
8773 nodes
8774 with
8775 by
8776 definition
8777 zero
8778 children
8779 In
8780 effect
8781 internal
8782 nodes
8783 having
8784 two
8785 leaf
8786 children
8787 in
8788 a
8789 red
8790 black
8791 tree
8792 are
8793 like
8794 the
8795 leaf
8796 nodes
8797 in
8798 a
8799 regular
8800 binary
8801 search
8802 tree
8803 Because
8804 merely
8805 copying
8806 a
8807 value
8808 does
8809 not
8810 violate
8811 any
8812 red
8813 black
8814 properties
8815 this
8816 reduces
8817 to
8818 the
8819 problem
8820 of
8821 deleting
8822 a
8823 node
8824 with
8825 at
8826 most
8827 one
8828 non
8829 leaf
8830 child
8831 Once
8832 we
8833 have
8834 solved
8835 that
8836 problem
8837 the
8838 solution
8839 applies
8840 equally
8841 to
8842 the
8843 case
8844 where
8845 the
8846 node
8847 we
8848 originally
8849 want
8850 to
8851 delete
8852 has
8853 at
8854 most
8855 one
8856 non
8857 leaf
8858 child
8859 as
8860 to
8861 the
8862 case
8863 just
8864 considered
8865 where
8866 it
8867 has
8868 two
8869 non
8870 leaf
8871 children
8872 Therefore
8873 for
8874 the
8875 remainder
8876 of
8877 this
8878 discussion
8879 we
8880 address
8881 the
8882 deletion
8883 of
8884 a
8885 node
8886 with
8887 at
8888 most
8889 one
8890 non
8891 leaf
8892 child
8893 We
8894 use
8895 the
8896 label
8897 M
8898 to
8899 denote
8900 the
8901 node
8902 to
8903 be
8904 deleted
8905 C
8906 will
8907 denote
8908 a
8909 selected
8910 child
8911 of
8912 M
8913 which
8914 we
8915 will
8916 also
8917 call
8918 its
8919 child
8920 If
8921 M
8922 does
8923 have
8924 a
8925 non
8926 leaf
8927 child
8928 call
8929 that
8930 its
8931 child
8932 C
8933 otherwise
8934 choose
8935 either
8936 leaf
8937 as
8938 its
8939 child
8940 C
8941 If
8942 M
8943 is
8944 a
8945 red
8946 node
8947 we
8948 simply
8949 replace
8950 it
8951 with
8952 its
8953 child
8954 C
8955 which
8956 must
8957 be
8958 black
8959 by
8960 property
8961 4
8962 This
8963 can
8964 only
8965 occur
8966 when
8967 M
8968 has
8969 two
8970 leaf
8971 children
8972 because
8973 if
8974 the
8975 red
8976 node
8977 M
8978 had
8979 a
8980 black
8981 non
8982 leaf
8983 child
8984 on
8985 one
8986 side
8987 but
8988 just
8989 a
8990 leaf
8991 child
8992 on
8993 the
8994 other
8995 side
8996 then
8997 the
8998 count
8999 of
9000 black
9001 nodes
9002 on
9003 both
9004 sides
9005 would
9006 be
9007 different
9008 thus
9009 the
9010 tree
9011 would
9012 violate
9013 property
9014 5
9015 All
9016 paths
9017 through
9018 the
9019 deleted
9020 node
9021 will
9022 simply
9023 pass
9024 through
9025 one
9026 fewer
9027 red
9028 node
9029 and
9030 both
9031 the
9032 deleted
9033 node
9034 s
9035 parent
9036 and
9037 child
9038 must
9039 be
9040 black
9041 so
9042 property
9043 3
9044 all
9045 leaves
9046 are
9047 black
9048 and
9049 property
9050 4
9051 both
9052 children
9053 of
9054 every
9055 red
9056 node
9057 are
9058 black
9059 still
9060 hold
9061 Another
9062 simple
9063 case
9064 is
9065 when
9066 M
9067 is
9068 black
9069 and
9070 C
9071 is
9072 red
9073 Simply
9074 removing
9075 a
9076 black
9077 node
9078 could
9079 break
9080 Properties
9081 4
9082 Both
9083 children
9084 of
9085 every
9086 red
9087 node
9088 are
9089 black
9090 and
9091 5
9092 All
9093 paths
9094 from
9095 any
9096 given
9097 node
9098 to
9099 its
9100 leaf
9101 nodes
9102 contain
9103 the
9104 same
9105 number
9106 of
9107 black
9108 nodes
9109 but
9110 if
9111 we
9112 repaint
9113 C
9114 black
9115 both
9116 of
9117 these
9118 properties
9119 are
9120 preserved
9121 The
9122 complex
9123 case
9124 is
9125 when
9126 both
9127 M
9128 and
9129 C
9130 are
9131 black
9132 This
9133 can
9134 only
9135 occur
9136 when
9137 deleting
9138 a
9139 black
9140 node
9141 which
9142 has
9143 two
9144 leaf
9145 children
9146 because
9147 if
9148 the
9149 black
9150 node
9151 M
9152 had
9153 a
9154 black
9155 non
9156 leaf
9157 child
9158 on
9159 one
9160 side
9161 but
9162 just
9163 a
9164 leaf
9165 child
9166 on
9167 the
9168 other
9169 side
9170 then
9171 the
9172 count
9173 of
9174 black
9175 nodes
9176 on
9177 both
9178 sides
9179 would
9180 be
9181 different
9182 thus
9183 the
9184 tree
9185 would
9186 have
9187 been
9188 an
9189 invalid
9190 red
9191 black
9192 tree
9193 by
9194 violation
9195 of
9196 property
9197 5
9198 We
9199 begin
9200 by
9201 replacing
9202 M
9203 with
9204 its
9205 child
9206 C
9207 We
9208 will
9209 call
9210 or
9211 is
9212 relabel
9213 this
9214 child
9215 in
9216 its
9217 new
9218 position
9219 N
9220 and
9221 its
9222 sibling
9223 its
9224 new
9225 parent
9226 s
9227 other
9228 child
9229 S
9230 S
9231 was
9232 previously
9233 the
9234 sibling
9235 of
9236 M
9237 In
9238 the
9239 diagrams
9240 below
9241 we
9242 will
9243 also
9244 use
9245 P
9246 for
9247 N
9248 s
9249 new
9250 parent
9251 M
9252 s
9253 old
9254 parent
9255 SL
9256 for
9257 S
9258 s
9259 left
9260 child
9261 and
9262 SR
9263 for
9264 S
9265 s
9266 right
9267 child
9268 S
9269 cannot
9270 be
9271 a
9272 leaf
9273 because
9274 if
9275 M
9276 and
9277 C
9278 were
9279 black
9280 then
9281 P
9282 s
9283 one
9284 subtree
9285 which
9286 included
9287 M
9288 counted
9289 two
9290 black
9291 height
9292 and
9293 thus
9294 P
9295 s
9296 other
9297 subtree
9298 which
9299 includes
9300 S
9301 must
9302 also
9303 count
9304 two
9305 black
9306 height
9307 which
9308 cannot
9309 be
9310 the
9311 case
9312 if
9313 S
9314 is
9315 a
9316 leaf
9317 node
9318 Note
9319 In
9320 between
9321 some
9322 cases
9323 we
9324 exchange
9325 the
9326 roles
9327 and
9328 labels
9329 of
9330 the
9331 nodes
9332 but
9333 in
9334 each
9335 case
9336 every
9337 label
9338 continues
9339 to
9340 represent
9341 the
9342 same
9343 node
9344 it
9345 represented
9346 at
9347 the
9348 beginning
9349 of
9350 the
9351 case
9352 Any
9353 color
9354 shown
9355 in
9356 the
9357 diagram
9358 is
9359 either
9360 assumed
9361 in
9362 its
9363 case
9364 or
9365 implied
9366 by
9367 those
9368 assumptions
9369 White
9370 represents
9371 an
9372 unknown
9373 color
9374 either
9375 red
9376 or
9377 black
9378 We
9379 will
9380 find
9381 the
9382 sibling
9383 using
9384 this
9385 function
9386 Hash
9387 table
9388 Not
9389 to
9390 be
9391 confused
9392 with
9393 Hash
9394 list
9395 or
9396 Hash
9397 tree
9398 Hash
9399 table
9400 Type
9401 Unordered
9402 associative
9403 array
9404 Invented
9405 1953
9406 A
9407 small
9408 phone
9409 book
9410 as
9411 a
9412 hash
9413 table
9414 In
9415 computing
9416 a
9417 hash
9418 table
9419 hash
9420 map
9421 is
9422 a
9423 data
9424 structure
9425 used
9426 to
9427 implement
9428 an
9429 associative
9430 array
9431 a
9432 structure
9433 that
9434 can
9435 map
9436 keys
9437 to
9438 values
9439 A
9440 hash
9441 table
9442 uses
9443 a
9444 hash
9445 function
9446 to
9447 compute
9448 an
9449 index
9450 into
9451 an
9452 array
9453 of
9454 buckets
9455 or
9456 slots
9457 from
9458 which
9459 the
9460 correct
9461 value
9462 can
9463 be
9464 found
9465 Ideally
9466 the
9467 hash
9468 function
9469 will
9470 assign
9471 each
9472 key
9473 to
9474 a
9475 unique
9476 bucket
9477 but
9478 this
9479 situation
9480 is
9481 rarely
9482 achievable
9483 in
9484 practice
9485 usually
9486 some
9487 keys
9488 will
9489 hash
9490 to
9491 the
9492 same
9493 bucket
9494 Instead
9495 most
9496 hash
9497 table
9498 designs
9499 assume
9500 that
9501 hash
9502 collisions
9503 different
9504 keys
9505 that
9506 are
9507 assigned
9508 by
9509 the
9510 hash
9511 function
9512 to
9513 the
9514 same
9515 bucket
9516 will
9517 occur
9518 and
9519 must
9520 be
9521 accommodated
9522 in
9523 some
9524 way
9525 In
9526 a
9527 well
9528 dimensioned
9529 hash
9530 table
9531 the
9532 average
9533 cost
9534 number
9535 of
9536 instructions
9537 for
9538 each
9539 lookup
9540 is
9541 independent
9542 of
9543 the
9544 number
9545 of
9546 elements
9547 stored
9548 in
9549 the
9550 table
9551 Many
9552 hash
9553 table
9554 designs
9555 also
9556 allow
9557 arbitrary
9558 insertions
9559 and
9560 deletions
9561 of
9562 key
9563 value
9564 pairs
9565 at
9566 amortized2
9567 constant
9568 average
9569 cost
9570 per
9571 operation34
9572 In
9573 many
9574 situations
9575 hash
9576 tables
9577 turn
9578 out
9579 to
9580 be
9581 more
9582 efficient
9583 than
9584 search
9585 trees
9586 or
9587 any
9588 other
9589 table
9590 lookup
9591 structure
9592 For
9593 this
9594 reason
9595 they
9596 are
9597 widely
9598 used
9599 in
9600 many
9601 kinds
9602 of
9603 computer
9604 software
9605 particularly
9606 for
9607 associative
9608 arrays
9609 database
9610 indexing
9611 caches
9612 and
9613 sets
9614 Hash
9615 function
9616 The
9617 idea
9618 of
9619 hashing
9620 is
9621 to
9622 distribute
9623 the
9624 entries
9625 key
9626 value
9627 pairs
9628 across
9629 an
9630 array
9631 of
9632 buckets
9633 Given
9634 a
9635 key
9636 the
9637 algorithm
9638 computes
9639 an
9640 index
9641 that
9642 suggests
9643 where
9644 the
9645 entry
9646 can
9647 be
9648 found
9649 index
9650 fkey
9651 array
9652 size
9653 Often
9654 this
9655 is
9656 done
9657 in
9658 two
9659 steps
9660 hash
9661 hashfunckey
9662 index
9663 hash
9664 array
9665 size
9666 In
9667 this
9668 method
9669 the
9670 hash
9671 is
9672 independent
9673 of
9674 the
9675 array
9676 size
9677 and
9678 it
9679 is
9680 then
9681 reduced
9682 to
9683 an
9684 index
9685 a
9686 number
9687 between
9688 0
9689 and
9690 array
9691 size
9692 1
9693 using
9694 the
9695 modulo
9696 operator
9697 In
9698 the
9699 case
9700 that
9701 the
9702 array
9703 size
9704 is
9705 a
9706 power
9707 of
9708 two
9709 the
9710 remainder
9711 operation
9712 is
9713 reduced
9714 to
9715 masking
9716 which
9717 improves
9718 speed
9719 but
9720 can
9721 increase
9722 problems
9723 with
9724 a
9725 poor
9726 hash
9727 function
9728 Choosing
9729 a
9730 good
9731 hash
9732 function
9733 A
9734 good
9735 hash
9736 function
9737 and
9738 implementation
9739 algorithm
9740 are
9741 essential
9742 for
9743 good
9744 hash
9745 table
9746 performance
9747 but
9748 may
9749 be
9750 difficult
9751 to
9752 achieve
9753 A
9754 basic
9755 requirement
9756 is
9757 that
9758 the
9759 function
9760 should
9761 provide
9762 a
9763 uniform
9764 distribution
9765 of
9766 hash
9767 values
9768 A
9769 non
9770 uniform
9771 distribution
9772 increases
9773 the
9774 number
9775 of
9776 collisions
9777 and
9778 the
9779 cost
9780 of
9781 resolving
9782 them
9783 Uniformity
9784 is
9785 sometimes
9786 difficult
9787 to
9788 ensure
9789 by
9790 design
9791 but
9792 may
9793 be
9794 evaluated
9795 empirically
9796 using
9797 statistical
9798 tests
9799 eg
9800 a
9801 Pearsons
9802 chi
9803 squared
9804 test
9805 for
9806 discrete
9807 uniform
9808 distributions56
9809 The
9810 distribution
9811 needs
9812 to
9813 be
9814 uniform
9815 only
9816 for
9817 table
9818 sizes
9819 that
9820 occur
9821 in
9822 the
9823 application
9824 In
9825 particular
9826 if
9827 one
9828 uses
9829 dynamic
9830 resizing
9831 with
9832 exact
9833 doubling
9834 and
9835 halving
9836 of
9837 the
9838 table
9839 size
9840 s
9841 then
9842 the
9843 hash
9844 function
9845 needs
9846 to
9847 be
9848 uniform
9849 only
9850 when
9851 s
9852 is
9853 a
9854 power
9855 of
9856 two
9857 On
9858 the
9859 other
9860 hand
9861 some
9862 hashing
9863 algorithms
9864 provide
9865 uniform
9866 hashes
9867 only
9868 when
9869 s
9870 is
9871 a
9872 prime
9873 number7
9874 For
9875 open
9876 addressing
9877 schemes
9878 the
9879 hash
9880 function
9881 should
9882 also
9883 avoid
9884 clustering
9885 the
9886 mapping
9887 of
9888 two
9889 or
9890 more
9891 keys
9892 to
9893 consecutive
9894 slots
9895 Such
9896 clustering
9897 may
9898 cause
9899 the
9900 lookup
9901 cost
9902 to
9903 skyrocket
9904 even
9905 if
9906 the
9907 load
9908 factor
9909 is
9910 low
9911 and
9912 collisions
9913 are
9914 infrequent
9915 The
9916 popular
9917 multiplicative
9918 hash3
9919 is
9920 claimed
9921 to
9922 have
9923 particularly
9924 poor
9925 clustering
9926 behavior7
9927 Cryptographic
9928 hash
9929 functions
9930 are
9931 believed
9932 to
9933 provide
9934 good
9935 hash
9936 functions
9937 for
9938 any
9939 table
9940 size
9941 s
9942 either
9943 by
9944 modulo
9945 reduction
9946 or
9947 by
9948 bit
9949 masking
9950 They
9951 may
9952 also
9953 be
9954 appropriate
9955 if
9956 there
9957 is
9958 a
9959 risk
9960 of
9961 malicious
9962 users
9963 trying
9964 to
9965 sabotage
9966 a
9967 network
9968 service
9969 by
9970 submitting
9971 requests
9972 designed
9973 to
9974 generate
9975 a
9976 large
9977 number
9978 of
9979 collisions
9980 in
9981 the
9982 servers
9983 hash
9984 tables
9985 However
9986 the
9987 risk
9988 of
9989 sabotage
9990 can
9991 also
9992 be
9993 avoided
9994 by
9995 cheaper
9996 methods
9997 such
9998 as
9999 applying
10000 Hash
10001 table
10002 Not
10003 to
10004 be
10005 confused
10006 with
10007 Hash
10008 list
10009 or
10010 Hash
10011 tree
10012 Hash
10013 table
10014 Type
10015 Unordered
10016 associative
10017 array
10018 Invented
10019 1953
10020 A
10021 small
10022 phone
10023 book
10024 as
10025 a
10026 hash
10027 table
10028 In
10029 computing
10030 a
10031 hash
10032 table
10033 hash
10034 map
10035 is
10036 a
10037 data
10038 structure
10039 used
10040 to
10041 implement
10042 an
10043 associative
10044 array
10045 a
10046 structure
10047 that
10048 can
10049 map
10050 keys
10051 to
10052 values
10053 A
10054 hash
10055 table
10056 uses
10057 a
10058 hash
10059 function
10060 to
10061 compute
10062 an
10063 index
10064 into
10065 an
10066 array
10067 of
10068 buckets
10069 or
10070 slots
10071 from
10072 which
10073 the
10074 correct
10075 value
10076 can
10077 be
10078 found
10079 Ideally
10080 the
10081 hash
10082 function
10083 will
10084 assign
10085 each
10086 key
10087 to
10088 a
10089 unique
10090 bucket
10091 but
10092 this
10093 situation
10094 is
10095 rarely
10096 achievable
10097 in
10098 practice
10099 usually
10100 some
10101 keys
10102 will
10103 hash
10104 to
10105 the
10106 same
10107 bucket
10108 Instead
10109 most
10110 hash
10111 table
10112 designs
10113 assume
10114 that
10115 hash
10116 collisions
10117 different
10118 keys
10119 that
10120 are
10121 assigned
10122 by
10123 the
10124 hash
10125 function
10126 to
10127 the
10128 same
10129 bucket
10130 will
10131 occur
10132 and
10133 must
10134 be
10135 accommodated
10136 in
10137 some
10138 way
10139 In
10140 a
10141 well
10142 dimensioned
10143 hash
10144 table
10145 the
10146 average
10147 cost
10148 number
10149 of
10150 instructions
10151 for
10152 each
10153 lookup
10154 is
10155 independent
10156 of
10157 the
10158 number
10159 of
10160 elements
10161 stored
10162 in
10163 the
10164 table
10165 Many
10166 hash
10167 table
10168 designs
10169 also
10170 allow
10171 arbitrary
10172 insertions
10173 and
10174 deletions
10175 of
10176 key
10177 value
10178 pairs
10179 at
10180 amortized2
10181 constant
10182 average
10183 cost
10184 per
10185 operation34
10186 In
10187 many
10188 situations
10189 hash
10190 tables
10191 turn
10192 out
10193 to
10194 be
10195 more
10196 efficient
10197 than
10198 search
10199 trees
10200 or
10201 any
10202 other
10203 table
10204 lookup
10205 structure
10206 For
10207 this
10208 reason
10209 they
10210 are
10211 widely
10212 used
10213 in
10214 many
10215 kinds
10216 of
10217 computer
10218 software
10219 particularly
10220 for
10221 associative
10222 arrays
10223 database
10224 indexing
10225 caches
10226 and
10227 sets
10228 Hash
10229 function
10230 The
10231 idea
10232 of
10233 hashing
10234 is
10235 to
10236 distribute
10237 the
10238 entries
10239 key
10240 value
10241 pairs
10242 across
10243 an
10244 array
10245 of
10246 buckets
10247 Given
10248 a
10249 key
10250 the
10251 algorithm
10252 computes
10253 an
10254 index
10255 that
10256 suggests
10257 where
10258 the
10259 entry
10260 can
10261 be
10262 found
10263 index
10264 fkey
10265 array
10266 size
10267 Often
10268 this
10269 is
10270 done
10271 in
10272 two
10273 steps
10274 hash
10275 hashfunckey
10276 index
10277 hash
10278 array
10279 size
10280 In
10281 this
10282 method
10283 the
10284 hash
10285 is
10286 independent
10287 of
10288 the
10289 array
10290 size
10291 and
10292 it
10293 is
10294 then
10295 reduced
10296 to
10297 an
10298 index
10299 a
10300 number
10301 between
10302 0
10303 and
10304 array
10305 size
10306 1
10307 using
10308 the
10309 modulo
10310 operator
10311 In
10312 the
10313 case
10314 that
10315 the
10316 array
10317 size
10318 is
10319 a
10320 power
10321 of
10322 two
10323 the
10324 remainder
10325 operation
10326 is
10327 reduced
10328 to
10329 masking
10330 which
10331 improves
10332 speed
10333 but
10334 can
10335 increase
10336 problems
10337 with
10338 a
10339 poor
10340 hash
10341 function
10342 Choosing
10343 a
10344 good
10345 hash
10346 function
10347 A
10348 good
10349 hash
10350 function
10351 and
10352 implementation
10353 algorithm
10354 are
10355 essential
10356 for
10357 good
10358 hash
10359 table
10360 performance
10361 but
10362 may
10363 be
10364 difficult
10365 to
10366 achieve
10367 A
10368 basic
10369 requirement
10370 is
10371 that
10372 the
10373 function
10374 should
10375 provide
10376 a
10377 uniform
10378 distribution
10379 of
10380 hash
10381 values
10382 A
10383 non
10384 uniform
10385 distribution
10386 increases
10387 the
10388 number
10389 of
10390 collisions
10391 and
10392 the
10393 cost
10394 of
10395 resolving
10396 them
10397 Uniformity
10398 is
10399 sometimes
10400 difficult
10401 to
10402 ensure
10403 by
10404 design
10405 but
10406 may
10407 be
10408 evaluated
10409 empirically
10410 using
10411 statistical
10412 tests
10413 eg
10414 a
10415 Pearsons
10416 chi
10417 squared
10418 test
10419 for
10420 discrete
10421 uniform
10422 distributions56
10423 The
10424 distribution
10425 needs
10426 to
10427 be
10428 uniform
10429 only
10430 for
10431 table
10432 sizes
10433 that
10434 occur
10435 in
10436 the
10437 application
10438 In
10439 particular
10440 if
10441 one
10442 uses
10443 dynamic
10444 resizing
10445 with
10446 exact
10447 doubling
10448 and
10449 halving
10450 of
10451 the
10452 table
10453 size
10454 s
10455 then
10456 the
10457 hash
10458 function
10459 needs
10460 to
10461 be
10462 uniform
10463 only
10464 when
10465 s
10466 is
10467 a
10468 power
10469 of
10470 two
10471 On
10472 the
10473 other
10474 hand
10475 some
10476 hashing
10477 algorithms
10478 provide
10479 uniform
10480 hashes
10481 only
10482 when
10483 s
10484 is
10485 a
10486 prime
10487 number7
10488 For
10489 open
10490 addressing
10491 schemes
10492 the
10493 hash
10494 function
10495 should
10496 also
10497 avoid
10498 clustering
10499 the
10500 mapping
10501 of
10502 two
10503 or
10504 more
10505 keys
10506 to
10507 consecutive
10508 slots
10509 Such
10510 clustering
10511 may
10512 cause
10513 the
10514 lookup
10515 cost
10516 to
10517 skyrocket
10518 even
10519 if
10520 the
10521 load
10522 factor
10523 is
10524 low
10525 and
10526 collisions
10527 are
10528 infrequent
10529 The
10530 popular
10531 multiplicative
10532 hash3
10533 is
10534 claimed
10535 to
10536 have
10537 particularly
10538 poor
10539 clustering
10540 behavior7
10541 Cryptographic
10542 hash
10543 functions
10544 are
10545 believed
10546 to
10547 provide
10548 good
10549 hash
10550 functions
10551 for
10552 any
10553 table
10554 size
10555 s
10556 either
10557 by
10558 modulo
10559 reduction
10560 or
10561 by
10562 bit
10563 masking
10564 They
10565 may
10566 also
10567 be
10568 appropriate
10569 if
10570 there
10571 is
10572 a
10573 risk
10574 of
10575 malicious
10576 users
10577 trying
10578 to
10579 sabotage
10580 a
10581 network
10582 service
10583 by
10584 submitting
10585 requests
10586 designed
10587 to
10588 generate
10589 a
10590 large
10591 number
10592 of
10593 collisions
10594 in
10595 the
10596 servers
10597 hash
10598 tables
10599 However
10600 the
10601 risk
10602 of
10603 sabotage
10604 can
10605 also
10606 be
10607 avoided
10608 by
10609 cheaper
10610 methods
10611 such
10612 as
10613 applying
10614 a
10615 secret
10616 salt
10617 to
10618 the
10619 data
10620 or
10621 using
10622 a
10623 universal
10624 hash
10625 function
10626 Perfect
10627 hash
10628 function
10629 If
10630 all
10631 keys
10632 are
10633 known
10634 ahead
10635 of
10636 time
10637 a
10638 perfect
10639 hash
10640 function
10641 can
10642 be
10643 used
10644 to
10645 create
10646 a
10647 perfect
10648 hash
10649 table
10650 that
10651 has
10652 no
10653 collisions
10654 If
10655 minimal
10656 perfect
10657 hashing
10658 is
10659 used
10660 every
10661 location
10662 in
10663 the
10664 hash
10665 table
10666 can
10667 be
10668 used
10669 as
10670 well
10671 Perfect
10672 hashing
10673 allows
10674 for
10675 constant
10676 time
10677 lookups
10678 in
10679 the
10680 worst
10681 case
10682 This
10683 is
10684 in
10685 contrast
10686 to
10687 most
10688 chaining
10689 and
10690 open
10691 addressing
10692 methods
10693 where
10694 the
10695 time
10696 for
10697 lookup
10698 is
10699 low
10700 on
10701 average
10702 but
10703 may
10704 be
10705 very
10706 large
10707 proportional
10708 to
10709 the
10710 number
10711 of
10712 entries
10713 for
10714 some
10715 sets
10716 of
10717 keys
10718 Key
10719 statistics
10720 A
10721 critical
10722 statistic
10723 for
10724 a
10725 hash
10726 table
10727 is
10728 called
10729 the
10730 load
10731 factor
10732 This
10733 is
10734 simply
10735 the
10736 number
10737 of
10738 entries
10739 divided
10740 by
10741 the
10742 number
10743 of
10744 buckets
10745 that
10746 is
10747 n
10748 k
10749 where
10750 n
10751 is
10752 the
10753 number
10754 of
10755 entries
10756 and
10757 k
10758 is
10759 the
10760 number
10761 of
10762 buckets
10763 If
10764 the
10765 load
10766 factor
10767 is
10768 kept
10769 reasonable
10770 the
10771 hash
10772 table
10773 should
10774 perform
10775 well
10776 provided
10777 the
10778 hashing
10779 is
10780 good
10781 If
10782 the
10783 load
10784 factor
10785 grows
10786 too
10787 large
10788 the
10789 hash
10790 table
10791 will
10792 become
10793 slow
10794 or
10795 it
10796 may
10797 fail
10798 to
10799 work
10800 depending
10801 on
10802 the
10803 method
10804 used
10805 The
10806 expected
10807 constant
10808 time
10809 property
10810 of
10811 a
10812 hash
10813 table
10814 assumes
10815 that
10816 the
10817 load
10818 factor
10819 is
10820 kept
10821 below
10822 some
10823 bound
10824 For
10825 a
10826 fixed
10827 number
10828 of
10829 buckets
10830 the
10831 time
10832 for
10833 a
10834 lookup
10835 grows
10836 with
10837 the
10838 number
10839 of
10840 entries
10841 and
10842 so
10843 does
10844 not
10845 achieve
10846 the
10847 desired
10848 constant
10849 time
10850 Second
10851 to
10852 that
10853 one
10854 can
10855 examine
10856 the
10857 variance
10858 of
10859 number
10860 of
10861 entries
10862 per
10863 bucket
10864 For
10865 example
10866 two
10867 tables
10868 both
10869 have
10870 1000
10871 entries
10872 and
10873 1000
10874 buckets
10875 one
10876 has
10877 exactly
10878 one
10879 entry
10880 in
10881 each
10882 bucket
10883 the
10884 other
10885 has
10886 all
10887 entries
10888 in
10889 the
10890 same
10891 bucket
10892 Clearly
10893 the
10894 hashing
10895 is
10896 not
10897 working
10898 in
10899 the
10900 second
10901 one
10902 A
10903 low
10904 load
10905 factor
10906 is
10907 not
10908 especially
10909 beneficial
10910 As
10911 the
10912 load
10913 factor
10914 approaches
10915 0
10916 the
10917 proportion
10918 of
10919 unused
10920 areas
10921 in
10922 the
10923 hash
10924 table
10925 increases
10926 but
10927 there
10928 is
10929 not
10930 necessarily
10931 any
10932 reduction
10933 in
10934 search
10935 cost
10936 This
10937 results
10938 in
10939 wasted
10940 memory
10941 Collision
10942 resolution
10943 Hash
10944 collisions
10945 are
10946 practically
10947 unavoidable
10948 when
10949 hashing
10950 a
10951 random
10952 subset
10953 of
10954 a
10955 large
10956 set
10957 of
10958 possible
10959 keys
10960 For
10961 example
10962 if
10963 2
10964 450
10965 keys
10966 are
10967 hashed
10968 into
10969 a
10970 million
10971 buckets
10972 even
10973 with
10974 a
10975 perfectly
10976 uniform
10977 random
10978 distribution
10979 according
10980 to
10981 the
10982 birthday
10983 problem
10984 there
10985 is
10986 approximately
10987 a
10988 95
10989 chance
10990 of
10991 at
10992 least
10993 two
10994 of
10995 the
10996 keys
10997 being
10998 hashed
10999 to
11000 the
11001 same
11002 slot
11003 Therefore
11004 most
11005 hash
11006 table
11007 implementations
11008 have
11009 some
11010 collision
11011 resolution
11012 strategy
11013 to
11014 handle
11015 such
11016 events
11017 Some
11018 common
11019 strategies
11020 are
11021 described
11022 below
11023 All
11024 these
11025 methods
11026 require
11027 that
11028 the
11029 keys
11030 or
11031 pointers
11032 to
11033 them
11034 be
11035 stored
11036 in
11037 the
11038 table
11039 together
11040 with
11041 the
11042 associated
11043 values
11044 Separate
11045 chaining
11046 Hash
11047 collision
11048 resolved
11049 by
11050 separate
11051 chaining
11052 In
11053 the
11054 method
11055 known
11056 as
11057 separate
11058 chaining
11059 each
11060 bucket
11061 is
11062 independent
11063 and
11064 has
11065 some
11066 sort
11067 of
11068 list
11069 of
11070 entries
11071 with
11072 the
11073 same
11074 index
11075 The
11076 time
11077 for
11078 hash
11079 table
11080 operations
11081 is
11082 the
11083 time
11084 to
11085 find
11086 the
11087 bucket
11088 which
11089 is
11090 constant
11091 plus
11092 the
11093 time
11094 for
11095 the
11096 list
11097 operation
11098 The
11099 technique
11100 is
11101 also
11102 called
11103 open
11104 hashing
11105 or
11106 closed
11107 addressing
11108 In
11109 a
11110 good
11111 hash
11112 table
11113 each
11114 bucket
11115 has
11116 zero
11117 or
11118 one
11119 entries
11120 and
11121 sometimes
11122 two
11123 or
11124 three
11125 but
11126 rarely
11127 more
11128 than
11129 that
11130 Therefore
11131 structures
11132 that
11133 are
11134 efficient
11135 in
11136 time
11137 and
11138 space
11139 for
11140 these
11141 cases
11142 are
11143 preferred
11144 Structures
11145 that
11146 are
11147 efficient
11148 for
11149 a
11150 fairly
11151 large
11152 number
11153 of
11154 entries
11155 per
11156 bucket
11157 are
11158 not
11159 needed
11160 or
11161 desirable
11162 If
11163 these
11164 cases
11165 happen
11166 often
11167 the
11168 hashing
11169 is
11170 not
11171 working
11172 well
11173 and
11174 this
11175 needs
11176 to
11177 be
11178 fixed
11179 Separate
11180 chaining
11181 with
11182 linked
11183 lists
11184 Chained
11185 hash
11186 tables
11187 with
11188 linked
11189 lists
11190 are
11191 popular
11192 because
11193 they
11194 require
11195 only
11196 basic
11197 data
11198 structures
11199 with
11200 simple
11201 algorithms
11202 and
11203 can
11204 use
11205 simple
11206 hash
11207 functions
11208 that
11209 are
11210 unsuitable
11211 for
11212 other
11213 methods
11214 The
11215 cost
11216 of
11217 a
11218 table
11219 operation
11220 is
11221 that
11222 of
11223 scanning
11224 the
11225 entries
11226 of
11227 the
11228 selected
11229 bucket
11230 for
11231 the
11232 desired
11233 key
11234 If
11235 the
11236 distribution
11237 of
11238 keys
11239 is
11240 sufficiently
11241 uniform
11242 the
11243 average
11244 cost
11245 of
11246 a
11247 lookup
11248 depends
11249 only
11250 on
11251 the
11252 average
11253 number
11254 of
11255 keys
11256 per
11257 bucket
11258 that
11259 is
11260 on
11261 the
11262 load
11263 factor
11264 Chained
11265 hash
11266 tables
11267 remain
11268 effective
11269 even
11270 when
11271 the
11272 number
11273 of
11274 table
11275 entries
11276 n
11277 is
11278 much
11279 higher
11280 than
11281 the
11282 number
11283 of
11284 slots
11285 Their
11286 performance
11287 degrades
11288 more
11289 gracefully
11290 linearly
11291 with
11292 the
11293 load
11294 factor
11295 For
11296 example
11297 a
11298 chained
11299 hash
11300 table
11301 with
11302 1000
11303 slots
11304 and
11305 10
11306 000
11307 stored
11308 keys
11309 load
11310 factor
11311 10
11312 is
11313 five
11314 to
11315 ten
11316 times
11317 slower
11318 than
11319 a
11320 10
11321 000
11322 slot
11323 table
11324 load
11325 factor
11326 1
11327 but
11328 still
11329 1000
11330 times
11331 faster
11332 than
11333 a
11334 plain
11335 sequential
11336 list
11337 and
11338 possibly
11339 even
11340 faster
11341 than
11342 a
11343 balanced
11344 search
11345 tree
11346 For
11347 separate
11348 chaining
11349 the
11350 worst
11351 case
11352 scenario
11353 is
11354 when
11355 all
11356 entries
11357 are
11358 inserted
11359 into
11360 the
11361 same
11362 bucket
11363 in
11364 which
11365 case
11366 the
11367 hash
11368 table
11369 is
11370 ineffective
11371 and
11372 the
11373 cost
11374 is
11375 that
11376 of
11377 searching
11378 the
11379 bucket
11380 data
11381 structure
11382 If
11383 the
11384 latter
11385 is
11386 a
11387 linear
11388 list
11389 the
11390 lookup
11391 procedure
11392 may
11393 have
11394 to
11395 scan
11396 all
11397 its
11398 entries
11399 so
11400 the
11401 worst
11402 case
11403 cost
11404 is
11405 proportional
11406 to
11407 the
11408 number
11409 n
11410 of
11411 entries
11412 in
11413 the
11414 table
11415 The
11416 bucket
11417 chains
11418 are
11419 often
11420 implemented
11421 as
11422 ordered
11423 lists
11424 sorted
11425 by
11426 the
11427 key
11428 field
11429 this
11430 choice
11431 approximately
11432 halves
11433 the
11434 average
11435 cost
11436 of
11437 unsuccessful
11438 lookups
11439 compared
11440 to
11441 an
11442 unordered
11443 list
11444 However
11445 if
11446 some
11447 keys
11448 are
11449 much
11450 more
11451 likely
11452 to
11453 come
11454 up
11455 than
11456 others
11457 an
11458 unordered
11459 list
11460 with
11461 move
11462 to
11463 front
11464 heuristic
11465 may
11466 be
11467 more
11468 effective
11469 More
11470 sophisticated
11471 data
11472 structures
11473 such
11474 as
11475 balanced
11476 search
11477 trees
11478 are
11479 worth
11480 considering
11481 only
11482 if
11483 the
11484 load
11485 factor
11486 is
11487 large
11488 about
11489 10
11490 or
11491 more
11492 or
11493 if
11494 the
11495 hash
11496 distribution
11497 is
11498 likely
11499 to
11500 be
11501 very
11502 non
11503 uniform
11504 or
11505 if
11506 one
11507 must
11508 guarantee
11509 good
11510 performance
11511 even
11512 in
11513 a
11514 worst
11515 case
11516 scenario
11517 However
11518 using
11519 a
11520 larger
11521 table
11522 and
11523 or
11524 a
11525 better
11526 hash
11527 function
11528 may
11529 be
11530 even
11531 more
11532 effective
11533 in
11534 those
11535 cases
11536 Chained
11537 hash
11538 tables
11539 also
11540 inherit
11541 the
11542 disadvantages
11543 of
11544 linked
11545 lists
11546 When
11547 storing
11548 small
11549 keys
11550 and
11551 values
11552 the
11553 space
11554 overhead
11555 of
11556 the
11557 next
11558 pointer
11559 in
11560 each
11561 entry
11562 record
11563 can
11564 be
11565 significant
11566 An
11567 additional
11568 disadvantage
11569 is
11570 that
11571 traversing
11572 a
11573 linked
11574 list
11575 has
11576 poor
11577 cache
11578 performance
11579 making
11580 the
11581 processor
11582 cache
11583 ineffective
11584 Separate
11585 chaining
11586 with
11587 list
11588 head
11589 cells
11590 Hash
11591 collision
11592 by
11593 separate
11594 chaining
11595 with
11596 head
11597 records
11598 in
11599 the
11600 bucket
11601 array
11602 Some
11603 chaining
11604 implementations
11605 store
11606 the
11607 first
11608 record
11609 of
11610 each
11611 chain
11612 in
11613 the
11614 slot
11615 array
11616 itself4
11617 The
11618 number
11619 of
11620 pointer
11621 traversals
11622 is
11623 decreased
11624 by
11625 one
11626 for
11627 most
11628 cases
11629 The
11630 purpose
11631 is
11632 to
11633 increase
11634 cache
11635 efficiency
11636 of
11637 hash
11638 table
11639 access
11640 The
11641 disadvantage
11642 is
11643 that
11644 an
11645 empty
11646 bucket
11647 takes
11648 the
11649 same
11650 space
11651 as
11652 a
11653 bucket
11654 with
11655 one
11656 entry
11657 To
11658 save
11659 space
11660 such
11661 hash
11662 tables
11663 often
11664 have
11665 about
11666 as
11667 many
11668 slots
11669 as
11670 stored
11671 entries
11672 meaning
11673 that
11674 many
11675 slots
11676 have
11677 two
11678 or
11679 more
11680 entries
11681 Separate
11682 chaining
11683 with
11684 other
11685 structures
11686 Instead
11687 of
11688 a
11689 list
11690 one
11691 can
11692 use
11693 any
11694 other
11695 data
11696 structure
11697 that
11698 supports
11699 the
11700 required
11701 operations
11702 For
11703 example
11704 by
11705 using
11706 a
11707 self
11708 balancing
11709 tree
11710 the
11711 theoretical
11712 worst
11713 case
11714 time
11715 of
11716 common
11717 hash
11718 table
11719 operations
11720 insertion
11721 deletion
11722 lookup
11723 can
11724 be
11725 brought
11726 down
11727 to
11728 Olog
11729 n
11730 rather
11731 than
11732 On
11733 However
11734 this
11735 approach
11736 is
11737 only
11738 worth
11739 the
11740 trouble
11741 and
11742 extra
11743 memory
11744 cost
11745 if
11746 long
11747 delays
11748 must
11749 be
11750 avoided
11751 at
11752 all
11753 costs
11754 eg
11755 in
11756 a
11757 real
11758 time
11759 application
11760 or
11761 if
11762 one
11763 must
11764 guard
11765 against
11766 many
11767 entries
11768 hashed
11769 to
11770 the
11771 same
11772 slot
11773 eg
11774 if
11775 one
11776 expects
11777 extremely
11778 non
11779 uniform
11780 distributions
11781 or
11782 in
11783 the
11784 case
11785 of
11786 web
11787 sites
11788 or
11789 other
11790 publicly
11791 accessible
11792 services
11793 which
11794 are
11795 vulnerable
11796 to
11797 malicious
11798 key
11799 distributions
11800 in
11801 requests
11802 The
11803 variant
11804 called
11805 array
11806 hash
11807 table
11808 uses
11809 a
11810 dynamic
11811 array
11812 to
11813 store
11814 all
11815 the
11816 entries
11817 that
11818 hash
11819 to
11820 the
11821 same
11822 slot8910
11823 Each
11824 newly
11825 inserted
11826 entry
11827 gets
11828 appended
11829 to
11830 the
11831 end
11832 of
11833 the
11834 dynamic
11835 array
11836 that
11837 is
11838 assigned
11839 to
11840 the
11841 slot
11842 The
11843 dynamic
11844 array
11845 is
11846 resized
11847 in
11848 an
11849 exact
11850 fit
11851 manner
11852 meaning
11853 it
11854 is
11855 grown
11856 only
11857 by
11858 as
11859 many
11860 bytes
11861 as
11862 needed
11863 Alternative
11864 techniques
11865 such
11866 as
11867 growing
11868 the
11869 array
11870 by
11871 block
11872 sizes
11873 or
11874 pages
11875 were
11876 found
11877 to
11878 improve
11879 insertion
11880 performance
11881 but
11882 at
11883 a
11884 cost
11885 in
11886 space
11887 This
11888 variation
11889 makes
11890 more
11891 efficient
11892 use
11893 of
11894 CPU
11895 caching
11896 and
11897 the
11898 translation
11899 lookaside
11900 buffer
11901 TLB
11902 because
11903 slot
11904 entries
11905 are
11906 stored
11907 in
11908 sequential
11909 memory
11910 positions
11911 It
11912 also
11913 dispenses
11914 with
11915 the
11916 next
11917 pointers
11918 that
11919 are
11920 required
11921 by
11922 linked
11923 lists
11924 which
11925 saves
11926 space
11927 Despite
11928 frequent
11929 array
11930 resizing
11931 space
11932 overheads
11933 incurred
11934 by
11935 operating
11936 system
11937 such
11938 as
11939 memory
11940 fragmentation
11941 were
11942 found
11943 to
11944 be
11945 small
11946 An
11947 elaboration
11948 on
11949 this
11950 approach
11951 is
11952 the
11953 so
11954 called
11955 dynamic
11956 perfect
11957 hashing
11958 11
11959 where
11960 a
11961 bucket
11962 that
11963 contains
11964 k
11965 entries
11966 is
11967 organized
11968 as
11969 a
11970 perfect
11971 hash
11972 table
11973 with
11974 k2
11975 slots
11976 While
11977 it
11978 uses
11979 more
11980 memory
11981 n2
11982 slots
11983 for
11984 n
11985 entries
11986 in
11987 the
11988 worst
11989 case
11990 and
11991 n
11992 k
11993 slots
11994 in
11995 the
11996 average
11997 case
11998 this
11999 variant
12000 has
12001 guaranteed
12002 constant
12003 worst
12004 case
12005 lookup
12006 time
12007 and
12008 low
12009 amortized
12010 time
12011 for
12012 insertion
12013 Open
12014 addressing
12015 Hash
12016 collision
12017 resolved
12018 by
12019 open
12020 addressing
12021 with
12022 linear
12023 probing
12024 interval
12025 1
12026 Note
12027 that
12028 Ted
12029 Baker
12030 has
12031 a
12032 unique
12033 hash
12034 but
12035 nevertheless
12036 collided
12037 with
12038 Sandra
12039 Dee
12040 that
12041 had
12042 previously
12043 collided
12044 with
12045 John
12046 Smith
12047 In
12048 another
12049 strategy
12050 called
12051 open
12052 addressing
12053 all
12054 entry
12055 records
12056 are
12057 stored
12058 in
12059 the
12060 bucket
12061 array
12062 itself
12063 When
12064 a
12065 new
12066 entry
12067 has
12068 to
12069 be
12070 inserted
12071 the
12072 buckets
12073 are
12074 examined
12075 starting
12076 with
12077 the
12078 hashed
12079 to
12080 slot
12081 and
12082 proceeding
12083 in
12084 some
12085 probe
12086 sequence
12087 until
12088 an
12089 unoccupied
12090 slot
12091 is
12092 found
12093 When
12094 searching
12095 for
12096 an
12097 entry
12098 the
12099 buckets
12100 are
12101 scanned
12102 in
12103 the
12104 same
12105 sequence
12106 until
12107 either
12108 the
12109 target
12110 record
12111 is
12112 found
12113 or
12114 an
12115 unused
12116 array
12117 slot
12118 is
12119 found
12120 which
12121 indicates
12122 that
12123 there
12124 is
12125 no
12126 such
12127 key
12128 in
12129 the
12130 table12
12131 The
12132 name
12133 open
12134 addressing
12135 refers
12136 to
12137 the
12138 fact
12139 that
12140 the
12141 location
12142 address
12143 of
12144 the
12145 item
12146 is
12147 not
12148 determined
12149 by
12150 its
12151 hash
12152 value
12153 This
12154 method
12155 is
12156 also
12157 called
12158 closed
12159 hashing
12160 it
12161 should
12162 not
12163 be
12164 confused
12165 with
12166 open
12167 hashing
12168 or
12169 closed
12170 addressing
12171 that
12172 usually
12173 mean
12174 separate
12175 chaining
12176 Well
12177 known
12178 probe
12179 sequences
12180 include
12181 Linear
12182 probing
12183 in
12184 which
12185 the
12186 interval
12187 between
12188 probes
12189 is
12190 fixed
12191 usually
12192 1
12193 Quadratic
12194 probing
12195 in
12196 which
12197 the
12198 interval
12199 between
12200 probes
12201 is
12202 increased
12203 by
12204 adding
12205 the
12206 successive
12207 outputs
12208 of
12209 a
12210 quadratic
12211 polynomial
12212 to
12213 the
12214 starting
12215 value
12216 given
12217 by
12218 the
12219 original
12220 hash
12221 computation
12222 Double
12223 hashing
12224 in
12225 which
12226 the
12227 interval
12228 between
12229 probes
12230 is
12231 computed
12232 by
12233 another
12234 hash
12235 function
12236 A
12237 drawback
12238 of
12239 all
12240 these
12241 open
12242 addressing
12243 schemes
12244 is
12245 that
12246 the
12247 number
12248 of
12249 stored
12250 entries
12251 cannot
12252 exceed
12253 the
12254 number
12255 of
12256 slots
12257 in
12258 the
12259 bucket
12260 array
12261 In
12262 fact
12263 even
12264 with
12265 good
12266 hash
12267 functions
12268 their
12269 performance
12270 dramatically
12271 degrades
12272 when
12273 the
12274 load
12275 factor
12276 grows
12277 beyond
12278 07
12279 or
12280 so
12281 For
12282 many
12283 applications
12284 these
12285 restrictions
12286 mandate
12287 the
12288 use
12289 of
12290 dynamic
12291 resizing
12292 with
12293 its
12294 attendant
12295 costs
12296 Open
12297 addressing
12298 schemes
12299 also
12300 put
12301 more
12302 stringent
12303 requirements
12304 on
12305 the
12306 hash
12307 function
12308 besides
12309 distributing
12310 the
12311 keys
12312 more
12313 uniformly
12314 over
12315 the
12316 buckets
12317 the
12318 function
12319 must
12320 also
12321 minimize
12322 the
12323 clustering
12324 of
12325 hash
12326 values
12327 that
12328 are
12329 consecutive
12330 in
12331 the
12332 probe
12333 order
12334 Using
12335 separate
12336 chaining
12337 the
12338 only
12339 concern
12340 is
12341 that
12342 too
12343 many
12344 objects
12345 map
12346 to
12347 the
12348 same
12349 hash
12350 value
12351 whether
12352 they
12353 are
12354 adjacent
12355 or
12356 nearby
12357 is
12358 completely
12359 irrelevant
12360 Open
12361 addressing
12362 only
12363 saves
12364 memory
12365 if
12366 the
12367 entries
12368 are
12369 small
12370 less
12371 than
12372 four
12373 times
12374 the
12375 size
12376 of
12377 a
12378 pointer
12379 and
12380 the
12381 load
12382 factor
12383 is
12384 not
12385 too
12386 small
12387 If
12388 the
12389 load
12390 factor
12391 is
12392 close
12393 to
12394 zero
12395 that
12396 is
12397 there
12398 are
12399 far
12400 more
12401 buckets
12402 than
12403 stored
12404 entries
12405 open
12406 addressing
12407 is
12408 wasteful
12409 even
12410 if
12411 each
12412 entry
12413 is
12414 just
12415 two
12416 words
12417 This
12418 graph
12419 compares
12420 the
12421 average
12422 number
12423 of
12424 cache
12425 misses
12426 required
12427 to
12428 look
12429 up
12430 elements
12431 in
12432 tables
12433 with
12434 chaining
12435 and
12436 linear
12437 probing
12438 As
12439 the
12440 table
12441 passes
12442 the
12443 80
12444 full
12445 mark
12446 linear
12447 probings
12448 performance
12449 drastically
12450 degrades
12451 Open
12452 addressing
12453 avoids
12454 the
12455 time
12456 overhead
12457 of
12458 allocating
12459 each
12460 new
12461 entry
12462 record
12463 and
12464 can
12465 be
12466 implemented
12467 even
12468 in
12469 the
12470 absence
12471 of
12472 a
12473 memory
12474 allocator
12475 It
12476 also
12477 avoids
12478 the
12479 extra
12480 indirection
12481 required
12482 to
12483 access
12484 the
12485 first
12486 entry
12487 of
12488 each
12489 bucket
12490 that
12491 is
12492 usually
12493 the
12494 only
12495 one
12496 It
12497 also
12498 has
12499 better
12500 locality
12501 of
12502 reference
12503 particularly
12504 with
12505 linear
12506 probing
12507 With
12508 small
12509 record
12510 sizes
12511 these
12512 factors
12513 can
12514 yield
12515 better
12516 performance
12517 than
12518 chaining
12519 particularly
12520 for
12521 lookups
12522 Hash
12523 tables
12524 with
12525 open
12526 addressing
12527 are
12528 also
12529 easier
12530 to
12531 serialize
12532 because
12533 they
12534 do
12535 not
12536 use
12537 pointers
12538 On
12539 the
12540 other
12541 hand
12542 normal
12543 open
12544 addressing
12545 is
12546 a
12547 poor
12548 choice
12549 for
12550 large
12551 elements
12552 because
12553 these
12554 elements
12555 fill
12556 entire
12557 CPU
12558 cache
12559 lines
12560 negating
12561 the
12562 cache
12563 advantage
12564 and
12565 a
12566 large
12567 amount
12568 of
12569 space
12570 is
12571 wasted
12572 on
12573 large
12574 empty
12575 table
12576 slots
12577 If
12578 the
12579 open
12580 addressing
12581 table
12582 only
12583 stores
12584 references
12585 to
12586 elements
12587 external
12588 storage
12589 it
12590 uses
12591 space
12592 comparable
12593 to
12594 chaining
12595 even
12596 for
12597 large
12598 records
12599 but
12600 loses
12601 its
12602 speed
12603 advantage
12604 Generally
12605 speaking
12606 open
12607 addressing
12608 is
12609 better
12610 used
12611 for
12612 hash
12613 tables
12614 with
12615 small
12616 records
12617 that
12618 can
12619 be
12620 stored
12621 within
12622 the
12623 table
12624 internal
12625 storage
12626 and
12627 fit
12628 in
12629 a
12630 cache
12631 line
12632 They
12633 are
12634 particularly
12635 suitable
12636 for
12637 elements
12638 of
12639 one
12640 word
12641 or
12642 less
12643 If
12644 the
12645 table
12646 is
12647 expected
12648 to
12649 have
12650 a
12651 high
12652 load
12653 factor
12654 the
12655 records
12656 are
12657 large
12658 or
12659 the
12660 data
12661 is
12662 variable
12663 sized
12664 chained
12665 hash
12666 tables
12667 often
12668 perform
12669 as
12670 well
12671 or
12672 better
12673 Ultimately
12674 used
12675 sensibly
12676 any
12677 kind
12678 of
12679 hash
12680 table
12681 algorithm
12682 is
12683 usually
12684 fast
12685 enough
12686 and
12687 the
12688 percentage
12689 of
12690 a
12691 calculation
12692 spent
12693 in
12694 hash
12695 table
12696 code
12697 is
12698 low
12699 Memory
12700 usage
12701 is
12702 rarely
12703 considered
12704 excessive
12705 Therefore
12706 in
12707 most
12708 cases
12709 the
12710 differences
12711 between
12712 these
12713 algorithms
12714 are
12715 marginal
12716 and
12717 other
12718 considerations
12719 typically
12720 come
12721 into
12722 play
12723 Coalesced
12724 hashing
12725 A
12726 hybrid
12727 of
12728 chaining
12729 and
12730 open
12731 addressing
12732 coalesced
12733 hashing
12734 links
12735 together
12736 chains
12737 of
12738 nodes
12739 within
12740 the
12741 table
12742 itself12
12743 Like
12744 open
12745 addressing
12746 it
12747 achieves
12748 space
12749 usage
12750 and
12751 somewhat
12752 diminished
12753 cache
12754 advantages
12755 over
12756 chaining
12757 Like
12758 chaining
12759 it
12760 does
12761 not
12762 exhibit
12763 clustering
12764 effects
12765 in
12766 fact
12767 the
12768 table
12769 can
12770 be
12771 efficiently
12772 filled
12773 to
12774 a
12775 high
12776 density
12777 Unlike
12778 chaining
12779 it
12780 cannot
12781 have
12782 more
12783 elements
12784 than
12785 table
12786 slots
12787 Cuckoo
12788 hashing
12789 Another
12790 alternative
12791 open
12792 addressing
12793 solution
12794 is
12795 cuckoo
12796 hashing
12797 which
12798 ensures
12799 constant
12800 lookup
12801 time
12802 in
12803 the
12804 worst
12805 case
12806 and
12807 constant
12808 amortized
12809 time
12810 for
12811 insertions
12812 and
12813 deletions
12814 It
12815 uses
12816 two
12817 or
12818 more
12819 hash
12820 functions
12821 which
12822 means
12823 any
12824 key
12825 value
12826 pair
12827 could
12828 be
12829 in
12830 two
12831 or
12832 more
12833 locations
12834 For
12835 lookup
12836 the
12837 first
12838 hash
12839 function
12840 is
12841 used
12842 if
12843 the
12844 key
12845 value
12846 is
12847 not
12848 found
12849 then
12850 the
12851 second
12852 hash
12853 function
12854 is
12855 used
12856 and
12857 so
12858 on
12859 If
12860 a
12861 collision
12862 happens
12863 during
12864 insertion
12865 then
12866 the
12867 key
12868 is
12869 re
12870 hashed
12871 with
12872 the
12873 second
12874 hash
12875 function
12876 to
12877 map
12878 it
12879 to
12880 another
12881 bucket
12882 If
12883 all
12884 hash
12885 functions
12886 are
12887 used
12888 and
12889 there
12890 is
12891 still
12892 a
12893 collision
12894 then
12895 the
12896 key
12897 it
12898 collided
12899 with
12900 is
12901 removed
12902 to
12903 make
12904 space
12905 for
12906 the
12907 new
12908 key
12909 and
12910 the
12911 old
12912 key
12913 is
12914 re
12915 hashed
12916 with
12917 one
12918 of
12919 the
12920 other
12921 hash
12922 functions
12923 which
12924 maps
12925 it
12926 to
12927 another
12928 bucket
12929 If
12930 that
12931 location
12932 also
12933 results
12934 in
12935 a
12936 collision
12937 then
12938 the
12939 process
12940 repeats
12941 until
12942 there
12943 is
12944 no
12945 collision
12946 or
12947 the
12948 process
12949 traverses
12950 all
12951 the
12952 buckets
12953 at
12954 which
12955 point
12956 the
12957 table
12958 is
12959 resized
12960 By
12961 combining
12962 multiple
12963 hash
12964 functions
12965 with
12966 multiple
12967 cells
12968 per
12969 bucket
12970 very
12971 high
12972 space
12973 utilisation
12974 can
12975 be
12976 achieved
12977 Hopscotch
12978 hashing
12979 Another
12980 alternative
12981 open
12982 addressing
12983 solution
12984 is
12985 hopscotch
12986 hashing
12987 13
12988 which
12989 combines
12990 the
12991 approaches
12992 of
12993 cuckoo
12994 hashing
12995 and
12996 linear
12997 probing
12998 yet
12999 seems
13000 in
13001 general
13002 to
13003 avoid
13004 their
13005 limitations
13006 In
13007 particular
13008 it
13009 works
13010 well
13011 even
13012 when
13013 the
13014 load
13015 factor
13016 grows
13017 beyond
13018 09
13019 The
13020 algorithm
13021 is
13022 well
13023 suited
13024 for
13025 implementing
13026 a
13027 resizable
13028 concurrent
13029 hash
13030 table
13031 The
13032 hopscotch
13033 hashing
13034 algorithm
13035 works
13036 by
13037 defining
13038 a
13039 neighborhood
13040 of
13041 buckets
13042 near
13043 the
13044 original
13045 hashed
13046 bucket
13047 where
13048 a
13049 given
13050 entry
13051 is
13052 always
13053 found
13054 Thus
13055 search
13056 is
13057 limited
13058 to
13059 the
13060 number
13061 of
13062 entries
13063 in
13064 this
13065 neighborhood
13066 which
13067 is
13068 logarithmic
13069 in
13070 the
13071 worst
13072 case
13073 constant
13074 on
13075 average
13076 and
13077 with
13078 proper
13079 alignment
13080 of
13081 the
13082 neighborhood
13083 typically
13084 requires
13085 one
13086 cache
13087 miss
13088 When
13089 inserting
13090 an
13091 entry
13092 one
13093 first
13094 attempts
13095 to
13096 add
13097 it
13098 to
13099 a
13100 bucket
13101 in
13102 the
13103 neighborhood
13104 However
13105 if
13106 all
13107 buckets
13108 in
13109 this
13110 neighborhood
13111 are
13112 occupied
13113 the
13114 algorithm
13115 traverses
13116 buckets
13117 in
13118 sequence
13119 until
13120 an
13121 open
13122 slot
13123 an
13124 unoccupied
13125 bucket
13126 is
13127 found
13128 as
13129 in
13130 linear
13131 probing
13132 At
13133 that
13134 point
13135 since
13136 the
13137 empty
13138 bucket
13139 is
13140 outside
13141 the
13142 neighborhood
13143 items
13144 are
13145 repeatedly
13146 displaced
13147 in
13148 a
13149 sequence
13150 of
13151 hops
13152 This
13153 is
13154 similar
13155 to
13156 cuckoo
13157 hashing
13158 but
13159 with
13160 the
13161 difference
13162 that
13163 in
13164 this
13165 case
13166 the
13167 empty
13168 slot
13169 is
13170 being
13171 moved
13172 into
13173 the
13174 neighborhood
13175 instead
13176 of
13177 items
13178 being
13179 moved
13180 out
13181 with
13182 the
13183 hope
13184 of
13185 eventually
13186 finding
13187 an
13188 empty
13189 slot
13190 Each
13191 hop
13192 brings
13193 the
13194 open
13195 slot
13196 closer
13197 to
13198 the
13199 original
13200 neighborhood
13201 without
13202 invalidating
13203 the
13204 neighborhood
13205 property
13206 of
13207 any
13208 of
13209 the
13210 buckets
13211 along
13212 the
13213 way
13214 In
13215 the
13216 end
13217 the
13218 open
13219 slot
13220 has
13221 been
13222 moved
13223 into
13224 the
13225 neighborhood
13226 and
13227 the
13228 entry
13229 being
13230 inserted
13231 can
13232 be
13233 added
13234 to
13235 it
13236 Robin
13237 Hood
13238 hashing
13239 One
13240 interesting
13241 variation
13242 on
13243 double
13244 hashing
13245 collision
13246 resolution
13247 is
13248 Robin
13249 Hood
13250 hashing1415
13251 The
13252 idea
13253 is
13254 that
13255 a
13256 new
13257 key
13258 may
13259 displace
13260 a
13261 key
13262 already
13263 inserted
13264 if
13265 its
13266 probe
13267 count
13268 is
13269 larger
13270 than
13271 that
13272 of
13273 the
13274 key
13275 at
13276 the
13277 current
13278 position
13279 The
13280 net
13281 effect
13282 of
13283 this
13284 is
13285 that
13286 it
13287 reduces
13288 worst
13289 case
13290 search
13291 times
13292 in
13293 the
13294 table
13295 This
13296 is
13297 similar
13298 to
13299 ordered
13300 hash
13301 tables16
13302 except
13303 that
13304 the
13305 criterion
13306 for
13307 bumping
13308 a
13309 key
13310 does
13311 not
13312 depend
13313 on
13314 a
13315 direct
13316 relationship
13317 between
13318 the
13319 keys
13320 Since
13321 both
13322 the
13323 worst
13324 case
13325 and
13326 the
13327 variation
13328 in
13329 the
13330 number
13331 of
13332 probes
13333 is
13334 reduced
13335 dramatically
13336 an
13337 interesting
13338 variation
13339 is
13340 to
13341 probe
13342 the
13343 table
13344 starting
13345 at
13346 the
13347 expected
13348 successful
13349 probe
13350 value
13351 and
13352 then
13353 expand
13354 from
13355 that
13356 position
13357 in
13358 both
13359 directions17
13360 External
13361 Robin
13362 Hashing
13363 is
13364 an
13365 extension
13366 of
13367 this
13368 algorithm
13369 where
13370 the
13371 table
13372 is
13373 stored
13374 in
13375 an
13376 external
13377 file
13378 and
13379 each
13380 table
13381 position
13382 corresponds
13383 to
13384 a
13385 fixed
13386 sized
13387 page
13388 or
13389 bucket
13390 with
13391 B
13392 records18
13393 2
13394 choice
13395 hashing
13396 2
13397 choice
13398 hashing
13399 employs
13400 2
13401 different
13402 hash
13403 functions
13404 h1x
13405 and
13406 h2x
13407 for
13408 the
13409 hash
13410 table
13411 Both
13412 hash
13413 functions
13414 are
13415 used
13416 to
13417 compute
13418 two
13419 table
13420 locations
13421 When
13422 an
13423 object
13424 is
13425 inserted
13426 in
13427 the
13428 table
13429 then
13430 it
13431 is
13432 placed
13433 in
13434 the
13435 table
13436 location
13437 that
13438 contains
13439 fewer
13440 objects
13441 with
13442 the
13443 default
13444 being
13445 the
13446 h1x
13447 table
13448 location
13449 if
13450 there
13451 is
13452 equality
13453 in
13454 bucket
13455 size
13456 2
13457 choice
13458 hashing
13459 employs
13460 the
13461 principle
13462 of
13463 the
13464 power
13465 of
13466 two
13467 choices19
13468 Dynamic
13469 resizing
13470 The
13471 good
13472 functioning
13473 of
13474 a
13475 hash
13476 table
13477 depends
13478 on
13479 the
13480 fact
13481 that
13482 the
13483 table
13484 size
13485 is
13486 proportional
13487 to
13488 the
13489 number
13490 of
13491 entries
13492 With
13493 a
13494 fixed
13495 size
13496 and
13497 the
13498 common
13499 structures
13500 it
13501 is
13502 similar
13503 to
13504 linear
13505 search
13506 except
13507 with
13508 a
13509 better
13510 constant
13511 factor
13512 In
13513 some
13514 cases
13515 the
13516 number
13517 of
13518 entries
13519 may
13520 be
13521 definitely
13522 known
13523 in
13524 advance
13525 for
13526 example
13527 keywords
13528 in
13529 a
13530 language
13531 More
13532 commonly
13533 this
13534 is
13535 not
13536 known
13537 for
13538 sure
13539 if
13540 only
13541 due
13542 to
13543 later
13544 changes
13545 in
13546 code
13547 and
13548 data
13549 It
13550 is
13551 one
13552 serious
13553 although
13554 common
13555 mistake
13556 to
13557 not
13558 provide
13559 any
13560 way
13561 for
13562 the
13563 table
13564 to
13565 resize
13566 A
13567 general
13568 purpose
13569 hash
13570 table
13571 class
13572 will
13573 almost
13574 always
13575 have
13576 some
13577 way
13578 to
13579 resize
13580 and
13581 it
13582 is
13583 good
13584 practice
13585 even
13586 for
13587 simple
13588 custom
13589 tables
13590 An
13591 implementation
13592 should
13593 check
13594 the
13595 load
13596 factor
13597 and
13598 do
13599 something
13600 if
13601 it
13602 becomes
13603 too
13604 large
13605 this
13606 needs
13607 to
13608 be
13609 done
13610 only
13611 on
13612 inserts
13613 since
13614 that
13615 is
13616 the
13617 only
13618 thing
13619 that
13620 would
13621 increase
13622 it
13623 To
13624 keep
13625 the
13626 load
13627 factor
13628 under
13629 a
13630 certain
13631 limit
13632 eg
13633 under
13634 3
13635 4
13636 many
13637 table
13638 implementations
13639 expand
13640 the
13641 table
13642 when
13643 items
13644 are
13645 inserted
13646 For
13647 example
13648 in
13649 Javas
13650 HashMap
13651 class
13652 the
13653 default
13654 load
13655 factor
13656 threshold
13657 for
13658 table
13659 expansion
13660 is
13661 075
13662 and
13663 in
13664 Pythons
13665 dict
13666 table
13667 size
13668 is
13669 resized
13670 when
13671 load
13672 factor
13673 is
13674 greater
13675 than
13676 2
13677 3
13678 Since
13679 buckets
13680 are
13681 usually
13682 implemented
13683 on
13684 top
13685 of
13686 a
13687 dynamic
13688 array
13689 and
13690 any
13691 constant
13692 proportion
13693 for
13694 resizing
13695 greater
13696 than
13697 1
13698 will
13699 keep
13700 the
13701 load
13702 factor
13703 under
13704 the
13705 desired
13706 limit
13707 the
13708 exact
13709 choice
13710 of
13711 the
13712 constant
13713 is
13714 determined
13715 by
13716 the
13717 same
13718 space
13719 time
13720 tradeoff
13721 as
13722 for
13723 dynamic
13724 arrays
13725 Resizing
13726 is
13727 accompanied
13728 by
13729 a
13730 full
13731 or
13732 incremental
13733 table
13734 rehash
13735 whereby
13736 existing
13737 items
13738 are
13739 mapped
13740 to
13741 new
13742 bucket
13743 locations
13744 To
13745 limit
13746 the
13747 proportion
13748 of
13749 memory
13750 wasted
13751 due
13752 to
13753 empty
13754 buckets
13755 some
13756 implementations
13757 also
13758 shrink
13759 the
13760 size
13761 of
13762 the
13763 table
13764 followed
13765 by
13766 a
13767 rehash
13768 when
13769 items
13770 are
13771 deleted
13772 From
13773 the
13774 point
13775 of
13776 space
13777 time
13778 tradeoffs
13779 this
13780 operation
13781 is
13782 similar
13783 to
13784 the
13785 deallocation
13786 in
13787 dynamic
13788 arrays
13789 Resizing
13790 by
13791 copying
13792 all
13793 entries
13794 A
13795 common
13796 approach
13797 is
13798 to
13799 automatically
13800 trigger
13801 a
13802 complete
13803 resizing
13804 when
13805 the
13806 load
13807 factor
13808 exceeds
13809 some
13810 threshold
13811 rmax
13812 Then
13813 a
13814 new
13815 larger
13816 table
13817 is
13818 allocated
13819 all
13820 the
13821 entries
13822 of
13823 the
13824 old
13825 table
13826 are
13827 removed
13828 and
13829 inserted
13830 into
13831 this
13832 new
13833 table
13834 and
13835 the
13836 old
13837 table
13838 is
13839 returned
13840 to
13841 the
13842 free
13843 storage
13844 pool
13845 Symmetrically
13846 when
13847 the
13848 load
13849 factor
13850 falls
13851 below
13852 a
13853 second
13854 threshold
13855 rmin
13856 all
13857 entries
13858 are
13859 moved
13860 to
13861 a
13862 new
13863 smaller
13864 table
13865 If
13866 the
13867 table
13868 size
13869 increases
13870 or
13871 decreases
13872 by
13873 a
13874 fixed
13875 percentage
13876 at
13877 each
13878 expansion
13879 the
13880 total
13881 cost
13882 of
13883 these
13884 resizings
13885 amortized
13886 over
13887 all
13888 insert
13889 and
13890 delete
13891 operations
13892 is
13893 still
13894 a
13895 constant
13896 independent
13897 of
13898 the
13899 number
13900 of
13901 entries
13902 n
13903 and
13904 of
13905 the
13906 number
13907 m
13908 of
13909 operations
13910 performed
13911 For
13912 example
13913 consider
13914 a
13915 table
13916 that
13917 was
13918 created
13919 with
13920 the
13921 minimum
13922 possible
13923 size
13924 and
13925 is
13926 doubled
13927 each
13928 time
13929 the
13930 load
13931 ratio
13932 exceeds
13933 some
13934 threshold
13935 If
13936 m
13937 elements
13938 are
13939 inserted
13940 into
13941 that
13942 table
13943 the
13944 total
13945 number
13946 of
13947 extra
13948 re
13949 insertions
13950 that
13951 occur
13952 in
13953 all
13954 dynamic
13955 resizings
13956 of
13957 the
13958 table
13959 is
13960 at
13961 most
13962 m
13963 1
13964 In
13965 other
13966 words
13967 dynamic
13968 resizing
13969 roughly
13970 doubles
13971 the
13972 cost
13973 of
13974 each
13975 insert
13976 or
13977 delete
13978 operation
13979 Incremental
13980 resizing
13981 Some
13982 hash
13983 table
13984 implementations
13985 notably
13986 in
13987 real
13988 time
13989 systems
13990 cannot
13991 pay
13992 the
13993 price
13994 of
13995 enlarging
13996 the
13997 hash
13998 table
13999 all
14000 at
14001 once
14002 because
14003 it
14004 may
14005 interrupt
14006 time
14007 critical
14008 operations
14009 If
14010 one
14011 cannot
14012 avoid
14013 dynamic
14014 resizing
14015 a
14016 solution
14017 is
14018 to
14019 perform
14020 the
14021 resizing
14022 gradually
14023 During
14024 the
14025 resize
14026 allocate
14027 the
14028 new
14029 hash
14030 table
14031 but
14032 keep
14033 the
14034 old
14035 table
14036 unchanged
14037 In
14038 each
14039 lookup
14040 or
14041 delete
14042 operation
14043 check
14044 both
14045 tables
14046 Perform
14047 insertion
14048 operations
14049 only
14050 in
14051 the
14052 new
14053 table
14054 At
14055 each
14056 insertion
14057 also
14058 move
14059 r
14060 elements
14061 from
14062 the
14063 old
14064 table
14065 to
14066 the
14067 new
14068 table
14069 When
14070 all
14071 elements
14072 are
14073 removed
14074 from
14075 the
14076 old
14077 table
14078 deallocate
14079 it
14080 To
14081 ensure
14082 that
14083 the
14084 old
14085 table
14086 is
14087 completely
14088 copied
14089 over
14090 before
14091 the
14092 new
14093 table
14094 itself
14095 needs
14096 to
14097 be
14098 enlarged
14099 it
14100 is
14101 necessary
14102 to
14103 increase
14104 the
14105 size
14106 of
14107 the
14108 table
14109 by
14110 a
14111 factor
14112 of
14113 at
14114 least
14115 r
14116 1
14117 r
14118 during
14119 resizing
14120 Monotonic
14121 keys
14122 If
14123 it
14124 is
14125 known
14126 that
14127 key
14128 values
14129 will
14130 always
14131 increase
14132 or
14133 decrease
14134 monotonically
14135 then
14136 a
14137 variation
14138 of
14139 consistent
14140 hashing
14141 can
14142 be
14143 achieved
14144 by
14145 keeping
14146 a
14147 list
14148 of
14149 the
14150 single
14151 most
14152 recent
14153 key
14154 value
14155 at
14156 each
14157 hash
14158 table
14159 resize
14160 operation
14161 Upon
14162 lookup
14163 keys
14164 that
14165 fall
14166 in
14167 the
14168 ranges
14169 defined
14170 by
14171 these
14172 list
14173 entries
14174 are
14175 directed
14176 to
14177 the
14178 appropriate
14179 hash
14180 function
14181 and
14182 indeed
14183 hash
14184 table
14185 both
14186 of
14187 which
14188 can
14189 be
14190 different
14191 for
14192 each
14193 range
14194 Since
14195 it
14196 is
14197 common
14198 to
14199 grow
14200 the
14201 overall
14202 number
14203 of
14204 entries
14205 by
14206 doubling
14207 there
14208 will
14209 only
14210 be
14211 OlgN
14212 ranges
14213 to
14214 check
14215 and
14216 binary
14217 search
14218 time
14219 for
14220 the
14221 redirection
14222 would
14223 be
14224 OlglgN
14225 As
14226 with
14227 consistent
14228 hashing
14229 this
14230 approach
14231 guarantees
14232 that
14233 any
14234 keys
14235 hash
14236 once
14237 issued
14238 will
14239 never
14240 change
14241 even
14242 when
14243 the
14244 hash
14245 table
14246 is
14247 later
14248 grown
14249 Other
14250 solutions
14251 Linear
14252 hashing20
14253 is
14254 a
14255 hash
14256 table
14257 algorithm
14258 that
14259 permits
14260 incremental
14261 hash
14262 table
14263 expansion
14264 It
14265 is
14266 implemented
14267 using
14268 a
14269 single
14270 hash
14271 table
14272 but
14273 with
14274 two
14275 possible
14276 look
14277 up
14278 functions
14279 Another
14280 way
14281 to
14282 decrease
14283 the
14284 cost
14285 of
14286 table
14287 resizing
14288 is
14289 to
14290 choose
14291 a
14292 hash
14293 function
14294 in
14295 such
14296 a
14297 way
14298 that
14299 the
14300 hashes
14301 of
14302 most
14303 values
14304 do
14305 not
14306 change
14307 when
14308 the
14309 table
14310 is
14311 resized
14312 This
14313 approach
14314 called
14315 consistent
14316 hashing
14317 is
14318 prevalent
14319 in
14320 disk
14321 based
14322 and
14323 distributed
14324 hashes
14325 where
14326 rehashing
14327 is
14328 prohibitively
14329 costly
14330 Performance
14331 analysis
14332 In
14333 the
14334 simplest
14335 model
14336 the
14337 hash
14338 function
14339 is
14340 completely
14341 unspecified
14342 and
14343 the
14344 table
14345 does
14346 not
14347 resize
14348 For
14349 the
14350 best
14351 possible
14352 choice
14353 of
14354 hash
14355 function
14356 a
14357 table
14358 of
14359 size
14360 k
14361 with
14362 open
14363 addressing
14364 has
14365 no
14366 collisions
14367 and
14368 holds
14369 up
14370 to
14371 k
14372 elements
14373 with
14374 a
14375 single
14376 comparison
14377 for
14378 successful
14379 lookup
14380 and
14381 a
14382 table
14383 of
14384 size
14385 k
14386 with
14387 chaining
14388 and
14389 n
14390 keys
14391 has
14392 the
14393 minimum
14394 max0
14395 n
14396 k
14397 collisions
14398 and
14399 O1
14400 n
14401 k
14402 comparisons
14403 for
14404 lookup
14405 For
14406 the
14407 worst
14408 choice
14409 of
14410 hash
14411 function
14412 every
14413 insertion
14414 causes
14415 a
14416 collision
14417 and
14418 hash
14419 tables
14420 degenerate
14421 to
14422 linear
14423 search
14424 with
14425 Ωn
14426 amortized
14427 comparisons
14428 per
14429 insertion
14430 and
14431 up
14432 to
14433 n
14434 comparisons
14435 for
14436 a
14437 successful
14438 lookup
14439 Adding
14440 rehashing
14441 to
14442 this
14443 model
14444 is
14445 straightforward
14446 As
14447 in
14448 a
14449 dynamic
14450 array
14451 geometric
14452 resizing
14453 by
14454 a
14455 factor
14456 of
14457 b
14458 implies
14459 that
14460 only
14461 n
14462 bi
14463 keys
14464 are
14465 inserted
14466 i
14467 or
14468 more
14469 times
14470 so
14471 that
14472 the
14473 total
14474 number
14475 of
14476 insertions
14477 is
14478 bounded
14479 above
14480 by
14481 bn
14482 b
14483 1
14484 which
14485 is
14486 On
14487 By
14488 using
14489 rehashing
14490 to
14491 maintain
14492 n
14493 k
14494 tables
14495 using
14496 both
14497 chaining
14498 and
14499 open
14500 addressing
14501 can
14502 have
14503 unlimited
14504 elements
14505 and
14506 perform
14507 successful
14508 lookup
14509 in
14510 a
14511 single
14512 comparison
14513 for
14514 the
14515 best
14516 choice
14517 of
14518 hash
14519 function
14520 In
14521 more
14522 realistic
14523 models
14524 the
14525 hash
14526 function
14527 is
14528 a
14529 random
14530 variable
14531 over
14532 a
14533 probability
14534 distribution
14535 of
14536 hash
14537 functions
14538 and
14539 performance
14540 is
14541 computed
14542 on
14543 average
14544 over
14545 the
14546 choice
14547 of
14548 hash
14549 function
14550 When
14551 this
14552 distribution
14553 is
14554 uniform
14555 the
14556 assumption
14557 is
14558 called
14559 simple
14560 uniform
14561 hashing
14562 and
14563 it
14564 can
14565 be
14566 shown
14567 that
14568 hashing
14569 with
14570 chaining
14571 requires
14572 Θ1
14573 n
14574 k
14575 comparisons
14576 on
14577 average
14578 for
14579 an
14580 unsuccessful
14581 lookup
14582 and
14583 hashing
14584 with
14585 open
14586 addressing
14587 requires
14588 Θ1
14589 1
14590 n
14591 k21
14592 Both
14593 these
14594 bounds
14595 are
14596 constant
14597 if
14598 we
14599 maintain
14600 n
14601 k
14602 c
14603 using
14604 table
14605 resizing
14606 where
14607 c
14608 is
14609 a
14610 fixed
14611 constant
14612 less
14613 than
14614 1
14615 Features
14616 Advantages
14617 The
14618 main
14619 advantage
14620 of
14621 hash
14622 tables
14623 over
14624 other
14625 table
14626 data
14627 structures
14628 is
14629 speed
14630 This
14631 advantage
14632 is
14633 more
14634 apparent
14635 when
14636 the
14637 number
14638 of
14639 entries
14640 is
14641 large
14642 Hash
14643 tables
14644 are
14645 particularly
14646 efficient
14647 when
14648 the
14649 maximum
14650 number
14651 of
14652 entries
14653 can
14654 be
14655 predicted
14656 in
14657 advance
14658 so
14659 that
14660 the
14661 bucket
14662 array
14663 can
14664 be
14665 allocated
14666 once
14667 with
14668 the
14669 optimum
14670 size
14671 and
14672 never
14673 resized
14674 If
14675 the
14676 set
14677 of
14678 key
14679 value
14680 pairs
14681 is
14682 fixed
14683 and
14684 known
14685 ahead
14686 of
14687 time
14688 so
14689 insertions
14690 and
14691 deletions
14692 are
14693 not
14694 allowed
14695 one
14696 may
14697 reduce
14698 the
14699 average
14700 lookup
14701 cost
14702 by
14703 a
14704 careful
14705 choice
14706 of
14707 the
14708 hash
14709 function
14710 bucket
14711 table
14712 size
14713 and
14714 internal
14715 data
14716 structures
14717 In
14718 particular
14719 one
14720 may
14721 be
14722 able
14723 to
14724 devise
14725 a
14726 hash
14727 function
14728 that
14729 is
14730 collision
14731 free
14732 or
14733 even
14734 perfect
14735 see
14736 below
14737 In
14738 this
14739 case
14740 the
14741 keys
14742 need
14743 not
14744 be
14745 stored
14746 in
14747 the
14748 table
14749 Drawbacks
14750 Although
14751 operations
14752 on
14753 a
14754 hash
14755 table
14756 take
14757 constant
14758 time
14759 on
14760 average
14761 the
14762 cost
14763 of
14764 a
14765 good
14766 hash
14767 function
14768 can
14769 be
14770 significantly
14771 higher
14772 than
14773 the
14774 inner
14775 loop
14776 of
14777 the
14778 lookup
14779 algorithm
14780 for
14781 a
14782 sequential
14783 list
14784 or
14785 search
14786 tree
14787 Thus
14788 hash
14789 tables
14790 are
14791 not
14792 effective
14793 when
14794 the
14795 number
14796 of
14797 entries
14798 is
14799 very
14800 small
14801 However
14802 in
14803 some
14804 cases
14805 the
14806 high
14807 cost
14808 of
14809 computing
14810 the
14811 hash
14812 function
14813 can
14814 be
14815 mitigated
14816 by
14817 saving
14818 the
14819 hash
14820 value
14821 together
14822 with
14823 the
14824 key
14825 For
14826 certain
14827 string
14828 processing
14829 applications
14830 such
14831 as
14832 spell
14833 checking
14834 hash
14835 tables
14836 may
14837 be
14838 less
14839 efficient
14840 than
14841 tries
14842 finite
14843 automata
14844 or
14845 Judy
14846 arrays
14847 Also
14848 if
14849 each
14850 key
14851 is
14852 represented
14853 by
14854 a
14855 small
14856 enough
14857 number
14858 of
14859 bits
14860 then
14861 instead
14862 of
14863 a
14864 hash
14865 table
14866 one
14867 may
14868 use
14869 the
14870 key
14871 directly
14872 as
14873 the
14874 index
14875 into
14876 an
14877 array
14878 of
14879 values
14880 Note
14881 that
14882 there
14883 are
14884 no
14885 collisions
14886 in
14887 this
14888 case
14889 The
14890 entries
14891 stored
14892 in
14893 a
14894 hash
14895 table
14896 can
14897 be
14898 enumerated
14899 efficiently
14900 at
14901 constant
14902 cost
14903 per
14904 entry
14905 but
14906 only
14907 in
14908 some
14909 pseudo
14910 random
14911 order
14912 Therefore
14913 there
14914 is
14915 no
14916 efficient
14917 way
14918 to
14919 locate
14920 an
14921 entry
14922 whose
14923 key
14924 is
14925 nearest
14926 to
14927 a
14928 given
14929 key
14930 Listing
14931 all
14932 n
14933 entries
14934 in
14935 some
14936 specific
14937 order
14938 generally
14939 requires
14940 a
14941 separate
14942 sorting
14943 step
14944 whose
14945 cost
14946 is
14947 proportional
14948 to
14949 logn
14950 per
14951 entry
14952 In
14953 comparison
14954 ordered
14955 search
14956 trees
14957 have
14958 lookup
14959 and
14960 insertion
14961 cost
14962 proportional
14963 to
14964 logn
14965 but
14966 allow
14967 finding
14968 the
14969 nearest
14970 key
14971 at
14972 about
14973 the
14974 same
14975 cost
14976 and
14977 ordered
14978 enumeration
14979 of
14980 all
14981 entries
14982 at
14983 constant
14984 cost
14985 per
14986 entry
14987 If
14988 the
14989 keys
14990 are
14991 not
14992 stored
14993 because
14994 the
14995 hash
14996 function
14997 is
14998 collision
14999 free
15000 there
15001 may
15002 be
15003 no
15004 easy
15005 way
15006 to
15007 enumerate
15008 the
15009 keys
15010 that
15011 are
15012 present
15013 in
15014 the
15015 table
15016 at
15017 any
15018 given
15019 moment
15020 Although
15021 the
15022 average
15023 cost
15024 per
15025 operation
15026 is
15027 constant
15028 and
15029 fairly
15030 small
15031 the
15032 cost
15033 of
15034 a
15035 single
15036 operation
15037 may
15038 be
15039 quite
15040 high
15041 In
15042 particular
15043 if
15044 the
15045 hash
15046 table
15047 uses
15048 dynamic
15049 resizing
15050 an
15051 insertion
15052 or
15053 deletion
15054 operation
15055 may
15056 occasionally
15057 take
15058 time
15059 proportional
15060 to
15061 the
15062 number
15063 of
15064 entries
15065 This
15066 may
15067 be
15068 a
15069 serious
15070 drawback
15071 in
15072 real
15073 time
15074 or
15075 interactive
15076 applications
15077 Hash
15078 tables
15079 in
15080 general
15081 exhibit
15082 poor
15083 locality
15084 of
15085 reference
15086 that
15087 is
15088 the
15089 data
15090 to
15091 be
15092 accessed
15093 is
15094 distributed
15095 seemingly
15096 at
15097 random
15098 in
15099 memory
15100 Because
15101 hash
15102 tables
15103 cause
15104 access
15105 patterns
15106 that
15107 jump
15108 around
15109 this
15110 can
15111 trigger
15112 microprocessor
15113 cache
15114 misses
15115 that
15116 cause
15117 long
15118 delays
15119 Compact
15120 data
15121 structures
15122 such
15123 as
15124 arrays
15125 searched
15126 with
15127 linear
15128 search
15129 may
15130 be
15131 faster
15132 if
15133 the
15134 table
15135 is
15136 relatively
15137 small
15138 and
15139 keys
15140 are
15141 compact
15142 The
15143 optimal
15144 performance
15145 point
15146 varies
15147 from
15148 system
15149 to
15150 system
15151 Hash
15152 tables
15153 become
15154 quite
15155 inefficient
15156 when
15157 there
15158 are
15159 many
15160 collisions
15161 While
15162 extremely
15163 uneven
15164 hash
15165 distributions
15166 are
15167 extremely
15168 unlikely
15169 to
15170 arise
15171 by
15172 chance
15173 a
15174 malicious
15175 adversary
15176 with
15177 knowledge
15178 of
15179 the
15180 hash
15181 function
15182 may
15183 be
15184 able
15185 to
15186 supply
15187 information
15188 to
15189 a
15190 hash
15191 that
15192 creates
15193 worst
15194 case
15195 behavior
15196 by
15197 causing
15198 excessive
15199 collisions
15200 resulting
15201 in
15202 very
15203 poor
15204 performance
15205 eg
15206 a
15207 denial
15208 of
15209 service
15210 attack22
15211 In
15212 critical
15213 applications
15214 universal
15215 hashing
15216 can
15217 be
15218 used
15219 a
15220 data
15221 structure
15222 with
15223 better
15224 worst
15225 case
15226 guarantees
15227 may
15228 be
15229 preferable23
15230 Uses
15231 Question
15232 book
15233 newsvg
15234 This
15235 section
15236 does
15237 not
15238 cite
15239 any
15240 references
15241 or
15242 sources
15243 Please
15244 help
15245 improve
15246 this
15247 section
15248 by
15249 adding
15250 citations
15251 to
15252 reliable
15253 sources
15254 Unsourced
15255 material
15256 may
15257 be
15258 challenged
15259 and
15260 removed
15261 July
15262 2013
15263 Associative
15264 arrays
15265 Hash
15266 tables
15267 are
15268 commonly
15269 used
15270 to
15271 implement
15272 many
15273 types
15274 of
15275 in
15276 memory
15277 tables
15278 They
15279 are
15280 used
15281 to
15282 implement
15283 associative
15284 arrays
15285 arrays
15286 whose
15287 indices
15288 are
15289 arbitrary
15290 strings
15291 or
15292 other
15293 complicated
15294 objects
15295 especially
15296 in
15297 interpreted
15298 programming
15299 languages
15300 like
15301 Ruby
15302 Python
15303 and
15304 PHP
15305 When
15306 storing
15307 a
15308 new
15309 item
15310 into
15311 a
15312 multimap
15313 and
15314 a
15315 hash
15316 collision
15317 occurs
15318 the
15319 multimap
15320 unconditionally
15321 stores
15322 both
15323 items
15324 When
15325 storing
15326 a
15327 new
15328 item
15329 into
15330 a
15331 typical
15332 associative
15333 array
15334 and
15335 a
15336 hash
15337 collision
15338 occurs
15339 but
15340 the
15341 actual
15342 keys
15343 themselves
15344 are
15345 different
15346 the
15347 associative
15348 array
15349 likewise
15350 stores
15351 both
15352 items
15353 However
15354 if
15355 the
15356 key
15357 of
15358 the
15359 new
15360 item
15361 exactly
15362 matches
15363 the
15364 key
15365 of
15366 an
15367 old
15368 item
15369 the
15370 associative
15371 array
15372 typically
15373 erases
15374 the
15375 old
15376 item
15377 and
15378 overwrites
15379 it
15380 with
15381 the
15382 new
15383 item
15384 so
15385 every
15386 item
15387 in
15388 the
15389 table
15390 has
15391 a
15392 unique
15393 key
15394 Database
15395 indexing
15396 Hash
15397 tables
15398 may
15399 also
15400 be
15401 used
15402 as
15403 disk
15404 based
15405 data
15406 structures
15407 and
15408 database
15409 indices
15410 such
15411 as
15412 in
15413 dbm
15414 although
15415 B
15416 trees
15417 are
15418 more
15419 popular
15420 in
15421 these
15422 applications
15423 Caches
15424 Hash
15425 tables
15426 can
15427 be
15428 used
15429 to
15430 implement
15431 caches
15432 auxiliary
15433 data
15434 tables
15435 that
15436 are
15437 used
15438 to
15439 speed
15440 up
15441 the
15442 access
15443 to
15444 data
15445 that
15446 is
15447 primarily
15448 stored
15449 in
15450 slower
15451 media
15452 In
15453 this
15454 application
15455 hash
15456 collisions
15457 can
15458 be
15459 handled
15460 by
15461 discarding
15462 one
15463 of
15464 the
15465 two
15466 colliding
15467 entries
15468 usually
15469 erasing
15470 the
15471 old
15472 item
15473 that
15474 is
15475 currently
15476 stored
15477 in
15478 the
15479 table
15480 and
15481 overwriting
15482 it
15483 with
15484 the
15485 new
15486 item
15487 so
15488 every
15489 item
15490 in
15491 the
15492 table
15493 has
15494 a
15495 unique
15496 hash
15497 value
15498 Sets
15499 Besides
15500 recovering
15501 the
15502 entry
15503 that
15504 has
15505 a
15506 given
15507 key
15508 many
15509 hash
15510 table
15511 implementations
15512 can
15513 also
15514 tell
15515 whether
15516 such
15517 an
15518 entry
15519 exists
15520 or
15521 not
15522 Those
15523 structures
15524 can
15525 therefore
15526 be
15527 used
15528 to
15529 implement
15530 a
15531 set
15532 data
15533 structure
15534 which
15535 merely
15536 records
15537 whether
15538 a
15539 given
15540 key
15541 belongs
15542 to
15543 a
15544 specified
15545 set
15546 of
15547 keys
15548 In
15549 this
15550 case
15551 the
15552 structure
15553 can
15554 be
15555 simplified
15556 by
15557 eliminating
15558 all
15559 parts
15560 that
15561 have
15562 to
15563 do
15564 with
15565 the
15566 entry
15567 values
15568 Hashing
15569 can
15570 be
15571 used
15572 to
15573 implement
15574 both
15575 static
15576 and
15577 dynamic
15578 sets
15579 Object
15580 representation
15581 Several
15582 dynamic
15583 languages
15584 such
15585 as
15586 Perl
15587 Python
15588 JavaScript
15589 and
15590 Ruby
15591 use
15592 hash
15593 tables
15594 to
15595 implement
15596 objects
15597 In
15598 this
15599 representation
15600 the
15601 keys
15602 are
15603 the
15604 names
15605 of
15606 the
15607 members
15608 and
15609 methods
15610 of
15611 the
15612 object
15613 and
15614 the
15615 values
15616 are
15617 pointers
15618 to
15619 the
15620 corresponding
15621 member
15622 or
15623 method
15624 Unique
15625 data
15626 representation
15627 Hash
15628 tables
15629 can
15630 be
15631 used
15632 by
15633 some
15634 programs
15635 to
15636 avoid
15637 creating
15638 multiple
15639 character
15640 strings
15641 with
15642 the
15643 same
15644 contents
15645 For
15646 that
15647 purpose
15648 all
15649 strings
15650 in
15651 use
15652 by
15653 the
15654 program
15655 are
15656 stored
15657 in
15658 a
15659 single
15660 string
15661 pool
15662 implemented
15663 as
15664 a
15665 hash
15666 table
15667 which
15668 is
15669 checked
15670 whenever
15671 a
15672 new
15673 string
15674 has
15675 to
15676 be
15677 created
15678 This
15679 technique
15680 was
15681 introduced
15682 in
15683 Lisp
15684 interpreters
15685 under
15686 the
15687 name
15688 hash
15689 consing
15690 and
15691 can
15692 be
15693 used
15694 with
15695 many
15696 other
15697 kinds
15698 of
15699 data
15700 expression
15701 trees
15702 in
15703 a
15704 symbolic
15705 algebra
15706 system
15707 records
15708 in
15709 a
15710 database
15711 files
15712 in
15713 a
15714 file
15715 system
15716 binary
15717 decision
15718 diagrams
15719 etc
15720 String
15721 interning
15722 Main
15723 article
15724 String
15725 interning
15726 Implementations
15727 In
15728 programming
15729 languages
15730 Many
15731 programming
15732 languages
15733 provide
15734 hash
15735 table
15736 functionality
15737 either
15738 as
15739 built
15740 in
15741 associative
15742 arrays
15743 or
15744 as
15745 standard
15746 library
15747 modules
15748 In
15749 C
15750 11
15751 for
15752 example
15753 the
15754 unordered
15755 map
15756 class
15757 provides
15758 hash
15759 tables
15760 for
15761 keys
15762 and
15763 values
15764 of
15765 arbitrary
15766 type
15767 In
15768 PHP
15769 5
15770 the
15771 Zend
15772 2
15773 engine
15774 uses
15775 one
15776 of
15777 the
15778 hash
15779 functions
15780 from
15781 Daniel
15782 J
15783 Bernstein
15784 to
15785 generate
15786 the
15787 hash
15788 values
15789 used
15790 in
15791 managing
15792 the
15793 mappings
15794 of
15795 data
15796 pointers
15797 stored
15798 in
15799 a
15800 hash
15801 table
15802 In
15803 the
15804 PHP
15805 source
15806 code
15807 it
15808 is
15809 labelled
15810 as
15811 DJBX33A
15812 Daniel
15813 J
15814 Bernstein
15815 Times
15816 33
15817 with
15818 Addition
15819 Pythons
15820 built
15821 in
15822 hash
15823 table
15824 implementation
15825 in
15826 the
15827 form
15828 of
15829 the
15830 dict
15831 type
15832 as
15833 well
15834 as
15835 Perls
15836 hash
15837 type
15838 are
15839 used
15840 internally
15841 to
15842 implement
15843 namespaces
15844 and
15845 therefore
15846 need
15847 to
15848 pay
15849 more
15850 attention
15851 to
15852 security
15853 ie
15854 collision
15855 attacks
15856 In
15857 the
15858 NET
15859 Framework
15860 support
15861 for
15862 hash
15863 tables
15864 is
15865 provided
15866 via
15867 the
15868 non
15869 generic
15870 Hashtable
15871 and
15872 generic
15873 Dictionary
15874 classes
15875 which
15876 store
15877 key
15878 value
15879 pairs
15880 and
15881 the
15882 generic
15883 HashSet
15884 class
15885 which
15886 stores
15887 only
15888 values
15889 Independent
15890 packages
15891 SparseHash
15892 formerly
15893 Google
15894 SparseHash
15895 An
15896 extremely
15897 memory
15898 efficient
15899 hash
15900 map
15901 implementation
15902 with
15903 only
15904 2
15905 bits
15906 entry
15907 of
15908 overhead
15909 The
15910 SparseHash
15911 library
15912 has
15913 several
15914 C
15915 hash
15916 map
15917 implementations
15918 with
15919 different
15920 performance
15921 characteristics
15922 including
15923 one
15924 that
15925 optimizes
15926 for
15927 memory
15928 use
15929 and
15930 another
15931 that
15932 optimizes
15933 for
15934 speed
15935 Sunrise
15936 DD
15937 An
15938 open
15939 source
15940 C
15941 library
15942 for
15943 hash
15944 table
15945 storage
15946 of
15947 arbitrary
15948 data
15949 objects
15950 with
15951 lock
15952 free
15953 lookups
15954 built
15955 in
15956 reference
15957 counting
15958 and
15959 guaranteed
15960 order
15961 iteration
15962 The
15963 library
15964 can
15965 participate
15966 in
15967 external
15968 reference
15969 counting
15970 systems
15971 or
15972 use
15973 its
15974 own
15975 built
15976 in
15977 reference
15978 counting
15979 It
15980 comes
15981 with
15982 a
15983 variety
15984 of
15985 hash
15986 functions
15987 and
15988 allows
15989 the
15990 use
15991 of
15992 runtime
15993 supplied
15994 hash
15995 functions
15996 via
15997 callback
15998 mechanism
15999 Source
16000 code
16001 is
16002 well
16003 documented
16004 uthash
16005 This
16006 is
16007 an
16008 easy
16009 to
16010 use
16011 hash
16012 table
16013 for
16014 C
16015 structures
16016 History
16017 The
16018 idea
16019 of
16020 hashing
16021 arose
16022 independently
16023 in
16024 different
16025 places
16026 In
16027 January
16028 1953
16029 H
16030 P
16031 Luhn
16032 wrote
16033 an
16034 internal
16035 IBM
16036 memorandum
16037 that
16038 used
16039 hashing
16040 with
16041 chaining24
16042 G
16043 N
16044 Amdahl
16045 E
16046 M
16047 Boehme
16048 N
16049 Rochester
16050 and
16051 Arthur
16052 Samuel
16053 implemented
16054 a
16055 program
16056 using
16057 hashing
16058 at
16059 about
16060 the
16061 same
16062 time
16063 Open
16064 addressing
16065 with
16066 linear
16067 probing
16068 relatively
16069 prime
16070 stepping
16071 is
16072 cr
16073 ed
16074 to
16075 Amdahl
16076 but
16077 Ershov
16078 in
16079 Russia
16080 had
16081 the
16082 same
16083 idea24
16084 See
16085 also
16086 Rabin
16087 Karp
16088 string
16089 search
16090 algorithm
16091 Stable
16092 hashing
16093 Consistent
16094 hashing
16095 Extendible
16096 hashing
16097 Lazy
16098 deletion
16099 Pearson
16100 hashing
16101 Related
16102 data
16103 structures
16104 There
16105 are
16106 several
16107 data
16108 structures
16109 that
16110 use
16111 hash
16112 functions
16113 but
16114 cannot
16115 be
16116 considered
16117 special
16118 cases
16119 of
16120 hash
16121 tables
16122 Bloom
16123 filter
16124 memory
16125 efficient
16126 data
16127 structure
16128 designed
16129 for
16130 constant
16131 time
16132 approximate
16133 lookups
16134 uses
16135 hash
16136 functions
16137 and
16138 can
16139 be
16140 seen
16141 as
16142 an
16143 approximate
16144 hash
16145 table
16146 Distributed
16147 hash
16148 table
16149 DHT
16150 a
16151 resilient
16152 dynamic
16153 table
16154 spread
16155 over
16156 several
16157 nodes
16158 of
16159 a
16160 network
16161 Hash
16162 array
16163 mapped
16164 trie
16165 a
16166 trie
16167 structure
16168 similar
16169 to
16170 the
16171 array
16172 mapped
16173 trie
16174 but
16175 where
16176 each
16177 key
16178 is
16179 hashed
16180 first
16181 A
16182 red
16183 black
16184 tree
16185 is
16186 a
16187 data
16188 structure
16189 which
16190 is
16191 a
16192 type
16193 of
16194 self
16195 balancing
16196 binary
16197 search
16198 tree
16199 Balance
16200 is
16201 preserved
16202 by
16203 painting
16204 each
16205 node
16206 of
16207 the
16208 tree
16209 with
16210 one
16211 of
16212 two
16213 colors
16214 typically
16215 called
16216 red
16217 and
16218 black
16219 in
16220 a
16221 way
16222 that
16223 satisfies
16224 certain
16225 properties
16226 which
16227 collectively
16228 constrain
16229 how
16230 unbalanced
16231 the
16232 tree
16233 can
16234 become
16235 in
16236 the
16237 worst
16238 case
16239 When
16240 the
16241 tree
16242 is
16243 modified
16244 the
16245 new
16246 tree
16247 is
16248 subsequently
16249 rearranged
16250 and
16251 repainted
16252 to
16253 restore
16254 the
16255 coloring
16256 properties
16257 The
16258 properties
16259 are
16260 designed
16261 in
16262 such
16263 a
16264 way
16265 that
16266 this
16267 rearranging
16268 and
16269 recoloring
16270 can
16271 be
16272 performed
16273 efficiently
16274 The
16275 balancing
16276 of
16277 the
16278 tree
16279 is
16280 not
16281 perfect
16282 but
16283 it
16284 is
16285 good
16286 enough
16287 to
16288 allow
16289 it
16290 to
16291 guarantee
16292 searching
16293 in
16294 O
16295 log
16296 n
16297 time
16298 where
16299 n
16300 is
16301 the
16302 total
16303 number
16304 of
16305 elements
16306 in
16307 the
16308 tree
16309 The
16310 insertion
16311 and
16312 deletion
16313 operations
16314 along
16315 with
16316 the
16317 tree
16318 rearrangement
16319 and
16320 recoloring
16321 are
16322 also
16323 performed
16324 in
16325 O
16326 log
16327 n
16328 time
16329 1
16330 Tracking
16331 the
16332 color
16333 of
16334 each
16335 node
16336 requires
16337 only
16338 1
16339 bit
16340 of
16341 information
16342 per
16343 node
16344 because
16345 there
16346 are
16347 only
16348 two
16349 colors
16350 The
16351 tree
16352 does
16353 not
16354 contain
16355 any
16356 other
16357 data
16358 specific
16359 to
16360 its
16361 being
16362 a
16363 red
16364 black
16365 tree
16366 so
16367 its
16368 memory
16369 footprint
16370 is
16371 almost
16372 identical
16373 to
16374 a
16375 classic
16376 uncolored
16377 binary
16378 search
16379 tree
16380 In
16381 many
16382 cases
16383 the
16384 additional
16385 bit
16386 of
16387 information
16388 can
16389 be
16390 stored
16391 at
16392 no
16393 additional
16394 memory
16395 cost
16396 The
16397 original
16398 data
16399 structure
16400 was
16401 invented
16402 in
16403 1972
16404 by
16405 Rudolf
16406 Bayer
16407 2
16408 and
16409 named
16410 symmetric
16411 binary
16412 B
16413 tree
16414 but
16415 acquired
16416 its
16417 modern
16418 name
16419 in
16420 a
16421 paper
16422 in
16423 1978
16424 by
16425 Leonidas
16426 J
16427 Guibas
16428 and
16429 Robert
16430 Sedgewick
16431 entitled
16432 A
16433 Dichromatic
16434 Framework
16435 for
16436 Balanced
16437 Trees
16438 3
16439 The
16440 color
16441 red
16442 was
16443 chosen
16444 because
16445 it
16446 was
16447 the
16448 best
16449 looking
16450 color
16451 produced
16452 by
16453 the
16454 color
16455 laser
16456 printer
16457 available
16458 to
16459 the
16460 authors
16461 while
16462 working
16463 at
16464 Xerox
16465 PARC
16466 4
16467 Terminology
16468 A
16469 red
16470 black
16471 tree
16472 is
16473 a
16474 special
16475 type
16476 of
16477 binary
16478 tree
16479 used
16480 in
16481 computer
16482 science
16483 to
16484 organize
16485 pieces
16486 of
16487 comparable
16488 data
16489 such
16490 as
16491 text
16492 fragments
16493 or
16494 numbers
16495 The
16496 leaf
16497 nodes
16498 of
16499 red
16500 black
16501 trees
16502 do
16503 not
16504 contain
16505 data
16506 These
16507 leaves
16508 need
16509 not
16510 be
16511 explicit
16512 in
16513 computer
16514 memory—a
16515 null
16516 child
16517 pointer
16518 can
16519 encode
16520 the
16521 fact
16522 that
16523 this
16524 child
16525 is
16526 a
16527 leaf—but
16528 it
16529 simplifies
16530 some
16531 algorithms
16532 for
16533 operating
16534 on
16535 red
16536 black
16537 trees
16538 if
16539 the
16540 leaves
16541 really
16542 are
16543 explicit
16544 nodes
16545 To
16546 save
16547 memory
16548 sometimes
16549 a
16550 single
16551 sentinel
16552 node
16553 performs
16554 the
16555 role
16556 of
16557 all
16558 leaf
16559 nodes
16560 all
16561 references
16562 from
16563 internal
16564 nodes
16565 to
16566 leaf
16567 nodes
16568 then
16569 point
16570 to
16571 the
16572 sentinel
16573 node
16574 Red
16575 black
16576 trees
16577 like
16578 all
16579 binary
16580 search
16581 trees
16582 allow
16583 efficient
16584 in
16585 order
16586 traversal
16587 that
16588 is
16589 in
16590 the
16591 order
16592 Left
16593 Root
16594 Right
16595 of
16596 their
16597 elements
16598 The
16599 search
16600 time
16601 results
16602 from
16603 the
16604 traversal
16605 from
16606 root
16607 to
16608 leaf
16609 and
16610 therefore
16611 a
16612 balanced
16613 tree
16614 of
16615 n
16616 nodes
16617 having
16618 the
16619 least
16620 possible
16621 tree
16622 height
16623 results
16624 in
16625 O
16626 log
16627 n
16628 search
16629 time
16630 Properties
16631 Diagram
16632 of
16633 binary
16634 tree
16635 The
16636 black
16637 root
16638 node
16639 has
16640 two
16641 red
16642 children
16643 and
16644 four
16645 black
16646 grandchildren
16647 The
16648 child
16649 nodes
16650 of
16651 the
16652 grandchildren
16653 are
16654 black
16655 nil
16656 pointers
16657 or
16658 red
16659 nodes
16660 with
16661 black
16662 nil
16663 pointers
16664 An
16665 example
16666 of
16667 a
16668 red
16669 black
16670 tree
16671 In
16672 addition
16673 to
16674 the
16675 requirements
16676 imposed
16677 on
16678 a
16679 binary
16680 search
16681 tree
16682 the
16683 following
16684 must
16685 be
16686 satisfied
16687 by
16688 a
16689 red
16690 black
16691 tree
16692 5
16693 A
16694 node
16695 is
16696 either
16697 red
16698 or
16699 black
16700 The
16701 root
16702 is
16703 black
16704 This
16705 rule
16706 is
16707 sometimes
16708 omitted
16709 Since
16710 the
16711 root
16712 can
16713 always
16714 be
16715 changed
16716 from
16717 red
16718 to
16719 black
16720 but
16721 not
16722 necessarily
16723 vice
16724 versa
16725 this
16726 rule
16727 has
16728 little
16729 effect
16730 on
16731 analysis
16732 All
16733 leaves
16734 NIL
16735 are
16736 black
16737 All
16738 leaves
16739 are
16740 same
16741 color
16742 as
16743 the
16744 root
16745 Every
16746 red
16747 node
16748 must
16749 have
16750 two
16751 black
16752 child
16753 nodes
16754 Every
16755 path
16756 from
16757 a
16758 given
16759 node
16760 to
16761 any
16762 of
16763 its
16764 descendant
16765 leaves
16766 contains
16767 the
16768 same
16769 number
16770 of
16771 black
16772 nodes
16773 These
16774 constraints
16775 enforce
16776 a
16777 critical
16778 property
16779 of
16780 red
16781 black
16782 trees
16783 that
16784 the
16785 path
16786 from
16787 the
16788 root
16789 to
16790 the
16791 furthest
16792 leaf
16793 is
16794 no
16795 more
16796 than
16797 twice
16798 as
16799 long
16800 as
16801 the
16802 path
16803 from
16804 the
16805 root
16806 to
16807 the
16808 nearest
16809 leaf
16810 The
16811 result
16812 is
16813 that
16814 the
16815 tree
16816 is
16817 roughly
16818 height
16819 balanced
16820 Since
16821 operations
16822 such
16823 as
16824 inserting
16825 deleting
16826 and
16827 finding
16828 values
16829 require
16830 worst
16831 case
16832 time
16833 proportional
16834 to
16835 the
16836 height
16837 of
16838 the
16839 tree
16840 this
16841 theoretical
16842 upper
16843 bound
16844 on
16845 the
16846 height
16847 allows
16848 red
16849 black
16850 trees
16851 to
16852 be
16853 efficient
16854 in
16855 the
16856 worst
16857 case
16858 unlike
16859 ordinary
16860 binary
16861 search
16862 trees
16863 To
16864 see
16865 why
16866 this
16867 is
16868 guaranteed
16869 it
16870 suffices
16871 to
16872 consider
16873 the
16874 effect
16875 of
16876 properties
16877 4
16878 and
16879 5
16880 together
16881 For
16882 a
16883 red
16884 black
16885 tree
16886 T
16887 let
16888 B
16889 be
16890 the
16891 number
16892 of
16893 black
16894 nodes
16895 in
16896 property
16897 5
16898 Let
16899 the
16900 shortest
16901 possible
16902 path
16903 from
16904 the
16905 root
16906 of
16907 T
16908 to
16909 any
16910 leaf
16911 consist
16912 of
16913 B
16914 black
16915 nodes
16916 Longer
16917 possible
16918 paths
16919 may
16920 be
16921 constructed
16922 by
16923 inserting
16924 red
16925 nodes
16926 However
16927 property
16928 4
16929 makes
16930 it
16931 impossible
16932 to
16933 insert
16934 more
16935 than
16936 one
16937 consecutive
16938 red
16939 node
16940 Therefore
16941 the
16942 longest
16943 possible
16944 path
16945 consists
16946 of
16947 2B
16948 nodes
16949 alternating
16950 black
16951 and
16952 red
16953 The
16954 shortest
16955 possible
16956 path
16957 has
16958 all
16959 black
16960 nodes
16961 and
16962 the
16963 longest
16964 possible
16965 path
16966 alternates
16967 between
16968 red
16969 and
16970 black
16971 nodes
16972 Since
16973 all
16974 maximal
16975 paths
16976 have
16977 the
16978 same
16979 number
16980 of
16981 black
16982 nodes
16983 by
16984 property
16985 5
16986 this
16987 shows
16988 that
16989 no
16990 path
16991 is
16992 more
16993 than
16994 twice
16995 as
16996 long
16997 as
16998 any
16999 other
17000 path
17001 Analogy
17002 to
17003 B
17004 trees
17005 of
17006 order
17007 4
17008 The
17009 same
17010 red
17011 black
17012 tree
17013 as
17014 in
17015 the
17016 example
17017 above
17018 seen
17019 as
17020 a
17021 B
17022 tree
17023 A
17024 red
17025 black
17026 tree
17027 is
17028 similar
17029 in
17030 structure
17031 to
17032 a
17033 B
17034 tree
17035 of
17036 order
17037 note
17038 1
17039 4
17040 where
17041 each
17042 node
17043 can
17044 contain
17045 between
17046 1
17047 and
17048 3
17049 values
17050 and
17051 accordingly
17052 between
17053 2
17054 and
17055 4
17056 child
17057 pointers
17058 In
17059 such
17060 a
17061 B
17062 tree
17063 each
17064 node
17065 will
17066 contain
17067 only
17068 one
17069 value
17070 matching
17071 the
17072 value
17073 in
17074 a
17075 black
17076 node
17077 of
17078 the
17079 red
17080 black
17081 tree
17082 with
17083 an
17084 optional
17085 value
17086 before
17087 and
17088 or
17089 after
17090 it
17091 in
17092 the
17093 same
17094 node
17095 both
17096 matching
17097 an
17098 equivalent
17099 red
17100 node
17101 of
17102 the
17103 red
17104 black
17105 tree
17106 One
17107 way
17108 to
17109 see
17110 this
17111 equivalence
17112 is
17113 to
17114 move
17115 up
17116 the
17117 red
17118 nodes
17119 in
17120 a
17121 graphical
17122 representation
17123 of
17124 the
17125 red
17126 black
17127 tree
17128 so
17129 that
17130 they
17131 align
17132 horizontally
17133 with
17134 their
17135 parent
17136 black
17137 node
17138 by
17139 creating
17140 together
17141 a
17142 horizontal
17143 cluster
17144 In
17145 the
17146 B
17147 tree
17148 or
17149 in
17150 the
17151 modified
17152 graphical
17153 representation
17154 of
17155 the
17156 red
17157 black
17158 tree
17159 all
17160 leaf
17161 nodes
17162 are
17163 at
17164 the
17165 same
17166 depth
17167 The
17168 red
17169 black
17170 tree
17171 is
17172 then
17173 structurally
17174 equivalent
17175 to
17176 a
17177 B
17178 tree
17179 of
17180 order
17181 4
17182 with
17183 a
17184 minimum
17185 fill
17186 factor
17187 of
17188 33
17189 of
17190 values
17191 per
17192 cluster
17193 with
17194 a
17195 maximum
17196 capacity
17197 of
17198 3
17199 values
17200 This
17201 B
17202 tree
17203 type
17204 is
17205 still
17206 more
17207 general
17208 than
17209 a
17210 red
17211 black
17212 tree
17213 though
17214 as
17215 it
17216 allows
17217 ambiguity
17218 in
17219 a
17220 red
17221 black
17222 tree
17223 conversion—multiple
17224 red
17225 black
17226 trees
17227 can
17228 be
17229 produced
17230 from
17231 an
17232 equivalent
17233 B
17234 tree
17235 of
17236 order
17237 4
17238 If
17239 a
17240 B
17241 tree
17242 cluster
17243 contains
17244 only
17245 1
17246 value
17247 it
17248 is
17249 the
17250 minimum
17251 black
17252 and
17253 has
17254 two
17255 child
17256 pointers
17257 If
17258 a
17259 cluster
17260 contains
17261 3
17262 values
17263 then
17264 the
17265 central
17266 value
17267 will
17268 be
17269 black
17270 and
17271 each
17272 value
17273 stored
17274 on
17275 its
17276 sides
17277 will
17278 be
17279 red
17280 If
17281 the
17282 cluster
17283 contains
17284 two
17285 values
17286 however
17287 either
17288 one
17289 can
17290 become
17291 the
17292 black
17293 node
17294 in
17295 the
17296 red
17297 black
17298 tree
17299 and
17300 the
17301 other
17302 one
17303 will
17304 be
17305 red
17306 So
17307 the
17308 order
17309 4
17310 B
17311 tree
17312 does
17313 not
17314 maintain
17315 which
17316 of
17317 the
17318 values
17319 contained
17320 in
17321 each
17322 cluster
17323 is
17324 the
17325 root
17326 black
17327 tree
17328 for
17329 the
17330 whole
17331 cluster
17332 and
17333 the
17334 parent
17335 of
17336 the
17337 other
17338 values
17339 in
17340 the
17341 same
17342 cluster
17343 Despite
17344 this
17345 the
17346 operations
17347 on
17348 red
17349 black
17350 trees
17351 are
17352 more
17353 economical
17354 in
17355 time
17356 because
17357 you
17358 don
17359 t
17360 have
17361 to
17362 maintain
17363 the
17364 vector
17365 of
17366 values
17367 It
17368 may
17369 be
17370 costly
17371 if
17372 values
17373 are
17374 stored
17375 directly
17376 in
17377 each
17378 node
17379 rather
17380 than
17381 being
17382 stored
17383 by
17384 reference
17385 B
17386 tree
17387 nodes
17388 however
17389 are
17390 more
17391 economical
17392 in
17393 space
17394 because
17395 you
17396 don
17397 t
17398 need
17399 to
17400 store
17401 the
17402 color
17403 attribute
17404 for
17405 each
17406 node
17407 Instead
17408 you
17409 have
17410 to
17411 know
17412 which
17413 slot
17414 in
17415 the
17416 cluster
17417 vector
17418 is
17419 used
17420 If
17421 values
17422 are
17423 stored
17424 by
17425 reference
17426 e
17427 g
17428 objects
17429 null
17430 references
17431 can
17432 be
17433 used
17434 and
17435 so
17436 the
17437 cluster
17438 can
17439 be
17440 represented
17441 by
17442 a
17443 vector
17444 containing
17445 3
17446 slots
17447 for
17448 value
17449 pointers
17450 plus
17451 4
17452 slots
17453 for
17454 child
17455 references
17456 in
17457 the
17458 tree
17459 In
17460 that
17461 case
17462 the
17463 B
17464 tree
17465 can
17466 be
17467 more
17468 compact
17469 in
17470 memory
17471 improving
17472 data
17473 locality
17474 The
17475 same
17476 analogy
17477 can
17478 be
17479 made
17480 with
17481 B
17482 trees
17483 with
17484 larger
17485 orders
17486 that
17487 can
17488 be
17489 structurally
17490 equivalent
17491 to
17492 a
17493 colored
17494 binary
17495 tree
17496 you
17497 just
17498 need
17499 more
17500 colors
17501 Suppose
17502 that
17503 you
17504 add
17505 blue
17506 then
17507 the
17508 blue
17509 red
17510 black
17511 tree
17512 defined
17513 like
17514 red
17515 black
17516 trees
17517 but
17518 with
17519 the
17520 additional
17521 constraint
17522 that
17523 no
17524 two
17525 successive
17526 nodes
17527 in
17528 the
17529 hierarchy
17530 will
17531 be
17532 blue
17533 and
17534 all
17535 blue
17536 nodes
17537 will
17538 be
17539 children
17540 of
17541 a
17542 red
17543 node
17544 then
17545 it
17546 becomes
17547 equivalent
17548 to
17549 a
17550 B
17551 tree
17552 whose
17553 clusters
17554 will
17555 have
17556 at
17557 most
17558 7
17559 values
17560 in
17561 the
17562 following
17563 colors
17564 blue
17565 red
17566 blue
17567 black
17568 blue
17569 red
17570 blue
17571 For
17572 each
17573 cluster
17574 there
17575 will
17576 be
17577 at
17578 most
17579 1
17580 black
17581 node
17582 2
17583 red
17584 nodes
17585 and
17586 4
17587 blue
17588 nodes
17589 For
17590 moderate
17591 volumes
17592 of
17593 values
17594 insertions
17595 and
17596 deletions
17597 in
17598 a
17599 colored
17600 binary
17601 tree
17602 are
17603 faster
17604 compared
17605 to
17606 B
17607 trees
17608 because
17609 colored
17610 trees
17611 don
17612 t
17613 attempt
17614 to
17615 maximize
17616 the
17617 fill
17618 factor
17619 of
17620 each
17621 horizontal
17622 cluster
17623 of
17624 nodes
17625 only
17626 the
17627 minimum
17628 fill
17629 factor
17630 is
17631 guaranteed
17632 in
17633 colored
17634 binary
17635 trees
17636 limiting
17637 the
17638 number
17639 of
17640 splits
17641 or
17642 junctions
17643 of
17644 clusters
17645 B
17646 trees
17647 will
17648 be
17649 faster
17650 for
17651 performing
17652 rotations
17653 because
17654 rotations
17655 will
17656 frequently
17657 occur
17658 within
17659 the
17660 same
17661 cluster
17662 rather
17663 than
17664 with
17665 multiple
17666 separate
17667 nodes
17668 in
17669 a
17670 colored
17671 binary
17672 tree
17673 However
17674 for
17675 storing
17676 large
17677 volumes
17678 B
17679 trees
17680 will
17681 be
17682 much
17683 faster
17684 as
17685 they
17686 will
17687 be
17688 more
17689 compact
17690 by
17691 grouping
17692 several
17693 children
17694 in
17695 the
17696 same
17697 cluster
17698 where
17699 they
17700 can
17701 be
17702 accessed
17703 locally
17704 All
17705 optimizations
17706 possible
17707 in
17708 B
17709 trees
17710 to
17711 increase
17712 the
17713 average
17714 fill
17715 factors
17716 of
17717 clusters
17718 are
17719 possible
17720 in
17721 the
17722 equivalent
17723 multicolored
17724 binary
17725 tree
17726 Notably
17727 maximizing
17728 the
17729 average
17730 fill
17731 factor
17732 in
17733 a
17734 structurally
17735 equivalent
17736 B
17737 tree
17738 is
17739 the
17740 same
17741 as
17742 reducing
17743 the
17744 total
17745 height
17746 of
17747 the
17748 multicolored
17749 tree
17750 by
17751 increasing
17752 the
17753 number
17754 of
17755 non
17756 black
17757 nodes
17758 The
17759 worst
17760 case
17761 occurs
17762 when
17763 all
17764 nodes
17765 in
17766 a
17767 colored
17768 binary
17769 tree
17770 are
17771 black
17772 the
17773 best
17774 case
17775 occurs
17776 when
17777 only
17778 a
17779 third
17780 of
17781 them
17782 are
17783 black
17784 and
17785 the
17786 other
17787 two
17788 thirds
17789 are
17790 red
17791 nodes
17792 Notes
17793 Jump
17794 up
17795 Using
17796 Knuth
17797 s
17798 definition
17799 of
17800 order
17801 the
17802 maximum
17803 number
17804 of
17805 children
17806 Applications
17807 and
17808 related
17809 data
17810 structures
17811 Red
17812 black
17813 trees
17814 offer
17815 worst
17816 case
17817 guarantees
17818 for
17819 insertion
17820 time
17821 deletion
17822 time
17823 and
17824 search
17825 time
17826 Not
17827 only
17828 does
17829 this
17830 make
17831 them
17832 valuable
17833 in
17834 time
17835 sensitive
17836 applications
17837 such
17838 as
17839 real
17840 time
17841 applications
17842 but
17843 it
17844 makes
17845 them
17846 valuable
17847 building
17848 blocks
17849 in
17850 other
17851 data
17852 structures
17853 which
17854 provide
17855 worst
17856 case
17857 guarantees
17858 for
17859 example
17860 many
17861 data
17862 structures
17863 used
17864 in
17865 computational
17866 geometry
17867 can
17868 be
17869 based
17870 on
17871 red
17872 black
17873 trees
17874 and
17875 the
17876 Completely
17877 Fair
17878 Scheduler
17879 used
17880 in
17881 current
17882 Linux
17883 kernels
17884 uses
17885 red
17886 black
17887 trees
17888 The
17889 AVL
17890 tree
17891 is
17892 another
17893 structure
17894 supporting
17895 O
17896 log
17897 n
17898 search
17899 insertion
17900 and
17901 removal
17902 It
17903 is
17904 more
17905 rigidly
17906 balanced
17907 than
17908 red
17909 black
17910 trees
17911 leading
17912 to
17913 slower
17914 insertion
17915 and
17916 removal
17917 but
17918 faster
17919 retrieval
17920 This
17921 makes
17922 it
17923 attractive
17924 for
17925 data
17926 structures
17927 that
17928 may
17929 be
17930 built
17931 once
17932 and
17933 loaded
17934 without
17935 reconstruction
17936 such
17937 as
17938 language
17939 dictionaries
17940 or
17941 program
17942 dictionaries
17943 such
17944 as
17945 the
17946 opcodes
17947 of
17948 an
17949 assembler
17950 or
17951 interpreter
17952 Red
17953 black
17954 trees
17955 are
17956 also
17957 particularly
17958 valuable
17959 in
17960 functional
17961 programming
17962 where
17963 they
17964 are
17965 one
17966 of
17967 the
17968 most
17969 common
17970 persistent
17971 data
17972 structures
17973 used
17974 to
17975 construct
17976 associative
17977 arrays
17978 and
17979 sets
17980 which
17981 can
17982 retain
17983 previous
17984 versions
17985 after
17986 mutations
17987 The
17988 persistent
17989 version
17990 of
17991 red
17992 black
17993 trees
17994 requires
17995 O
17996 log
17997 n
17998 space
17999 for
18000 each
18001 insertion
18002 or
18003 deletion
18004 in
18005 addition
18006 to
18007 time
18008 For
18009 every
18010 2
18011 4
18012 tree
18013 there
18014 are
18015 corresponding
18016 red
18017 black
18018 trees
18019 with
18020 data
18021 elements
18022 in
18023 the
18024 same
18025 order
18026 The
18027 insertion
18028 and
18029 deletion
18030 operations
18031 on
18032 2
18033 4
18034 trees
18035 are
18036 also
18037 equivalent
18038 to
18039 color
18040 flipping
18041 and
18042 rotations
18043 in
18044 red
18045 black
18046 trees
18047 This
18048 makes
18049 2
18050 4
18051 trees
18052 an
18053 important
18054 tool
18055 for
18056 understanding
18057 the
18058 logic
18059 behind
18060 red
18061 black
18062 trees
18063 and
18064 this
18065 is
18066 why
18067 many
18068 introductory
18069 algorithm
18070 texts
18071 introduce
18072 2
18073 4
18074 trees
18075 just
18076 before
18077 red
18078 black
18079 trees
18080 even
18081 though
18082 2
18083 4
18084 trees
18085 are
18086 not
18087 often
18088 used
18089 in
18090 practice
18091 In
18092 2008
18093 Sedgewick
18094 introduced
18095 a
18096 simpler
18097 version
18098 of
18099 the
18100 red
18101 black
18102 tree
18103 called
18104 the
18105 left
18106 leaning
18107 red
18108 black
18109 tree
18110 6
18111 by
18112 eliminating
18113 a
18114 previously
18115 unspecified
18116 degree
18117 of
18118 freedom
18119 in
18120 the
18121 implementation
18122 The
18123 LLRB
18124 maintains
18125 an
18126 additional
18127 invariant
18128 that
18129 all
18130 red
18131 links
18132 must
18133 lean
18134 left
18135 except
18136 during
18137 inserts
18138 and
18139 deletes
18140 Red
18141 black
18142 trees
18143 can
18144 be
18145 made
18146 isometric
18147 to
18148 either
18149 2
18150 3
18151 trees
18152 7
18153 or
18154 2
18155 4
18156 trees
18157 6
18158 for
18159 any
18160 sequence
18161 of
18162 operations
18163 The
18164 2
18165 4
18166 tree
18167 isometry
18168 was
18169 described
18170 in
18171 1978
18172 by
18173 Sedgewick
18174 this
18175 quote
18176 needs
18177 a
18178 citation
18179 With
18180 2
18181 4
18182 trees
18183 the
18184 isometry
18185 is
18186 resolved
18187 by
18188 a
18189 color
18190 flip
18191 corresponding
18192 to
18193 a
18194 split
18195 in
18196 which
18197 the
18198 red
18199 color
18200 of
18201 two
18202 children
18203 nodes
18204 leaves
18205 the
18206 children
18207 and
18208 moves
18209 to
18210 the
18211 parent
18212 node
18213 The
18214 tango
18215 tree
18216 a
18217 type
18218 of
18219 tree
18220 optimized
18221 for
18222 fast
18223 searches
18224 usually
18225 when
18226 uses
18227 red
18228 black
18229 trees
18230 as
18231 part
18232 of
18233 its
18234 data
18235 structure
18236 Operations
18237 Read
18238 only
18239 operations
18240 on
18241 a
18242 red
18243 black
18244 tree
18245 require
18246 no
18247 modification
18248 from
18249 those
18250 used
18251 for
18252 binary
18253 search
18254 trees
18255 because
18256 every
18257 red
18258 black
18259 tree
18260 is
18261 a
18262 special
18263 case
18264 of
18265 a
18266 simple
18267 binary
18268 search
18269 tree
18270 However
18271 the
18272 immediate
18273 result
18274 of
18275 an
18276 insertion
18277 or
18278 removal
18279 may
18280 violate
18281 the
18282 properties
18283 of
18284 a
18285 red
18286 black
18287 tree
18288 Restoring
18289 the
18290 red
18291 black
18292 properties
18293 requires
18294 a
18295 small
18296 number
18297 O
18298 log
18299 n
18300 or
18301 amortized
18302 O
18303 1
18304 of
18305 color
18306 changes
18307 which
18308 are
18309 very
18310 quick
18311 in
18312 practice
18313 and
18314 no
18315 more
18316 than
18317 three
18318 tree
18319 rotations
18320 two
18321 for
18322 insertion
18323 Although
18324 insert
18325 and
18326 delete
18327 operations
18328 are
18329 complicated
18330 their
18331 times
18332 remain
18333 O
18334 log
18335 n
18336 Insertion
18337 Insertion
18338 begins
18339 by
18340 adding
18341 the
18342 node
18343 as
18344 any
18345 binary
18346 search
18347 tree
18348 insertion
18349 does
18350 and
18351 by
18352 coloring
18353 it
18354 red
18355 Whereas
18356 in
18357 the
18358 binary
18359 search
18360 tree
18361 we
18362 always
18363 add
18364 a
18365 leaf
18366 in
18367 the
18368 red
18369 black
18370 tree
18371 leaves
18372 contain
18373 no
18374 information
18375 so
18376 instead
18377 we
18378 add
18379 a
18380 red
18381 interior
18382 node
18383 with
18384 two
18385 black
18386 leaves
18387 in
18388 place
18389 of
18390 an
18391 existing
18392 black
18393 leaf
18394 What
18395 happens
18396 next
18397 depends
18398 on
18399 the
18400 color
18401 of
18402 other
18403 nearby
18404 nodes
18405 The
18406 term
18407 uncle
18408 node
18409 will
18410 be
18411 used
18412 to
18413 refer
18414 to
18415 the
18416 sibling
18417 of
18418 a
18419 node
18420 s
18421 parent
18422 as
18423 in
18424 human
18425 family
18426 trees
18427 Note
18428 that
18429 property
18430 3
18431 all
18432 leaves
18433 are
18434 black
18435 always
18436 holds
18437 property
18438 4
18439 both
18440 children
18441 of
18442 every
18443 red
18444 node
18445 are
18446 black
18447 is
18448 threatened
18449 only
18450 by
18451 adding
18452 a
18453 red
18454 node
18455 repainting
18456 a
18457 black
18458 node
18459 red
18460 or
18461 a
18462 rotation
18463 property
18464 5
18465 all
18466 paths
18467 from
18468 any
18469 given
18470 node
18471 to
18472 its
18473 leaf
18474 nodes
18475 contain
18476 the
18477 same
18478 number
18479 of
18480 black
18481 nodes
18482 is
18483 threatened
18484 only
18485 by
18486 adding
18487 a
18488 black
18489 node
18490 repainting
18491 a
18492 red
18493 node
18494 black
18495 or
18496 vice
18497 versa
18498 or
18499 a
18500 rotation
18501 Note
18502 The
18503 label
18504 N
18505 will
18506 be
18507 used
18508 to
18509 denote
18510 the
18511 current
18512 node
18513 colored
18514 red
18515 At
18516 the
18517 beginning
18518 this
18519 is
18520 the
18521 new
18522 node
18523 being
18524 inserted
18525 but
18526 the
18527 entire
18528 procedure
18529 may
18530 also
18531 be
18532 applied
18533 recursively
18534 to
18535 other
18536 nodes
18537 see
18538 case
18539 3
18540 P
18541 will
18542 denote
18543 N
18544 s
18545 parent
18546 node
18547 G
18548 will
18549 denote
18550 N
18551 s
18552 grandparent
18553 and
18554 U
18555 will
18556 denote
18557 N
18558 s
18559 uncle
18560 Note
18561 that
18562 in
18563 between
18564 some
18565 cases
18566 the
18567 roles
18568 and
18569 labels
18570 of
18571 the
18572 nodes
18573 are
18574 exchanged
18575 but
18576 in
18577 each
18578 case
18579 every
18580 label
18581 continues
18582 to
18583 represent
18584 the
18585 same
18586 node
18587 it
18588 represented
18589 at
18590 the
18591 beginning
18592 of
18593 the
18594 case
18595 Any
18596 color
18597 shown
18598 in
18599 the
18600 diagram
18601 is
18602 either
18603 assumed
18604 in
18605 its
18606 case
18607 or
18608 implied
18609 by
18610 those
18611 assumptions
18612 A
18613 numbered
18614 triangle
18615 represents
18616 a
18617 subtree
18618 of
18619 unspecified
18620 depth
18621 A
18622 black
18623 circle
18624 atop
18625 the
18626 triangle
18627 designates
18628 a
18629 black
18630 root
18631 node
18632 otherwise
18633 the
18634 root
18635 node
18636 s
18637 color
18638 is
18639 unspecified
18640 Each
18641 case
18642 will
18643 be
18644 demonstrated
18645 with
18646 example
18647 C
18648 code
18649 The
18650 uncle
18651 and
18652 grandparent
18653 nodes
18654 can
18655 be
18656 found
18657 by
18658 these
18659 functions
18660 In
18661 a
18662 regular
18663 binary
18664 search
18665 tree
18666 when
18667 deleting
18668 a
18669 node
18670 with
18671 two
18672 non
18673 leaf
18674 children
18675 we
18676 find
18677 either
18678 the
18679 maximum
18680 element
18681 in
18682 its
18683 left
18684 subtree
18685 which
18686 is
18687 the
18688 in
18689 order
18690 predecessor
18691 or
18692 the
18693 minimum
18694 element
18695 in
18696 its
18697 right
18698 subtree
18699 which
18700 is
18701 the
18702 in
18703 order
18704 successor
18705 and
18706 move
18707 its
18708 value
18709 into
18710 the
18711 node
18712 being
18713 deleted
18714 as
18715 shown
18716 here
18717 We
18718 then
18719 delete
18720 the
18721 node
18722 we
18723 copied
18724 the
18725 value
18726 from
18727 which
18728 must
18729 have
18730 fewer
18731 than
18732 two
18733 non
18734 leaf
18735 children
18736 Non
18737 leaf
18738 children
18739 rather
18740 than
18741 all
18742 children
18743 are
18744 specified
18745 here
18746 because
18747 unlike
18748 normal
18749 binary
18750 search
18751 trees
18752 red
18753 black
18754 trees
18755 can
18756 have
18757 leaf
18758 nodes
18759 anywhere
18760 so
18761 that
18762 all
18763 nodes
18764 are
18765 either
18766 internal
18767 nodes
18768 with
18769 two
18770 children
18771 or
18772 leaf
18773 nodes
18774 with
18775 by
18776 definition
18777 zero
18778 children
18779 In
18780 effect
18781 internal
18782 nodes
18783 having
18784 two
18785 leaf
18786 children
18787 in
18788 a
18789 red
18790 black
18791 tree
18792 are
18793 like
18794 the
18795 leaf
18796 nodes
18797 in
18798 a
18799 regular
18800 binary
18801 search
18802 tree
18803 Because
18804 merely
18805 copying
18806 a
18807 value
18808 does
18809 not
18810 violate
18811 any
18812 red
18813 black
18814 properties
18815 this
18816 reduces
18817 to
18818 the
18819 problem
18820 of
18821 deleting
18822 a
18823 node
18824 with
18825 at
18826 most
18827 one
18828 non
18829 leaf
18830 child
18831 Once
18832 we
18833 have
18834 solved
18835 that
18836 problem
18837 the
18838 solution
18839 applies
18840 equally
18841 to
18842 the
18843 case
18844 where
18845 the
18846 node
18847 we
18848 originally
18849 want
18850 to
18851 delete
18852 has
18853 at
18854 most
18855 one
18856 non
18857 leaf
18858 child
18859 as
18860 to
18861 the
18862 case
18863 just
18864 considered
18865 where
18866 it
18867 has
18868 two
18869 non
18870 leaf
18871 children
18872 Therefore
18873 for
18874 the
18875 remainder
18876 of
18877 this
18878 discussion
18879 we
18880 address
18881 the
18882 deletion
18883 of
18884 a
18885 node
18886 with
18887 at
18888 most
18889 one
18890 non
18891 leaf
18892 child
18893 We
18894 use
18895 the
18896 label
18897 M
18898 to
18899 denote
18900 the
18901 node
18902 to
18903 be
18904 deleted
18905 C
18906 will
18907 denote
18908 a
18909 selected
18910 child
18911 of
18912 M
18913 which
18914 we
18915 will
18916 also
18917 call
18918 its
18919 child
18920 If
18921 M
18922 does
18923 have
18924 a
18925 non
18926 leaf
18927 child
18928 call
18929 that
18930 its
18931 child
18932 C
18933 otherwise
18934 choose
18935 either
18936 leaf
18937 as
18938 its
18939 child
18940 C
18941 If
18942 M
18943 is
18944 a
18945 red
18946 node
18947 we
18948 simply
18949 replace
18950 it
18951 with
18952 its
18953 child
18954 C
18955 which
18956 must
18957 be
18958 black
18959 by
18960 property
18961 4
18962 This
18963 can
18964 only
18965 occur
18966 when
18967 M
18968 has
18969 two
18970 leaf
18971 children
18972 because
18973 if
18974 the
18975 red
18976 node
18977 M
18978 had
18979 a
18980 black
18981 non
18982 leaf
18983 child
18984 on
18985 one
18986 side
18987 but
18988 just
18989 a
18990 leaf
18991 child
18992 on
18993 the
18994 other
18995 side
18996 then
18997 the
18998 count
18999 of
19000 black
19001 nodes
19002 on
19003 both
19004 sides
19005 would
19006 be
19007 different
19008 thus
19009 the
19010 tree
19011 would
19012 violate
19013 property
19014 5
19015 All
19016 paths
19017 through
19018 the
19019 deleted
19020 node
19021 will
19022 simply
19023 pass
19024 through
19025 one
19026 fewer
19027 red
19028 node
19029 and
19030 both
19031 the
19032 deleted
19033 node
19034 s
19035 parent
19036 and
19037 child
19038 must
19039 be
19040 black
19041 so
19042 property
19043 3
19044 all
19045 leaves
19046 are
19047 black
19048 and
19049 property
19050 4
19051 both
19052 children
19053 of
19054 every
19055 red
19056 node
19057 are
19058 black
19059 still
19060 hold
19061 Another
19062 simple
19063 case
19064 is
19065 when
19066 M
19067 is
19068 black
19069 and
19070 C
19071 is
19072 red
19073 Simply
19074 removing
19075 a
19076 black
19077 node
19078 could
19079 break
19080 Properties
19081 4
19082 Both
19083 children
19084 of
19085 every
19086 red
19087 node
19088 are
19089 black
19090 and
19091 5
19092 All
19093 paths
19094 from
19095 any
19096 given
19097 node
19098 to
19099 its
19100 leaf
19101 nodes
19102 contain
19103 the
19104 same
19105 number
19106 of
19107 black
19108 nodes
19109 but
19110 if
19111 we
19112 repaint
19113 C
19114 black
19115 both
19116 of
19117 these
19118 properties
19119 are
19120 preserved
19121 The
19122 complex
19123 case
19124 is
19125 when
19126 both
19127 M
19128 and
19129 C
19130 are
19131 black
19132 This
19133 can
19134 only
19135 occur
19136 when
19137 deleting
19138 a
19139 black
19140 node
19141 which
19142 has
19143 two
19144 leaf
19145 children
19146 because
19147 if
19148 the
19149 black
19150 node
19151 M
19152 had
19153 a
19154 black
19155 non
19156 leaf
19157 child
19158 on
19159 one
19160 side
19161 but
19162 just
19163 a
19164 leaf
19165 child
19166 on
19167 the
19168 other
19169 side
19170 then
19171 the
19172 count
19173 of
19174 black
19175 nodes
19176 on
19177 both
19178 sides
19179 would
19180 be
19181 different
19182 thus
19183 the
19184 tree
19185 would
19186 have
19187 been
19188 an
19189 invalid
19190 red
19191 black
19192 tree
19193 by
19194 violation
19195 of
19196 property
19197 5
19198 We
19199 begin
19200 by
19201 replacing
19202 M
19203 with
19204 its
19205 child
19206 C
19207 We
19208 will
19209 call
19210 or
19211 is
19212 relabel
19213 this
19214 child
19215 in
19216 its
19217 new
19218 position
19219 N
19220 and
19221 its
19222 sibling
19223 its
19224 new
19225 parent
19226 s
19227 other
19228 child
19229 S
19230 S
19231 was
19232 previously
19233 the
19234 sibling
19235 of
19236 M
19237 In
19238 the
19239 diagrams
19240 below
19241 we
19242 will
19243 also
19244 use
19245 P
19246 for
19247 N
19248 s
19249 new
19250 parent
19251 M
19252 s
19253 old
19254 parent
19255 SL
19256 for
19257 S
19258 s
19259 left
19260 child
19261 and
19262 SR
19263 for
19264 S
19265 s
19266 right
19267 child
19268 S
19269 cannot
19270 be
19271 a
19272 leaf
19273 because
19274 if
19275 M
19276 and
19277 C
19278 were
19279 black
19280 then
19281 P
19282 s
19283 one
19284 subtree
19285 which
19286 included
19287 M
19288 counted
19289 two
19290 black
19291 height
19292 and
19293 thus
19294 P
19295 s
19296 other
19297 subtree
19298 which
19299 includes
19300 S
19301 must
19302 also
19303 count
19304 two
19305 black
19306 height
19307 which
19308 cannot
19309 be
19310 the
19311 case
19312 if
19313 S
19314 is
19315 a
19316 leaf
19317 node
19318 Note
19319 In
19320 between
19321 some
19322 cases
19323 we
19324 exchange
19325 the
19326 roles
19327 and
19328 labels
19329 of
19330 the
19331 nodes
19332 but
19333 in
19334 each
19335 case
19336 every
19337 label
19338 continues
19339 to
19340 represent
19341 the
19342 same
19343 node
19344 it
19345 represented
19346 at
19347 the
19348 beginning
19349 of
19350 the
19351 case
19352 Any
19353 color
19354 shown
19355 in
19356 the
19357 diagram
19358 is
19359 either
19360 assumed
19361 in
19362 its
19363 case
19364 or
19365 implied
19366 by
19367 those
19368 assumptions
19369 White
19370 represents
19371 an
19372 unknown
19373 color
19374 either
19375 red
19376 or
19377 black
19378 We
19379 will
19380 find
19381 the
19382 sibling
19383 using
19384 this
19385 function
19386 Hash
19387 table
19388 Not
19389 to
19390 be
19391 confused
19392 with
19393 Hash
19394 list
19395 or
19396 Hash
19397 tree
19398 Hash
19399 table
19400 Type
19401 Unordered
19402 associative
19403 array
19404 Invented
19405 1953
19406 A
19407 small
19408 phone
19409 book
19410 as
19411 a
19412 hash
19413 table
19414 In
19415 computing
19416 a
19417 hash
19418 table
19419 hash
19420 map
19421 is
19422 a
19423 data
19424 structure
19425 used
19426 to
19427 implement
19428 an
19429 associative
19430 array
19431 a
19432 structure
19433 that
19434 can
19435 map
19436 keys
19437 to
19438 values
19439 A
19440 hash
19441 table
19442 uses
19443 a
19444 hash
19445 function
19446 to
19447 compute
19448 an
19449 index
19450 into
19451 an
19452 array
19453 of
19454 buckets
19455 or
19456 slots
19457 from
19458 which
19459 the
19460 correct
19461 value
19462 can
19463 be
19464 found
19465 Ideally
19466 the
19467 hash
19468 function
19469 will
19470 assign
19471 each
19472 key
19473 to
19474 a
19475 unique
19476 bucket
19477 but
19478 this
19479 situation
19480 is
19481 rarely
19482 achievable
19483 in
19484 practice
19485 usually
19486 some
19487 keys
19488 will
19489 hash
19490 to
19491 the
19492 same
19493 bucket
19494 Instead
19495 most
19496 hash
19497 table
19498 designs
19499 assume
19500 that
19501 hash
19502 collisions
19503 different
19504 keys
19505 that
19506 are
19507 assigned
19508 by
19509 the
19510 hash
19511 function
19512 to
19513 the
19514 same
19515 bucket
19516 will
19517 occur
19518 and
19519 must
19520 be
19521 accommodated
19522 in
19523 some
19524 way
19525 In
19526 a
19527 well
19528 dimensioned
19529 hash
19530 table
19531 the
19532 average
19533 cost
19534 number
19535 of
19536 instructions
19537 for
19538 each
19539 lookup
19540 is
19541 independent
19542 of
19543 the
19544 number
19545 of
19546 elements
19547 stored
19548 in
19549 the
19550 table
19551 Many
19552 hash
19553 table
19554 designs
19555 also
19556 allow
19557 arbitrary
19558 insertions
19559 and
19560 deletions
19561 of
19562 key
19563 value
19564 pairs
19565 at
19566 amortized2
19567 constant
19568 average
19569 cost
19570 per
19571 operation34
19572 In
19573 many
19574 situations
19575 hash
19576 tables
19577 turn
19578 out
19579 to
19580 be
19581 more
19582 efficient
19583 than
19584 search
19585 trees
19586 or
19587 any
19588 other
19589 table
19590 lookup
19591 structure
19592 For
19593 this
19594 reason
19595 they
19596 are
19597 widely
19598 used
19599 in
19600 many
19601 kinds
19602 of
19603 computer
19604 software
19605 particularly
19606 for
19607 associative
19608 arrays
19609 database
19610 indexing
19611 caches
19612 and
19613 sets
19614 Hash
19615 function
19616 The
19617 idea
19618 of
19619 hashing
19620 is
19621 to
19622 distribute
19623 the
19624 entries
19625 key
19626 value
19627 pairs
19628 across
19629 an
19630 array
19631 of
19632 buckets
19633 Given
19634 a
19635 key
19636 the
19637 algorithm
19638 computes
19639 an
19640 index
19641 that
19642 suggests
19643 where
19644 the
19645 entry
19646 can
19647 be
19648 found
19649 index
19650 fkey
19651 array
19652 size
19653 Often
19654 this
19655 is
19656 done
19657 in
19658 two
19659 steps
19660 hash
19661 hashfunckey
19662 index
19663 hash
19664 array
19665 size
19666 In
19667 this
19668 method
19669 the
19670 hash
19671 is
19672 independent
19673 of
19674 the
19675 array
19676 size
19677 and
19678 it
19679 is
19680 then
19681 reduced
19682 to
19683 an
19684 index
19685 a
19686 number
19687 between
19688 0
19689 and
19690 array
19691 size
19692 1
19693 using
19694 the
19695 modulo
19696 operator
19697 In
19698 the
19699 case
19700 that
19701 the
19702 array
19703 size
19704 is
19705 a
19706 power
19707 of
19708 two
19709 the
19710 remainder
19711 operation
19712 is
19713 reduced
19714 to
19715 masking
19716 which
19717 improves
19718 speed
19719 but
19720 can
19721 increase
19722 problems
19723 with
19724 a
19725 poor
19726 hash
19727 function
19728 Choosing
19729 a
19730 good
19731 hash
19732 function
19733 A
19734 good
19735 hash
19736 function
19737 and
19738 implementation
19739 algorithm
19740 are
19741 essential
19742 for
19743 good
19744 hash
19745 table
19746 performance
19747 but
19748 may
19749 be
19750 difficult
19751 to
19752 achieve
19753 A
19754 basic
19755 requirement
19756 is
19757 that
19758 the
19759 function
19760 should
19761 provide
19762 a
19763 uniform
19764 distribution
19765 of
19766 hash
19767 values
19768 A
19769 non
19770 uniform
19771 distribution
19772 increases
19773 the
19774 number
19775 of
19776 collisions
19777 and
19778 the
19779 cost
19780 of
19781 resolving
19782 them
19783 Uniformity
19784 is
19785 sometimes
19786 difficult
19787 to
19788 ensure
19789 by
19790 design
19791 but
19792 may
19793 be
19794 evaluated
19795 empirically
19796 using
19797 statistical
19798 tests
19799 eg
19800 a
19801 Pearsons
19802 chi
19803 squared
19804 test
19805 for
19806 discrete
19807 uniform
19808 distributions56
19809 The
19810 distribution
19811 needs
19812 to
19813 be
19814 uniform
19815 only
19816 for
19817 table
19818 sizes
19819 that
19820 occur
19821 in
19822 the
19823 application
19824 In
19825 particular
19826 if
19827 one
19828 uses
19829 dynamic
19830 resizing
19831 with
19832 exact
19833 doubling
19834 and
19835 halving
19836 of
19837 the
19838 table
19839 size
19840 s
19841 then
19842 the
19843 hash
19844 function
19845 needs
19846 to
19847 be
19848 uniform
19849 only
19850 when
19851 s
19852 is
19853 a
19854 power
19855 of
19856 two
19857 On
19858 the
19859 other
19860 hand
19861 some
19862 hashing
19863 algorithms
19864 provide
19865 uniform
19866 hashes
19867 only
19868 when
19869 s
19870 is
19871 a
19872 prime
19873 number7
19874 For
19875 open
19876 addressing
19877 schemes
19878 the
19879 hash
19880 function
19881 should
19882 also
19883 avoid
19884 clustering
19885 the
19886 mapping
19887 of
19888 two
19889 or
19890 more
19891 keys
19892 to
19893 consecutive
19894 slots
19895 Such
19896 clustering
19897 may
19898 cause
19899 the
19900 lookup
19901 cost
19902 to
19903 skyrocket
19904 even
19905 if
19906 the
19907 load
19908 factor
19909 is
19910 low
19911 and
19912 collisions
19913 are
19914 infrequent
19915 The
19916 popular
19917 multiplicative
19918 hash3
19919 is
19920 claimed
19921 to
19922 have
19923 particularly
19924 poor
19925 clustering
19926 behavior7
19927 Cryptographic
19928 hash
19929 functions
19930 are
19931 believed
19932 to
19933 provide
19934 good
19935 hash
19936 functions
19937 for
19938 any
19939 table
19940 size
19941 s
19942 either
19943 by
19944 modulo
19945 reduction
19946 or
19947 by
19948 bit
19949 masking
19950 They
19951 may
19952 also
19953 be
19954 appropriate
19955 if
19956 there
19957 is
19958 a
19959 risk
19960 of
19961 malicious
19962 users
19963 trying
19964 to
19965 sabotage
19966 a
19967 network
19968 service
19969 by
19970 submitting
19971 requests
19972 designed
19973 to
19974 generate
19975 a
19976 large
19977 number
19978 of
19979 collisions
19980 in
19981 the
19982 servers
19983 hash
19984 tables
19985 However
19986 the
19987 risk
19988 of
19989 sabotage
19990 can
19991 also
19992 be
19993 avoided
19994 by
19995 cheaper
19996 methods
19997 such
19998 as
19999 applying
