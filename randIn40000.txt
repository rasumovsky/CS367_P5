0 the
1 hash
2 function
3 to
4 the
5 same
6 bucket
7 will
8 occur
9 and
10 must
11 be
12 accommodated
13 in
14 some
15 way
16 In
17 a
18 well
19 dimensioned
20 hash
21 table
22 the
23 average
24 cost
25 number
26 of
27 instructions
28 for
29 each
30 lookup
31 is
32 independent
33 of
34 the
35 number
36 of
37 elements
38 stored
39 in
40 the
41 table
42 Many
43 hash
44 table
45 designs
46 also
47 allow
48 arbitrary
49 insertions
50 and
51 deletions
52 of
53 key
54 value
55 pairs
56 at
57 amortized2
58 constant
59 average
60 cost
61 per
62 operation34
63 In
64 many
65 situations
66 hash
67 tables
68 turn
69 out
70 to
71 be
72 more
73 efficient
74 than
75 search
76 trees
77 or
78 any
79 other
80 table
81 lookup
82 structure
83 For
84 this
85 reason
86 they
87 are
88 widely
89 used
90 in
91 many
92 kinds
93 of
94 computer
95 software
96 particularly
97 for
98 associative
99 arrays
100 database
101 indexing
102 caches
103 and
104 sets
105 Hash
106 function
107 The
108 idea
109 of
110 hashing
111 is
112 to
113 distribute
114 the
115 entries
116 key
117 value
118 pairs
119 across
120 an
121 array
122 of
123 buckets
124 Given
125 a
126 key
127 the
128 algorithm
129 computes
130 an
131 index
132 that
133 suggests
134 where
135 the
136 entry
137 can
138 be
139 found
140 index
141 fkey
142 array
143 size
144 Often
145 this
146 is
147 done
148 in
149 two
150 steps
151 hash
152 hashfunckey
153 index
154 hash
155 array
156 size
157 In
158 this
159 method
160 the
161 hash
162 is
163 independent
164 of
165 the
166 array
167 size
168 and
169 it
170 is
171 then
172 reduced
173 to
174 an
175 index
176 a
177 number
178 between
179 0
180 and
181 array
182 size
183 1
184 using
185 the
186 modulo
187 operator
188 In
189 the
190 case
191 that
192 the
193 array
194 size
195 is
196 a
197 power
198 of
199 two
200 the
201 remainder
202 operation
203 is
204 reduced
205 to
206 masking
207 which
208 improves
209 speed
210 but
211 can
212 increase
213 problems
214 with
215 a
216 poor
217 hash
218 function
219 Choosing
220 a
221 good
222 hash
223 function
224 A
225 good
226 hash
227 function
228 and
229 implementation
230 algorithm
231 are
232 essential
233 for
234 good
235 hash
236 table
237 performance
238 but
239 may
240 be
241 difficult
242 to
243 achieve
244 A
245 basic
246 requirement
247 is
248 that
249 the
250 function
251 should
252 provide
253 a
254 uniform
255 distribution
256 of
257 hash
258 values
259 A
260 non
261 uniform
262 distribution
263 increases
264 the
265 number
266 of
267 collisions
268 and
269 the
270 cost
271 of
272 resolving
273 them
274 Uniformity
275 is
276 sometimes
277 difficult
278 to
279 ensure
280 by
281 design
282 but
283 may
284 be
285 evaluated
286 empirically
287 using
288 statistical
289 tests
290 eg
291 a
292 Pearsons
293 chi
294 squared
295 test
296 for
297 discrete
298 uniform
299 distributions56
300 The
301 distribution
302 needs
303 to
304 be
305 uniform
306 only
307 for
308 table
309 sizes
310 that
311 occur
312 in
313 the
314 application
315 In
316 particular
317 if
318 one
319 uses
320 dynamic
321 resizing
322 with
323 exact
324 doubling
325 and
326 halving
327 of
328 the
329 table
330 size
331 s
332 then
333 the
334 hash
335 function
336 needs
337 to
338 be
339 uniform
340 only
341 when
342 s
343 is
344 a
345 power
346 of
347 two
348 On
349 the
350 other
351 hand
352 some
353 hashing
354 algorithms
355 provide
356 uniform
357 hashes
358 only
359 when
360 s
361 is
362 a
363 prime
364 number7
365 For
366 open
367 addressing
368 schemes
369 the
370 hash
371 function
372 should
373 also
374 avoid
375 clustering
376 the
377 mapping
378 of
379 two
380 or
381 more
382 keys
383 to
384 consecutive
385 slots
386 Such
387 clustering
388 may
389 cause
390 the
391 lookup
392 cost
393 to
394 skyrocket
395 even
396 if
397 the
398 load
399 factor
400 is
401 low
402 and
403 collisions
404 are
405 infrequent
406 The
407 popular
408 multiplicative
409 hash3
410 is
411 claimed
412 to
413 have
414 particularly
415 poor
416 clustering
417 behavior7
418 Cryptographic
419 hash
420 functions
421 are
422 believed
423 to
424 provide
425 good
426 hash
427 functions
428 for
429 any
430 table
431 size
432 s
433 either
434 by
435 modulo
436 reduction
437 or
438 by
439 bit
440 masking
441 They
442 may
443 also
444 be
445 appropriate
446 if
447 there
448 is
449 a
450 risk
451 of
452 malicious
453 users
454 trying
455 to
456 sabotage
457 a
458 network
459 service
460 by
461 submitting
462 requests
463 designed
464 to
465 generate
466 a
467 large
468 number
469 of
470 collisions
471 in
472 the
473 servers
474 hash
475 tables
476 However
477 the
478 risk
479 of
480 sabotage
481 can
482 also
483 be
484 avoided
485 by
486 cheaper
487 methods
488 such
489 as
490 applying
491 a
492 secret
493 salt
494 to
495 the
496 data
497 or
498 using
499 a
500 universal
501 hash
502 function
503 Perfect
504 hash
505 function
506 If
507 all
508 keys
509 are
510 known
511 ahead
512 of
513 time
514 a
515 perfect
516 hash
517 function
518 can
519 be
520 used
521 to
522 create
523 a
524 perfect
525 hash
526 table
527 that
528 has
529 no
530 collisions
531 If
532 minimal
533 perfect
534 hashing
535 is
536 used
537 every
538 location
539 in
540 the
541 hash
542 table
543 can
544 be
545 used
546 as
547 well
548 Perfect
549 hashing
550 allows
551 for
552 constant
553 time
554 lookups
555 in
556 the
557 worst
558 case
559 This
560 is
561 in
562 contrast
563 to
564 most
565 chaining
566 and
567 open
568 addressing
569 methods
570 where
571 the
572 time
573 for
574 lookup
575 is
576 low
577 on
578 average
579 but
580 may
581 be
582 very
583 large
584 proportional
585 to
586 the
587 number
588 of
589 entries
590 for
591 some
592 sets
593 of
594 keys
595 Key
596 statistics
597 A
598 critical
599 statistic
600 for
601 a
602 hash
603 table
604 is
605 called
606 the
607 load
608 factor
609 This
610 is
611 simply
612 the
613 number
614 of
615 entries
616 divided
617 by
618 the
619 number
620 of
621 buckets
622 that
623 is
624 n
625 k
626 where
627 n
628 is
629 the
630 number
631 of
632 entries
633 and
634 k
635 is
636 the
637 number
638 of
639 buckets
640 If
641 the
642 load
643 factor
644 is
645 kept
646 reasonable
647 the
648 hash
649 table
650 should
651 perform
652 well
653 provided
654 the
655 hashing
656 is
657 good
658 If
659 the
660 load
661 factor
662 grows
663 too
664 large
665 the
666 hash
667 table
668 will
669 become
670 slow
671 or
672 it
673 may
674 fail
675 to
676 work
677 depending
678 on
679 the
680 method
681 used
682 The
683 expected
684 constant
685 time
686 property
687 of
688 a
689 hash
690 table
691 assumes
692 that
693 the
694 load
695 factor
696 is
697 kept
698 below
699 some
700 bound
701 For
702 a
703 fixed
704 number
705 of
706 buckets
707 the
708 time
709 for
710 a
711 lookup
712 grows
713 with
714 the
715 number
716 of
717 entries
718 and
719 so
720 does
721 not
722 achieve
723 the
724 desired
725 constant
726 time
727 Second
728 to
729 that
730 one
731 can
732 examine
733 the
734 variance
735 of
736 number
737 of
738 entries
739 per
740 bucket
741 For
742 example
743 two
744 tables
745 both
746 have
747 1000
748 entries
749 and
750 1000
751 buckets
752 one
753 has
754 exactly
755 one
756 entry
757 in
758 each
759 bucket
760 the
761 other
762 has
763 all
764 entries
765 in
766 the
767 same
768 bucket
769 Clearly
770 the
771 hashing
772 is
773 not
774 working
775 in
776 the
777 second
778 one
779 A
780 low
781 load
782 factor
783 is
784 not
785 especially
786 beneficial
787 As
788 the
789 load
790 factor
791 approaches
792 0
793 the
794 proportion
795 of
796 unused
797 areas
798 in
799 the
800 hash
801 table
802 increases
803 but
804 there
805 is
806 not
807 necessarily
808 any
809 reduction
810 in
811 search
812 cost
813 This
814 results
815 in
816 wasted
817 memory
818 Collision
819 resolution
820 Hash
821 collisions
822 are
823 practically
824 unavoidable
825 when
826 hashing
827 a
828 random
829 subset
830 of
831 a
832 large
833 set
834 of
835 possible
836 keys
837 For
838 example
839 if
840 2
841 450
842 keys
843 are
844 hashed
845 into
846 a
847 million
848 buckets
849 even
850 with
851 a
852 perfectly
853 uniform
854 random
855 distribution
856 according
857 to
858 the
859 birthday
860 problem
861 there
862 is
863 approximately
864 a
865 95
866 chance
867 of
868 at
869 least
870 two
871 of
872 the
873 keys
874 being
875 hashed
876 to
877 the
878 same
879 slot
880 Therefore
881 most
882 hash
883 table
884 implementations
885 have
886 some
887 collision
888 resolution
889 strategy
890 to
891 handle
892 such
893 events
894 Some
895 common
896 strategies
897 are
898 described
899 below
900 All
901 these
902 methods
903 require
904 that
905 the
906 keys
907 or
908 pointers
909 to
910 them
911 be
912 stored
913 in
914 the
915 table
916 together
917 with
918 the
919 associated
920 values
921 Separate
922 chaining
923 Hash
924 collision
925 resolved
926 by
927 separate
928 chaining
929 In
930 the
931 method
932 known
933 as
934 separate
935 chaining
936 each
937 bucket
938 is
939 independent
940 and
941 has
942 some
943 sort
944 of
945 list
946 of
947 entries
948 with
949 the
950 same
951 index
952 The
953 time
954 for
955 hash
956 table
957 operations
958 is
959 the
960 time
961 to
962 find
963 the
964 bucket
965 which
966 is
967 constant
968 plus
969 the
970 time
971 for
972 the
973 list
974 operation
975 The
976 technique
977 is
978 also
979 called
980 open
981 hashing
982 or
983 closed
984 addressing
985 In
986 a
987 good
988 hash
989 table
990 each
991 bucket
992 has
993 zero
994 or
995 one
996 entries
997 and
998 sometimes
999 two
1000 or
1001 three
1002 but
1003 rarely
1004 more
1005 than
1006 that
1007 Therefore
1008 structures
1009 that
1010 are
1011 efficient
1012 in
1013 time
1014 and
1015 space
1016 for
1017 these
1018 cases
1019 are
1020 preferred
1021 Structures
1022 that
1023 are
1024 efficient
1025 for
1026 a
1027 fairly
1028 large
1029 number
1030 of
1031 entries
1032 per
1033 bucket
1034 are
1035 not
1036 needed
1037 or
1038 desirable
1039 If
1040 these
1041 cases
1042 happen
1043 often
1044 the
1045 hashing
1046 is
1047 not
1048 working
1049 well
1050 and
1051 this
1052 needs
1053 to
1054 be
1055 fixed
1056 Separate
1057 chaining
1058 with
1059 linked
1060 lists
1061 Chained
1062 hash
1063 tables
1064 with
1065 linked
1066 lists
1067 are
1068 popular
1069 because
1070 they
1071 require
1072 only
1073 basic
1074 data
1075 structures
1076 with
1077 simple
1078 algorithms
1079 and
1080 can
1081 use
1082 simple
1083 hash
1084 functions
1085 that
1086 are
1087 unsuitable
1088 for
1089 other
1090 methods
1091 The
1092 cost
1093 of
1094 a
1095 table
1096 operation
1097 is
1098 that
1099 of
1100 scanning
1101 the
1102 entries
1103 of
1104 the
1105 selected
1106 bucket
1107 for
1108 the
1109 desired
1110 key
1111 If
1112 the
1113 distribution
1114 of
1115 keys
1116 is
1117 sufficiently
1118 uniform
1119 the
1120 average
1121 cost
1122 of
1123 a
1124 lookup
1125 depends
1126 only
1127 on
1128 the
1129 average
1130 number
1131 of
1132 keys
1133 per
1134 bucket
1135 that
1136 is
1137 on
1138 the
1139 load
1140 factor
1141 Chained
1142 hash
1143 tables
1144 remain
1145 effective
1146 even
1147 when
1148 the
1149 number
1150 of
1151 table
1152 entries
1153 n
1154 is
1155 much
1156 higher
1157 than
1158 the
1159 number
1160 of
1161 slots
1162 Their
1163 performance
1164 degrades
1165 more
1166 gracefully
1167 linearly
1168 with
1169 the
1170 load
1171 factor
1172 For
1173 example
1174 a
1175 chained
1176 hash
1177 table
1178 with
1179 1000
1180 slots
1181 and
1182 10
1183 000
1184 stored
1185 keys
1186 load
1187 factor
1188 10
1189 is
1190 five
1191 to
1192 ten
1193 times
1194 slower
1195 than
1196 a
1197 10
1198 000
1199 slot
1200 table
1201 load
1202 factor
1203 1
1204 but
1205 still
1206 1000
1207 times
1208 faster
1209 than
1210 a
1211 plain
1212 sequential
1213 list
1214 and
1215 possibly
1216 even
1217 faster
1218 than
1219 a
1220 balanced
1221 search
1222 tree
1223 For
1224 separate
1225 chaining
1226 the
1227 worst
1228 case
1229 scenario
1230 is
1231 when
1232 all
1233 entries
1234 are
1235 inserted
1236 into
1237 the
1238 same
1239 bucket
1240 in
1241 which
1242 case
1243 the
1244 hash
1245 table
1246 is
1247 ineffective
1248 and
1249 the
1250 cost
1251 is
1252 that
1253 of
1254 searching
1255 the
1256 bucket
1257 data
1258 structure
1259 If
1260 the
1261 latter
1262 is
1263 a
1264 linear
1265 list
1266 the
1267 lookup
1268 procedure
1269 may
1270 have
1271 to
1272 scan
1273 all
1274 its
1275 entries
1276 so
1277 the
1278 worst
1279 case
1280 cost
1281 is
1282 proportional
1283 to
1284 the
1285 number
1286 n
1287 of
1288 entries
1289 in
1290 the
1291 table
1292 The
1293 bucket
1294 chains
1295 are
1296 often
1297 implemented
1298 as
1299 ordered
1300 lists
1301 sorted
1302 by
1303 the
1304 key
1305 field
1306 this
1307 choice
1308 approximately
1309 halves
1310 the
1311 average
1312 cost
1313 of
1314 unsuccessful
1315 lookups
1316 compared
1317 to
1318 an
1319 unordered
1320 list
1321 However
1322 if
1323 some
1324 keys
1325 are
1326 much
1327 more
1328 likely
1329 to
1330 come
1331 up
1332 than
1333 others
1334 an
1335 unordered
1336 list
1337 with
1338 move
1339 to
1340 front
1341 heuristic
1342 may
1343 be
1344 more
1345 effective
1346 More
1347 sophisticated
1348 data
1349 structures
1350 such
1351 as
1352 balanced
1353 search
1354 trees
1355 are
1356 worth
1357 considering
1358 only
1359 if
1360 the
1361 load
1362 factor
1363 is
1364 large
1365 about
1366 10
1367 or
1368 more
1369 or
1370 if
1371 the
1372 hash
1373 distribution
1374 is
1375 likely
1376 to
1377 be
1378 very
1379 non
1380 uniform
1381 or
1382 if
1383 one
1384 must
1385 guarantee
1386 good
1387 performance
1388 even
1389 in
1390 a
1391 worst
1392 case
1393 scenario
1394 However
1395 using
1396 a
1397 larger
1398 table
1399 and
1400 or
1401 a
1402 better
1403 hash
1404 function
1405 may
1406 be
1407 even
1408 more
1409 effective
1410 in
1411 those
1412 cases
1413 Chained
1414 hash
1415 tables
1416 also
1417 inherit
1418 the
1419 disadvantages
1420 of
1421 linked
1422 lists
1423 When
1424 storing
1425 small
1426 keys
1427 and
1428 values
1429 the
1430 space
1431 overhead
1432 of
1433 the
1434 next
1435 pointer
1436 in
1437 each
1438 entry
1439 record
1440 can
1441 be
1442 significant
1443 An
1444 additional
1445 disadvantage
1446 is
1447 that
1448 traversing
1449 a
1450 linked
1451 list
1452 has
1453 poor
1454 cache
1455 performance
1456 making
1457 the
1458 processor
1459 cache
1460 ineffective
1461 Separate
1462 chaining
1463 with
1464 list
1465 head
1466 cells
1467 Hash
1468 collision
1469 by
1470 separate
1471 chaining
1472 with
1473 head
1474 records
1475 in
1476 the
1477 bucket
1478 array
1479 Some
1480 chaining
1481 implementations
1482 store
1483 the
1484 first
1485 record
1486 of
1487 each
1488 chain
1489 in
1490 the
1491 slot
1492 array
1493 itself4
1494 The
1495 number
1496 of
1497 pointer
1498 traversals
1499 is
1500 decreased
1501 by
1502 one
1503 for
1504 most
1505 cases
1506 The
1507 purpose
1508 is
1509 to
1510 increase
1511 cache
1512 efficiency
1513 of
1514 hash
1515 table
1516 access
1517 The
1518 disadvantage
1519 is
1520 that
1521 an
1522 empty
1523 bucket
1524 takes
1525 the
1526 same
1527 space
1528 as
1529 a
1530 bucket
1531 with
1532 one
1533 entry
1534 To
1535 save
1536 space
1537 such
1538 hash
1539 tables
1540 often
1541 have
1542 about
1543 as
1544 many
1545 slots
1546 as
1547 stored
1548 entries
1549 meaning
1550 that
1551 many
1552 slots
1553 have
1554 two
1555 or
1556 more
1557 entries
1558 Separate
1559 chaining
1560 with
1561 other
1562 structures
1563 Instead
1564 of
1565 a
1566 list
1567 one
1568 can
1569 use
1570 any
1571 other
1572 data
1573 structure
1574 that
1575 supports
1576 the
1577 required
1578 operations
1579 For
1580 example
1581 by
1582 using
1583 a
1584 self
1585 balancing
1586 tree
1587 the
1588 theoretical
1589 worst
1590 case
1591 time
1592 of
1593 common
1594 hash
1595 table
1596 operations
1597 insertion
1598 deletion
1599 lookup
1600 can
1601 be
1602 brought
1603 down
1604 to
1605 Olog
1606 n
1607 rather
1608 than
1609 On
1610 However
1611 this
1612 approach
1613 is
1614 only
1615 worth
1616 the
1617 trouble
1618 and
1619 extra
1620 memory
1621 cost
1622 if
1623 long
1624 delays
1625 must
1626 be
1627 avoided
1628 at
1629 all
1630 costs
1631 eg
1632 in
1633 a
1634 real
1635 time
1636 application
1637 or
1638 if
1639 one
1640 must
1641 guard
1642 against
1643 many
1644 entries
1645 hashed
1646 to
1647 the
1648 same
1649 slot
1650 eg
1651 if
1652 one
1653 expects
1654 extremely
1655 non
1656 uniform
1657 distributions
1658 or
1659 in
1660 the
1661 case
1662 of
1663 web
1664 sites
1665 or
1666 other
1667 publicly
1668 accessible
1669 services
1670 which
1671 are
1672 vulnerable
1673 to
1674 malicious
1675 key
1676 distributions
1677 in
1678 requests
1679 The
1680 variant
1681 called
1682 array
1683 hash
1684 table
1685 uses
1686 a
1687 dynamic
1688 array
1689 to
1690 store
1691 all
1692 the
1693 entries
1694 that
1695 hash
1696 to
1697 the
1698 same
1699 slot8910
1700 Each
1701 newly
1702 inserted
1703 entry
1704 gets
1705 appended
1706 to
1707 the
1708 end
1709 of
1710 the
1711 dynamic
1712 array
1713 that
1714 is
1715 assigned
1716 to
1717 the
1718 slot
1719 The
1720 dynamic
1721 array
1722 is
1723 resized
1724 in
1725 an
1726 exact
1727 fit
1728 manner
1729 meaning
1730 it
1731 is
1732 grown
1733 only
1734 by
1735 as
1736 many
1737 bytes
1738 as
1739 needed
1740 Alternative
1741 techniques
1742 such
1743 as
1744 growing
1745 the
1746 array
1747 by
1748 block
1749 sizes
1750 or
1751 pages
1752 were
1753 found
1754 to
1755 improve
1756 insertion
1757 performance
1758 but
1759 at
1760 a
1761 cost
1762 in
1763 space
1764 This
1765 variation
1766 makes
1767 more
1768 efficient
1769 use
1770 of
1771 CPU
1772 caching
1773 and
1774 the
1775 translation
1776 lookaside
1777 buffer
1778 TLB
1779 because
1780 slot
1781 entries
1782 are
1783 stored
1784 in
1785 sequential
1786 memory
1787 positions
1788 It
1789 also
1790 dispenses
1791 with
1792 the
1793 next
1794 pointers
1795 that
1796 are
1797 required
1798 by
1799 linked
1800 lists
1801 which
1802 saves
1803 space
1804 Despite
1805 frequent
1806 array
1807 resizing
1808 space
1809 overheads
1810 incurred
1811 by
1812 operating
1813 system
1814 such
1815 as
1816 memory
1817 fragmentation
1818 were
1819 found
1820 to
1821 be
1822 small
1823 An
1824 elaboration
1825 on
1826 this
1827 approach
1828 is
1829 the
1830 so
1831 called
1832 dynamic
1833 perfect
1834 hashing
1835 11
1836 where
1837 a
1838 bucket
1839 that
1840 contains
1841 k
1842 entries
1843 is
1844 organized
1845 as
1846 a
1847 perfect
1848 hash
1849 table
1850 with
1851 k2
1852 slots
1853 While
1854 it
1855 uses
1856 more
1857 memory
1858 n2
1859 slots
1860 for
1861 n
1862 entries
1863 in
1864 the
1865 worst
1866 case
1867 and
1868 n
1869 k
1870 slots
1871 in
1872 the
1873 average
1874 case
1875 this
1876 variant
1877 has
1878 guaranteed
1879 constant
1880 worst
1881 case
1882 lookup
1883 time
1884 and
1885 low
1886 amortized
1887 time
1888 for
1889 insertion
1890 Open
1891 addressing
1892 Hash
1893 collision
1894 resolved
1895 by
1896 open
1897 addressing
1898 with
1899 linear
1900 probing
1901 interval
1902 1
1903 Note
1904 that
1905 Ted
1906 Baker
1907 has
1908 a
1909 unique
1910 hash
1911 but
1912 nevertheless
1913 collided
1914 with
1915 Sandra
1916 Dee
1917 that
1918 had
1919 previously
1920 collided
1921 with
1922 John
1923 Smith
1924 In
1925 another
1926 strategy
1927 called
1928 open
1929 addressing
1930 all
1931 entry
1932 records
1933 are
1934 stored
1935 in
1936 the
1937 bucket
1938 array
1939 itself
1940 When
1941 a
1942 new
1943 entry
1944 has
1945 to
1946 be
1947 inserted
1948 the
1949 buckets
1950 are
1951 examined
1952 starting
1953 with
1954 the
1955 hashed
1956 to
1957 slot
1958 and
1959 proceeding
1960 in
1961 some
1962 probe
1963 sequence
1964 until
1965 an
1966 unoccupied
1967 slot
1968 is
1969 found
1970 When
1971 searching
1972 for
1973 an
1974 entry
1975 the
1976 buckets
1977 are
1978 scanned
1979 in
1980 the
1981 same
1982 sequence
1983 until
1984 either
1985 the
1986 target
1987 record
1988 is
1989 found
1990 or
1991 an
1992 unused
1993 array
1994 slot
1995 is
1996 found
1997 which
1998 indicates
1999 that
2000 there
2001 is
2002 no
2003 such
2004 key
2005 in
2006 the
2007 table12
2008 The
2009 name
2010 open
2011 addressing
2012 refers
2013 to
2014 the
2015 fact
2016 that
2017 the
2018 location
2019 address
2020 of
2021 the
2022 item
2023 is
2024 not
2025 determined
2026 by
2027 its
2028 hash
2029 value
2030 This
2031 method
2032 is
2033 also
2034 called
2035 closed
2036 hashing
2037 it
2038 should
2039 not
2040 be
2041 confused
2042 with
2043 open
2044 hashing
2045 or
2046 closed
2047 addressing
2048 that
2049 usually
2050 mean
2051 separate
2052 chaining
2053 Well
2054 known
2055 probe
2056 sequences
2057 include
2058 Linear
2059 probing
2060 in
2061 which
2062 the
2063 interval
2064 between
2065 probes
2066 is
2067 fixed
2068 usually
2069 1
2070 Quadratic
2071 probing
2072 in
2073 which
2074 the
2075 interval
2076 between
2077 probes
2078 is
2079 increased
2080 by
2081 adding
2082 the
2083 successive
2084 outputs
2085 of
2086 a
2087 quadratic
2088 polynomial
2089 to
2090 the
2091 starting
2092 value
2093 given
2094 by
2095 the
2096 original
2097 hash
2098 computation
2099 Double
2100 hashing
2101 in
2102 which
2103 the
2104 interval
2105 between
2106 probes
2107 is
2108 computed
2109 by
2110 another
2111 hash
2112 function
2113 A
2114 drawback
2115 of
2116 all
2117 these
2118 open
2119 addressing
2120 schemes
2121 is
2122 that
2123 the
2124 number
2125 of
2126 stored
2127 entries
2128 cannot
2129 exceed
2130 the
2131 number
2132 of
2133 slots
2134 in
2135 the
2136 bucket
2137 array
2138 In
2139 fact
2140 even
2141 with
2142 good
2143 hash
2144 functions
2145 their
2146 performance
2147 dramatically
2148 degrades
2149 when
2150 the
2151 load
2152 factor
2153 grows
2154 beyond
2155 07
2156 or
2157 so
2158 For
2159 many
2160 applications
2161 these
2162 restrictions
2163 mandate
2164 the
2165 use
2166 of
2167 dynamic
2168 resizing
2169 with
2170 its
2171 attendant
2172 costs
2173 Open
2174 addressing
2175 schemes
2176 also
2177 put
2178 more
2179 stringent
2180 requirements
2181 on
2182 the
2183 hash
2184 function
2185 besides
2186 distributing
2187 the
2188 keys
2189 more
2190 uniformly
2191 over
2192 the
2193 buckets
2194 the
2195 function
2196 must
2197 also
2198 minimize
2199 the
2200 clustering
2201 of
2202 hash
2203 values
2204 that
2205 are
2206 consecutive
2207 in
2208 the
2209 probe
2210 order
2211 Using
2212 separate
2213 chaining
2214 the
2215 only
2216 concern
2217 is
2218 that
2219 too
2220 many
2221 objects
2222 map
2223 to
2224 the
2225 same
2226 hash
2227 value
2228 whether
2229 they
2230 are
2231 adjacent
2232 or
2233 nearby
2234 is
2235 completely
2236 irrelevant
2237 Open
2238 addressing
2239 only
2240 saves
2241 memory
2242 if
2243 the
2244 entries
2245 are
2246 small
2247 less
2248 than
2249 four
2250 times
2251 the
2252 size
2253 of
2254 a
2255 pointer
2256 and
2257 the
2258 load
2259 factor
2260 is
2261 not
2262 too
2263 small
2264 If
2265 the
2266 load
2267 factor
2268 is
2269 close
2270 to
2271 zero
2272 that
2273 is
2274 there
2275 are
2276 far
2277 more
2278 buckets
2279 than
2280 stored
2281 entries
2282 open
2283 addressing
2284 is
2285 wasteful
2286 even
2287 if
2288 each
2289 entry
2290 is
2291 just
2292 two
2293 words
2294 This
2295 graph
2296 compares
2297 the
2298 average
2299 number
2300 of
2301 cache
2302 misses
2303 required
2304 to
2305 look
2306 up
2307 elements
2308 in
2309 tables
2310 with
2311 chaining
2312 and
2313 linear
2314 probing
2315 As
2316 the
2317 table
2318 passes
2319 the
2320 80
2321 full
2322 mark
2323 linear
2324 probings
2325 performance
2326 drastically
2327 degrades
2328 Open
2329 addressing
2330 avoids
2331 the
2332 time
2333 overhead
2334 of
2335 allocating
2336 each
2337 new
2338 entry
2339 record
2340 and
2341 can
2342 be
2343 implemented
2344 even
2345 in
2346 the
2347 absence
2348 of
2349 a
2350 memory
2351 allocator
2352 It
2353 also
2354 avoids
2355 the
2356 extra
2357 indirection
2358 required
2359 to
2360 access
2361 the
2362 first
2363 entry
2364 of
2365 each
2366 bucket
2367 that
2368 is
2369 usually
2370 the
2371 only
2372 one
2373 It
2374 also
2375 has
2376 better
2377 locality
2378 of
2379 reference
2380 particularly
2381 with
2382 linear
2383 probing
2384 With
2385 small
2386 record
2387 sizes
2388 these
2389 factors
2390 can
2391 yield
2392 better
2393 performance
2394 than
2395 chaining
2396 particularly
2397 for
2398 lookups
2399 Hash
2400 tables
2401 with
2402 open
2403 addressing
2404 are
2405 also
2406 easier
2407 to
2408 serialize
2409 because
2410 they
2411 do
2412 not
2413 use
2414 pointers
2415 On
2416 the
2417 other
2418 hand
2419 normal
2420 open
2421 addressing
2422 is
2423 a
2424 poor
2425 choice
2426 for
2427 large
2428 elements
2429 because
2430 these
2431 elements
2432 fill
2433 entire
2434 CPU
2435 cache
2436 lines
2437 negating
2438 the
2439 cache
2440 advantage
2441 and
2442 a
2443 large
2444 amount
2445 of
2446 space
2447 is
2448 wasted
2449 on
2450 large
2451 empty
2452 table
2453 slots
2454 If
2455 the
2456 open
2457 addressing
2458 table
2459 only
2460 stores
2461 references
2462 to
2463 elements
2464 external
2465 storage
2466 it
2467 uses
2468 space
2469 comparable
2470 to
2471 chaining
2472 even
2473 for
2474 large
2475 records
2476 but
2477 loses
2478 its
2479 speed
2480 advantage
2481 Generally
2482 speaking
2483 open
2484 addressing
2485 is
2486 better
2487 used
2488 for
2489 hash
2490 tables
2491 with
2492 small
2493 records
2494 that
2495 can
2496 be
2497 stored
2498 within
2499 the
2500 table
2501 internal
2502 storage
2503 and
2504 fit
2505 in
2506 a
2507 cache
2508 line
2509 They
2510 are
2511 particularly
2512 suitable
2513 for
2514 elements
2515 of
2516 one
2517 word
2518 or
2519 less
2520 If
2521 the
2522 table
2523 is
2524 expected
2525 to
2526 have
2527 a
2528 high
2529 load
2530 factor
2531 the
2532 records
2533 are
2534 large
2535 or
2536 the
2537 data
2538 is
2539 variable
2540 sized
2541 chained
2542 hash
2543 tables
2544 often
2545 perform
2546 as
2547 well
2548 or
2549 better
2550 Ultimately
2551 used
2552 sensibly
2553 any
2554 kind
2555 of
2556 hash
2557 table
2558 algorithm
2559 is
2560 usually
2561 fast
2562 enough
2563 and
2564 the
2565 percentage
2566 of
2567 a
2568 calculation
2569 spent
2570 in
2571 hash
2572 table
2573 code
2574 is
2575 low
2576 Memory
2577 usage
2578 is
2579 rarely
2580 considered
2581 excessive
2582 Therefore
2583 in
2584 most
2585 cases
2586 the
2587 differences
2588 between
2589 these
2590 algorithms
2591 are
2592 marginal
2593 and
2594 other
2595 considerations
2596 typically
2597 come
2598 into
2599 play
2600 Coalesced
2601 hashing
2602 A
2603 hybrid
2604 of
2605 chaining
2606 and
2607 open
2608 addressing
2609 coalesced
2610 hashing
2611 links
2612 together
2613 chains
2614 of
2615 nodes
2616 within
2617 the
2618 table
2619 itself12
2620 Like
2621 open
2622 addressing
2623 it
2624 achieves
2625 space
2626 usage
2627 and
2628 somewhat
2629 diminished
2630 cache
2631 advantages
2632 over
2633 chaining
2634 Like
2635 chaining
2636 it
2637 does
2638 not
2639 exhibit
2640 clustering
2641 effects
2642 in
2643 fact
2644 the
2645 table
2646 can
2647 be
2648 efficiently
2649 filled
2650 to
2651 a
2652 high
2653 density
2654 Unlike
2655 chaining
2656 it
2657 cannot
2658 have
2659 more
2660 elements
2661 than
2662 table
2663 slots
2664 Cuckoo
2665 hashing
2666 Another
2667 alternative
2668 open
2669 addressing
2670 solution
2671 is
2672 cuckoo
2673 hashing
2674 which
2675 ensures
2676 constant
2677 lookup
2678 time
2679 in
2680 the
2681 worst
2682 case
2683 and
2684 constant
2685 amortized
2686 time
2687 for
2688 insertions
2689 and
2690 deletions
2691 It
2692 uses
2693 two
2694 or
2695 more
2696 hash
2697 functions
2698 which
2699 means
2700 any
2701 key
2702 value
2703 pair
2704 could
2705 be
2706 in
2707 two
2708 or
2709 more
2710 locations
2711 For
2712 lookup
2713 the
2714 first
2715 hash
2716 function
2717 is
2718 used
2719 if
2720 the
2721 key
2722 value
2723 is
2724 not
2725 found
2726 then
2727 the
2728 second
2729 hash
2730 function
2731 is
2732 used
2733 and
2734 so
2735 on
2736 If
2737 a
2738 collision
2739 happens
2740 during
2741 insertion
2742 then
2743 the
2744 key
2745 is
2746 re
2747 hashed
2748 with
2749 the
2750 second
2751 hash
2752 function
2753 to
2754 map
2755 it
2756 to
2757 another
2758 bucket
2759 If
2760 all
2761 hash
2762 functions
2763 are
2764 used
2765 and
2766 there
2767 is
2768 still
2769 a
2770 collision
2771 then
2772 the
2773 key
2774 it
2775 collided
2776 with
2777 is
2778 removed
2779 to
2780 make
2781 space
2782 for
2783 the
2784 new
2785 key
2786 and
2787 the
2788 old
2789 key
2790 is
2791 re
2792 hashed
2793 with
2794 one
2795 of
2796 the
2797 other
2798 hash
2799 functions
2800 which
2801 maps
2802 it
2803 to
2804 another
2805 bucket
2806 If
2807 that
2808 location
2809 also
2810 results
2811 in
2812 a
2813 collision
2814 then
2815 the
2816 process
2817 repeats
2818 until
2819 there
2820 is
2821 no
2822 collision
2823 or
2824 the
2825 process
2826 traverses
2827 all
2828 the
2829 buckets
2830 at
2831 which
2832 point
2833 the
2834 table
2835 is
2836 resized
2837 By
2838 combining
2839 multiple
2840 hash
2841 functions
2842 with
2843 multiple
2844 cells
2845 per
2846 bucket
2847 very
2848 high
2849 space
2850 utilisation
2851 can
2852 be
2853 achieved
2854 Hopscotch
2855 hashing
2856 Another
2857 alternative
2858 open
2859 addressing
2860 solution
2861 is
2862 hopscotch
2863 hashing
2864 13
2865 which
2866 combines
2867 the
2868 approaches
2869 of
2870 cuckoo
2871 hashing
2872 and
2873 linear
2874 probing
2875 yet
2876 seems
2877 in
2878 general
2879 to
2880 avoid
2881 their
2882 limitations
2883 In
2884 particular
2885 it
2886 works
2887 well
2888 even
2889 when
2890 the
2891 load
2892 factor
2893 grows
2894 beyond
2895 09
2896 The
2897 algorithm
2898 is
2899 well
2900 suited
2901 for
2902 implementing
2903 a
2904 resizable
2905 concurrent
2906 hash
2907 table
2908 The
2909 hopscotch
2910 hashing
2911 algorithm
2912 works
2913 by
2914 defining
2915 a
2916 neighborhood
2917 of
2918 buckets
2919 near
2920 the
2921 original
2922 hashed
2923 bucket
2924 where
2925 a
2926 given
2927 entry
2928 is
2929 always
2930 found
2931 Thus
2932 search
2933 is
2934 limited
2935 to
2936 the
2937 number
2938 of
2939 entries
2940 in
2941 this
2942 neighborhood
2943 which
2944 is
2945 logarithmic
2946 in
2947 the
2948 worst
2949 case
2950 constant
2951 on
2952 average
2953 and
2954 with
2955 proper
2956 alignment
2957 of
2958 the
2959 neighborhood
2960 typically
2961 requires
2962 one
2963 cache
2964 miss
2965 When
2966 inserting
2967 an
2968 entry
2969 one
2970 first
2971 attempts
2972 to
2973 add
2974 it
2975 to
2976 a
2977 bucket
2978 in
2979 the
2980 neighborhood
2981 However
2982 if
2983 all
2984 buckets
2985 in
2986 this
2987 neighborhood
2988 are
2989 occupied
2990 the
2991 algorithm
2992 traverses
2993 buckets
2994 in
2995 sequence
2996 until
2997 an
2998 open
2999 slot
3000 an
3001 unoccupied
3002 bucket
3003 is
3004 found
3005 as
3006 in
3007 linear
3008 probing
3009 At
3010 that
3011 point
3012 since
3013 the
3014 empty
3015 bucket
3016 is
3017 outside
3018 the
3019 neighborhood
3020 items
3021 are
3022 repeatedly
3023 displaced
3024 in
3025 a
3026 sequence
3027 of
3028 hops
3029 This
3030 is
3031 similar
3032 to
3033 cuckoo
3034 hashing
3035 but
3036 with
3037 the
3038 difference
3039 that
3040 in
3041 this
3042 case
3043 the
3044 empty
3045 slot
3046 is
3047 being
3048 moved
3049 into
3050 the
3051 neighborhood
3052 instead
3053 of
3054 items
3055 being
3056 moved
3057 out
3058 with
3059 the
3060 hope
3061 of
3062 eventually
3063 finding
3064 an
3065 empty
3066 slot
3067 Each
3068 hop
3069 brings
3070 the
3071 open
3072 slot
3073 closer
3074 to
3075 the
3076 original
3077 neighborhood
3078 without
3079 invalidating
3080 the
3081 neighborhood
3082 property
3083 of
3084 any
3085 of
3086 the
3087 buckets
3088 along
3089 the
3090 way
3091 In
3092 the
3093 end
3094 the
3095 open
3096 slot
3097 has
3098 been
3099 moved
3100 into
3101 the
3102 neighborhood
3103 and
3104 the
3105 entry
3106 being
3107 inserted
3108 can
3109 be
3110 added
3111 to
3112 it
3113 Robin
3114 Hood
3115 hashing
3116 One
3117 interesting
3118 variation
3119 on
3120 double
3121 hashing
3122 collision
3123 resolution
3124 is
3125 Robin
3126 Hood
3127 hashing1415
3128 The
3129 idea
3130 is
3131 that
3132 a
3133 new
3134 key
3135 may
3136 displace
3137 a
3138 key
3139 already
3140 inserted
3141 if
3142 its
3143 probe
3144 count
3145 is
3146 larger
3147 than
3148 that
3149 of
3150 the
3151 key
3152 at
3153 the
3154 current
3155 position
3156 The
3157 net
3158 effect
3159 of
3160 this
3161 is
3162 that
3163 it
3164 reduces
3165 worst
3166 case
3167 search
3168 times
3169 in
3170 the
3171 table
3172 This
3173 is
3174 similar
3175 to
3176 ordered
3177 hash
3178 tables16
3179 except
3180 that
3181 the
3182 criterion
3183 for
3184 bumping
3185 a
3186 key
3187 does
3188 not
3189 depend
3190 on
3191 a
3192 direct
3193 relationship
3194 between
3195 the
3196 keys
3197 Since
3198 both
3199 the
3200 worst
3201 case
3202 and
3203 the
3204 variation
3205 in
3206 the
3207 number
3208 of
3209 probes
3210 is
3211 reduced
3212 dramatically
3213 an
3214 interesting
3215 variation
3216 is
3217 to
3218 probe
3219 the
3220 table
3221 starting
3222 at
3223 the
3224 expected
3225 successful
3226 probe
3227 value
3228 and
3229 then
3230 expand
3231 from
3232 that
3233 position
3234 in
3235 both
3236 directions17
3237 External
3238 Robin
3239 Hashing
3240 is
3241 an
3242 extension
3243 of
3244 this
3245 algorithm
3246 where
3247 the
3248 table
3249 is
3250 stored
3251 in
3252 an
3253 external
3254 file
3255 and
3256 each
3257 table
3258 position
3259 corresponds
3260 to
3261 a
3262 fixed
3263 sized
3264 page
3265 or
3266 bucket
3267 with
3268 B
3269 records18
3270 2
3271 choice
3272 hashing
3273 2
3274 choice
3275 hashing
3276 employs
3277 2
3278 different
3279 hash
3280 functions
3281 h1x
3282 and
3283 h2x
3284 for
3285 the
3286 hash
3287 table
3288 Both
3289 hash
3290 functions
3291 are
3292 used
3293 to
3294 compute
3295 two
3296 table
3297 locations
3298 When
3299 an
3300 object
3301 is
3302 inserted
3303 in
3304 the
3305 table
3306 then
3307 it
3308 is
3309 placed
3310 in
3311 the
3312 table
3313 location
3314 that
3315 contains
3316 fewer
3317 objects
3318 with
3319 the
3320 default
3321 being
3322 the
3323 h1x
3324 table
3325 location
3326 if
3327 there
3328 is
3329 equality
3330 in
3331 bucket
3332 size
3333 2
3334 choice
3335 hashing
3336 employs
3337 the
3338 principle
3339 of
3340 the
3341 power
3342 of
3343 two
3344 choices19
3345 Dynamic
3346 resizing
3347 The
3348 good
3349 functioning
3350 of
3351 a
3352 hash
3353 table
3354 depends
3355 on
3356 the
3357 fact
3358 that
3359 the
3360 table
3361 size
3362 is
3363 proportional
3364 to
3365 the
3366 number
3367 of
3368 entries
3369 With
3370 a
3371 fixed
3372 size
3373 and
3374 the
3375 common
3376 structures
3377 it
3378 is
3379 similar
3380 to
3381 linear
3382 search
3383 except
3384 with
3385 a
3386 better
3387 constant
3388 factor
3389 In
3390 some
3391 cases
3392 the
3393 number
3394 of
3395 entries
3396 may
3397 be
3398 definitely
3399 known
3400 in
3401 advance
3402 for
3403 example
3404 keywords
3405 in
3406 a
3407 language
3408 More
3409 commonly
3410 this
3411 is
3412 not
3413 known
3414 for
3415 sure
3416 if
3417 only
3418 due
3419 to
3420 later
3421 changes
3422 in
3423 code
3424 and
3425 data
3426 It
3427 is
3428 one
3429 serious
3430 although
3431 common
3432 mistake
3433 to
3434 not
3435 provide
3436 any
3437 way
3438 for
3439 the
3440 table
3441 to
3442 resize
3443 A
3444 general
3445 purpose
3446 hash
3447 table
3448 class
3449 will
3450 almost
3451 always
3452 have
3453 some
3454 way
3455 to
3456 resize
3457 and
3458 it
3459 is
3460 good
3461 practice
3462 even
3463 for
3464 simple
3465 custom
3466 tables
3467 An
3468 implementation
3469 should
3470 check
3471 the
3472 load
3473 factor
3474 and
3475 do
3476 something
3477 if
3478 it
3479 becomes
3480 too
3481 large
3482 this
3483 needs
3484 to
3485 be
3486 done
3487 only
3488 on
3489 inserts
3490 since
3491 that
3492 is
3493 the
3494 only
3495 thing
3496 that
3497 would
3498 increase
3499 it
3500 To
3501 keep
3502 the
3503 load
3504 factor
3505 under
3506 a
3507 certain
3508 limit
3509 eg
3510 under
3511 3
3512 4
3513 many
3514 table
3515 implementations
3516 expand
3517 the
3518 table
3519 when
3520 items
3521 are
3522 inserted
3523 For
3524 example
3525 in
3526 Javas
3527 HashMap
3528 class
3529 the
3530 default
3531 load
3532 factor
3533 threshold
3534 for
3535 table
3536 expansion
3537 is
3538 075
3539 and
3540 in
3541 Pythons
3542 dict
3543 table
3544 size
3545 is
3546 resized
3547 when
3548 load
3549 factor
3550 is
3551 greater
3552 than
3553 2
3554 3
3555 Since
3556 buckets
3557 are
3558 usually
3559 implemented
3560 on
3561 top
3562 of
3563 a
3564 dynamic
3565 array
3566 and
3567 any
3568 constant
3569 proportion
3570 for
3571 resizing
3572 greater
3573 than
3574 1
3575 will
3576 keep
3577 the
3578 load
3579 factor
3580 under
3581 the
3582 desired
3583 limit
3584 the
3585 exact
3586 choice
3587 of
3588 the
3589 constant
3590 is
3591 determined
3592 by
3593 the
3594 same
3595 space
3596 time
3597 tradeoff
3598 as
3599 for
3600 dynamic
3601 arrays
3602 Resizing
3603 is
3604 accompanied
3605 by
3606 a
3607 full
3608 or
3609 incremental
3610 table
3611 rehash
3612 whereby
3613 existing
3614 items
3615 are
3616 mapped
3617 to
3618 new
3619 bucket
3620 locations
3621 To
3622 limit
3623 the
3624 proportion
3625 of
3626 memory
3627 wasted
3628 due
3629 to
3630 empty
3631 buckets
3632 some
3633 implementations
3634 also
3635 shrink
3636 the
3637 size
3638 of
3639 the
3640 table
3641 followed
3642 by
3643 a
3644 rehash
3645 when
3646 items
3647 are
3648 deleted
3649 From
3650 the
3651 point
3652 of
3653 space
3654 time
3655 tradeoffs
3656 this
3657 operation
3658 is
3659 similar
3660 to
3661 the
3662 deallocation
3663 in
3664 dynamic
3665 arrays
3666 Resizing
3667 by
3668 copying
3669 all
3670 entries
3671 A
3672 common
3673 approach
3674 is
3675 to
3676 automatically
3677 trigger
3678 a
3679 complete
3680 resizing
3681 when
3682 the
3683 load
3684 factor
3685 exceeds
3686 some
3687 threshold
3688 rmax
3689 Then
3690 a
3691 new
3692 larger
3693 table
3694 is
3695 allocated
3696 all
3697 the
3698 entries
3699 of
3700 the
3701 old
3702 table
3703 are
3704 removed
3705 and
3706 inserted
3707 into
3708 this
3709 new
3710 table
3711 and
3712 the
3713 old
3714 table
3715 is
3716 returned
3717 to
3718 the
3719 free
3720 storage
3721 pool
3722 Symmetrically
3723 when
3724 the
3725 load
3726 factor
3727 falls
3728 below
3729 a
3730 second
3731 threshold
3732 rmin
3733 all
3734 entries
3735 are
3736 moved
3737 to
3738 a
3739 new
3740 smaller
3741 table
3742 If
3743 the
3744 table
3745 size
3746 increases
3747 or
3748 decreases
3749 by
3750 a
3751 fixed
3752 percentage
3753 at
3754 each
3755 expansion
3756 the
3757 total
3758 cost
3759 of
3760 these
3761 resizings
3762 amortized
3763 over
3764 all
3765 insert
3766 and
3767 delete
3768 operations
3769 is
3770 still
3771 a
3772 constant
3773 independent
3774 of
3775 the
3776 number
3777 of
3778 entries
3779 n
3780 and
3781 of
3782 the
3783 number
3784 m
3785 of
3786 operations
3787 performed
3788 For
3789 example
3790 consider
3791 a
3792 table
3793 that
3794 was
3795 created
3796 with
3797 the
3798 minimum
3799 possible
3800 size
3801 and
3802 is
3803 doubled
3804 each
3805 time
3806 the
3807 load
3808 ratio
3809 exceeds
3810 some
3811 threshold
3812 If
3813 m
3814 elements
3815 are
3816 inserted
3817 into
3818 that
3819 table
3820 the
3821 total
3822 number
3823 of
3824 extra
3825 re
3826 insertions
3827 that
3828 occur
3829 in
3830 all
3831 dynamic
3832 resizings
3833 of
3834 the
3835 table
3836 is
3837 at
3838 most
3839 m
3840 1
3841 In
3842 other
3843 words
3844 dynamic
3845 resizing
3846 roughly
3847 doubles
3848 the
3849 cost
3850 of
3851 each
3852 insert
3853 or
3854 delete
3855 operation
3856 Incremental
3857 resizing
3858 Some
3859 hash
3860 table
3861 implementations
3862 notably
3863 in
3864 real
3865 time
3866 systems
3867 cannot
3868 pay
3869 the
3870 price
3871 of
3872 enlarging
3873 the
3874 hash
3875 table
3876 all
3877 at
3878 once
3879 because
3880 it
3881 may
3882 interrupt
3883 time
3884 critical
3885 operations
3886 If
3887 one
3888 cannot
3889 avoid
3890 dynamic
3891 resizing
3892 a
3893 solution
3894 is
3895 to
3896 perform
3897 the
3898 resizing
3899 gradually
3900 During
3901 the
3902 resize
3903 allocate
3904 the
3905 new
3906 hash
3907 table
3908 but
3909 keep
3910 the
3911 old
3912 table
3913 unchanged
3914 In
3915 each
3916 lookup
3917 or
3918 delete
3919 operation
3920 check
3921 both
3922 tables
3923 Perform
3924 insertion
3925 operations
3926 only
3927 in
3928 the
3929 new
3930 table
3931 At
3932 each
3933 insertion
3934 also
3935 move
3936 r
3937 elements
3938 from
3939 the
3940 old
3941 table
3942 to
3943 the
3944 new
3945 table
3946 When
3947 all
3948 elements
3949 are
3950 removed
3951 from
3952 the
3953 old
3954 table
3955 deallocate
3956 it
3957 To
3958 ensure
3959 that
3960 the
3961 old
3962 table
3963 is
3964 completely
3965 copied
3966 over
3967 before
3968 the
3969 new
3970 table
3971 itself
3972 needs
3973 to
3974 be
3975 enlarged
3976 it
3977 is
3978 necessary
3979 to
3980 increase
3981 the
3982 size
3983 of
3984 the
3985 table
3986 by
3987 a
3988 factor
3989 of
3990 at
3991 least
3992 r
3993 1
3994 r
3995 during
3996 resizing
3997 Monotonic
3998 keys
3999 If
4000 it
4001 is
4002 known
4003 that
4004 key
4005 values
4006 will
4007 always
4008 increase
4009 or
4010 decrease
4011 monotonically
4012 then
4013 a
4014 variation
4015 of
4016 consistent
4017 hashing
4018 can
4019 be
4020 achieved
4021 by
4022 keeping
4023 a
4024 list
4025 of
4026 the
4027 single
4028 most
4029 recent
4030 key
4031 value
4032 at
4033 each
4034 hash
4035 table
4036 resize
4037 operation
4038 Upon
4039 lookup
4040 keys
4041 that
4042 fall
4043 in
4044 the
4045 ranges
4046 defined
4047 by
4048 these
4049 list
4050 entries
4051 are
4052 directed
4053 to
4054 the
4055 appropriate
4056 hash
4057 function
4058 and
4059 indeed
4060 hash
4061 table
4062 both
4063 of
4064 which
4065 can
4066 be
4067 different
4068 for
4069 each
4070 range
4071 Since
4072 it
4073 is
4074 common
4075 to
4076 grow
4077 the
4078 overall
4079 number
4080 of
4081 entries
4082 by
4083 doubling
4084 there
4085 will
4086 only
4087 be
4088 OlgN
4089 ranges
4090 to
4091 check
4092 and
4093 binary
4094 search
4095 time
4096 for
4097 the
4098 redirection
4099 would
4100 be
4101 OlglgN
4102 As
4103 with
4104 consistent
4105 hashing
4106 this
4107 approach
4108 guarantees
4109 that
4110 any
4111 keys
4112 hash
4113 once
4114 issued
4115 will
4116 never
4117 change
4118 even
4119 when
4120 the
4121 hash
4122 table
4123 is
4124 later
4125 grown
4126 Other
4127 solutions
4128 Linear
4129 hashing20
4130 is
4131 a
4132 hash
4133 table
4134 algorithm
4135 that
4136 permits
4137 incremental
4138 hash
4139 table
4140 expansion
4141 It
4142 is
4143 implemented
4144 using
4145 a
4146 single
4147 hash
4148 table
4149 but
4150 with
4151 two
4152 possible
4153 look
4154 up
4155 functions
4156 Another
4157 way
4158 to
4159 decrease
4160 the
4161 cost
4162 of
4163 table
4164 resizing
4165 is
4166 to
4167 choose
4168 a
4169 hash
4170 function
4171 in
4172 such
4173 a
4174 way
4175 that
4176 the
4177 hashes
4178 of
4179 most
4180 values
4181 do
4182 not
4183 change
4184 when
4185 the
4186 table
4187 is
4188 resized
4189 This
4190 approach
4191 called
4192 consistent
4193 hashing
4194 is
4195 prevalent
4196 in
4197 disk
4198 based
4199 and
4200 distributed
4201 hashes
4202 where
4203 rehashing
4204 is
4205 prohibitively
4206 costly
4207 Performance
4208 analysis
4209 In
4210 the
4211 simplest
4212 model
4213 the
4214 hash
4215 function
4216 is
4217 completely
4218 unspecified
4219 and
4220 the
4221 table
4222 does
4223 not
4224 resize
4225 For
4226 the
4227 best
4228 possible
4229 choice
4230 of
4231 hash
4232 function
4233 a
4234 table
4235 of
4236 size
4237 k
4238 with
4239 open
4240 addressing
4241 has
4242 no
4243 collisions
4244 and
4245 holds
4246 up
4247 to
4248 k
4249 elements
4250 with
4251 a
4252 single
4253 comparison
4254 for
4255 successful
4256 lookup
4257 and
4258 a
4259 table
4260 of
4261 size
4262 k
4263 with
4264 chaining
4265 and
4266 n
4267 keys
4268 has
4269 the
4270 minimum
4271 max0
4272 n
4273 k
4274 collisions
4275 and
4276 O1
4277 n
4278 k
4279 comparisons
4280 for
4281 lookup
4282 For
4283 the
4284 worst
4285 choice
4286 of
4287 hash
4288 function
4289 every
4290 insertion
4291 causes
4292 a
4293 collision
4294 and
4295 hash
4296 tables
4297 degenerate
4298 to
4299 linear
4300 search
4301 with
4302 Ωn
4303 amortized
4304 comparisons
4305 per
4306 insertion
4307 and
4308 up
4309 to
4310 n
4311 comparisons
4312 for
4313 a
4314 successful
4315 lookup
4316 Adding
4317 rehashing
4318 to
4319 this
4320 model
4321 is
4322 straightforward
4323 As
4324 in
4325 a
4326 dynamic
4327 array
4328 geometric
4329 resizing
4330 by
4331 a
4332 factor
4333 of
4334 b
4335 implies
4336 that
4337 only
4338 n
4339 bi
4340 keys
4341 are
4342 inserted
4343 i
4344 or
4345 more
4346 times
4347 so
4348 that
4349 the
4350 total
4351 number
4352 of
4353 insertions
4354 is
4355 bounded
4356 above
4357 by
4358 bn
4359 b
4360 1
4361 which
4362 is
4363 On
4364 By
4365 using
4366 rehashing
4367 to
4368 maintain
4369 n
4370 k
4371 tables
4372 using
4373 both
4374 chaining
4375 and
4376 open
4377 addressing
4378 can
4379 have
4380 unlimited
4381 elements
4382 and
4383 perform
4384 successful
4385 lookup
4386 in
4387 a
4388 single
4389 comparison
4390 for
4391 the
4392 best
4393 choice
4394 of
4395 hash
4396 function
4397 In
4398 more
4399 realistic
4400 models
4401 the
4402 hash
4403 function
4404 is
4405 a
4406 random
4407 variable
4408 over
4409 a
4410 probability
4411 distribution
4412 of
4413 hash
4414 functions
4415 and
4416 performance
4417 is
4418 computed
4419 on
4420 average
4421 over
4422 the
4423 choice
4424 of
4425 hash
4426 function
4427 When
4428 this
4429 distribution
4430 is
4431 uniform
4432 the
4433 assumption
4434 is
4435 called
4436 simple
4437 uniform
4438 hashing
4439 and
4440 it
4441 can
4442 be
4443 shown
4444 that
4445 hashing
4446 with
4447 chaining
4448 requires
4449 Θ1
4450 n
4451 k
4452 comparisons
4453 on
4454 average
4455 for
4456 an
4457 unsuccessful
4458 lookup
4459 and
4460 hashing
4461 with
4462 open
4463 addressing
4464 requires
4465 Θ1
4466 1
4467 n
4468 k21
4469 Both
4470 these
4471 bounds
4472 are
4473 constant
4474 if
4475 we
4476 maintain
4477 n
4478 k
4479 c
4480 using
4481 table
4482 resizing
4483 where
4484 c
4485 is
4486 a
4487 fixed
4488 constant
4489 less
4490 than
4491 1
4492 Features
4493 Advantages
4494 The
4495 main
4496 advantage
4497 of
4498 hash
4499 tables
4500 over
4501 other
4502 table
4503 data
4504 structures
4505 is
4506 speed
4507 This
4508 advantage
4509 is
4510 more
4511 apparent
4512 when
4513 the
4514 number
4515 of
4516 entries
4517 is
4518 large
4519 Hash
4520 tables
4521 are
4522 particularly
4523 efficient
4524 when
4525 the
4526 maximum
4527 number
4528 of
4529 entries
4530 can
4531 be
4532 predicted
4533 in
4534 advance
4535 so
4536 that
4537 the
4538 bucket
4539 array
4540 can
4541 be
4542 allocated
4543 once
4544 with
4545 the
4546 optimum
4547 size
4548 and
4549 never
4550 resized
4551 If
4552 the
4553 set
4554 of
4555 key
4556 value
4557 pairs
4558 is
4559 fixed
4560 and
4561 known
4562 ahead
4563 of
4564 time
4565 so
4566 insertions
4567 and
4568 deletions
4569 are
4570 not
4571 allowed
4572 one
4573 may
4574 reduce
4575 the
4576 average
4577 lookup
4578 cost
4579 by
4580 a
4581 careful
4582 choice
4583 of
4584 the
4585 hash
4586 function
4587 bucket
4588 table
4589 size
4590 and
4591 internal
4592 data
4593 structures
4594 In
4595 particular
4596 one
4597 may
4598 be
4599 able
4600 to
4601 devise
4602 a
4603 hash
4604 function
4605 that
4606 is
4607 collision
4608 free
4609 or
4610 even
4611 perfect
4612 see
4613 below
4614 In
4615 this
4616 case
4617 the
4618 keys
4619 need
4620 not
4621 be
4622 stored
4623 in
4624 the
4625 table
4626 Drawbacks
4627 Although
4628 operations
4629 on
4630 a
4631 hash
4632 table
4633 take
4634 constant
4635 time
4636 on
4637 average
4638 the
4639 cost
4640 of
4641 a
4642 good
4643 hash
4644 function
4645 can
4646 be
4647 significantly
4648 higher
4649 than
4650 the
4651 inner
4652 loop
4653 of
4654 the
4655 lookup
4656 algorithm
4657 for
4658 a
4659 sequential
4660 list
4661 or
4662 search
4663 tree
4664 Thus
4665 hash
4666 tables
4667 are
4668 not
4669 effective
4670 when
4671 the
4672 number
4673 of
4674 entries
4675 is
4676 very
4677 small
4678 However
4679 in
4680 some
4681 cases
4682 the
4683 high
4684 cost
4685 of
4686 computing
4687 the
4688 hash
4689 function
4690 can
4691 be
4692 mitigated
4693 by
4694 saving
4695 the
4696 hash
4697 value
4698 together
4699 with
4700 the
4701 key
4702 For
4703 certain
4704 string
4705 processing
4706 applications
4707 such
4708 as
4709 spell
4710 checking
4711 hash
4712 tables
4713 may
4714 be
4715 less
4716 efficient
4717 than
4718 tries
4719 finite
4720 automata
4721 or
4722 Judy
4723 arrays
4724 Also
4725 if
4726 each
4727 key
4728 is
4729 represented
4730 by
4731 a
4732 small
4733 enough
4734 number
4735 of
4736 bits
4737 then
4738 instead
4739 of
4740 a
4741 hash
4742 table
4743 one
4744 may
4745 use
4746 the
4747 key
4748 directly
4749 as
4750 the
4751 index
4752 into
4753 an
4754 array
4755 of
4756 values
4757 Note
4758 that
4759 there
4760 are
4761 no
4762 collisions
4763 in
4764 this
4765 case
4766 The
4767 entries
4768 stored
4769 in
4770 a
4771 hash
4772 table
4773 can
4774 be
4775 enumerated
4776 efficiently
4777 at
4778 constant
4779 cost
4780 per
4781 entry
4782 but
4783 only
4784 in
4785 some
4786 pseudo
4787 random
4788 order
4789 Therefore
4790 there
4791 is
4792 no
4793 efficient
4794 way
4795 to
4796 locate
4797 an
4798 entry
4799 whose
4800 key
4801 is
4802 nearest
4803 to
4804 a
4805 given
4806 key
4807 Listing
4808 all
4809 n
4810 entries
4811 in
4812 some
4813 specific
4814 order
4815 generally
4816 requires
4817 a
4818 separate
4819 sorting
4820 step
4821 whose
4822 cost
4823 is
4824 proportional
4825 to
4826 logn
4827 per
4828 entry
4829 In
4830 comparison
4831 ordered
4832 search
4833 trees
4834 have
4835 lookup
4836 and
4837 insertion
4838 cost
4839 proportional
4840 to
4841 logn
4842 but
4843 allow
4844 finding
4845 the
4846 nearest
4847 key
4848 at
4849 about
4850 the
4851 same
4852 cost
4853 and
4854 ordered
4855 enumeration
4856 of
4857 all
4858 entries
4859 at
4860 constant
4861 cost
4862 per
4863 entry
4864 If
4865 the
4866 keys
4867 are
4868 not
4869 stored
4870 because
4871 the
4872 hash
4873 function
4874 is
4875 collision
4876 free
4877 there
4878 may
4879 be
4880 no
4881 easy
4882 way
4883 to
4884 enumerate
4885 the
4886 keys
4887 that
4888 are
4889 present
4890 in
4891 the
4892 table
4893 at
4894 any
4895 given
4896 moment
4897 Although
4898 the
4899 average
4900 cost
4901 per
4902 operation
4903 is
4904 constant
4905 and
4906 fairly
4907 small
4908 the
4909 cost
4910 of
4911 a
4912 single
4913 operation
4914 may
4915 be
4916 quite
4917 high
4918 In
4919 particular
4920 if
4921 the
4922 hash
4923 table
4924 uses
4925 dynamic
4926 resizing
4927 an
4928 insertion
4929 or
4930 deletion
4931 operation
4932 may
4933 occasionally
4934 take
4935 time
4936 proportional
4937 to
4938 the
4939 number
4940 of
4941 entries
4942 This
4943 may
4944 be
4945 a
4946 serious
4947 drawback
4948 in
4949 real
4950 time
4951 or
4952 interactive
4953 applications
4954 Hash
4955 tables
4956 in
4957 general
4958 exhibit
4959 poor
4960 locality
4961 of
4962 reference
4963 that
4964 is
4965 the
4966 data
4967 to
4968 be
4969 accessed
4970 is
4971 distributed
4972 seemingly
4973 at
4974 random
4975 in
4976 memory
4977 Because
4978 hash
4979 tables
4980 cause
4981 access
4982 patterns
4983 that
4984 jump
4985 around
4986 this
4987 can
4988 trigger
4989 microprocessor
4990 cache
4991 misses
4992 that
4993 cause
4994 long
4995 delays
4996 Compact
4997 data
4998 structures
4999 such
5000 as
5001 arrays
5002 searched
5003 with
5004 linear
5005 search
5006 may
5007 be
5008 faster
5009 if
5010 the
5011 table
5012 is
5013 relatively
5014 small
5015 and
5016 keys
5017 are
5018 compact
5019 The
5020 optimal
5021 performance
5022 point
5023 varies
5024 from
5025 system
5026 to
5027 system
5028 Hash
5029 tables
5030 become
5031 quite
5032 inefficient
5033 when
5034 there
5035 are
5036 many
5037 collisions
5038 While
5039 extremely
5040 uneven
5041 hash
5042 distributions
5043 are
5044 extremely
5045 unlikely
5046 to
5047 arise
5048 by
5049 chance
5050 a
5051 malicious
5052 adversary
5053 with
5054 knowledge
5055 of
5056 the
5057 hash
5058 function
5059 may
5060 be
5061 able
5062 to
5063 supply
5064 information
5065 to
5066 a
5067 hash
5068 that
5069 creates
5070 worst
5071 case
5072 behavior
5073 by
5074 causing
5075 excessive
5076 collisions
5077 resulting
5078 in
5079 very
5080 poor
5081 performance
5082 eg
5083 a
5084 denial
5085 of
5086 service
5087 attack22
5088 In
5089 critical
5090 applications
5091 universal
5092 hashing
5093 can
5094 be
5095 used
5096 a
5097 data
5098 structure
5099 with
5100 better
5101 worst
5102 case
5103 guarantees
5104 may
5105 be
5106 preferable23
5107 Uses
5108 Question
5109 book
5110 newsvg
5111 This
5112 section
5113 does
5114 not
5115 cite
5116 any
5117 references
5118 or
5119 sources
5120 Please
5121 help
5122 improve
5123 this
5124 section
5125 by
5126 adding
5127 citations
5128 to
5129 reliable
5130 sources
5131 Unsourced
5132 material
5133 may
5134 be
5135 challenged
5136 and
5137 removed
5138 July
5139 2013
5140 Associative
5141 arrays
5142 Hash
5143 tables
5144 are
5145 commonly
5146 used
5147 to
5148 implement
5149 many
5150 types
5151 of
5152 in
5153 memory
5154 tables
5155 They
5156 are
5157 used
5158 to
5159 implement
5160 associative
5161 arrays
5162 arrays
5163 whose
5164 indices
5165 are
5166 arbitrary
5167 strings
5168 or
5169 other
5170 complicated
5171 objects
5172 especially
5173 in
5174 interpreted
5175 programming
5176 languages
5177 like
5178 Ruby
5179 Python
5180 and
5181 PHP
5182 When
5183 storing
5184 a
5185 new
5186 item
5187 into
5188 a
5189 multimap
5190 and
5191 a
5192 hash
5193 collision
5194 occurs
5195 the
5196 multimap
5197 unconditionally
5198 stores
5199 both
5200 items
5201 When
5202 storing
5203 a
5204 new
5205 item
5206 into
5207 a
5208 typical
5209 associative
5210 array
5211 and
5212 a
5213 hash
5214 collision
5215 occurs
5216 but
5217 the
5218 actual
5219 keys
5220 themselves
5221 are
5222 different
5223 the
5224 associative
5225 array
5226 likewise
5227 stores
5228 both
5229 items
5230 However
5231 if
5232 the
5233 key
5234 of
5235 the
5236 new
5237 item
5238 exactly
5239 matches
5240 the
5241 key
5242 of
5243 an
5244 old
5245 item
5246 the
5247 associative
5248 array
5249 typically
5250 erases
5251 the
5252 old
5253 item
5254 and
5255 overwrites
5256 it
5257 with
5258 the
5259 new
5260 item
5261 so
5262 every
5263 item
5264 in
5265 the
5266 table
5267 has
5268 a
5269 unique
5270 key
5271 Database
5272 indexing
5273 Hash
5274 tables
5275 may
5276 also
5277 be
5278 used
5279 as
5280 disk
5281 based
5282 data
5283 structures
5284 and
5285 database
5286 indices
5287 such
5288 as
5289 in
5290 dbm
5291 although
5292 B
5293 trees
5294 are
5295 more
5296 popular
5297 in
5298 these
5299 applications
5300 Caches
5301 Hash
5302 tables
5303 can
5304 be
5305 used
5306 to
5307 implement
5308 caches
5309 auxiliary
5310 data
5311 tables
5312 that
5313 are
5314 used
5315 to
5316 speed
5317 up
5318 the
5319 access
5320 to
5321 data
5322 that
5323 is
5324 primarily
5325 stored
5326 in
5327 slower
5328 media
5329 In
5330 this
5331 application
5332 hash
5333 collisions
5334 can
5335 be
5336 handled
5337 by
5338 discarding
5339 one
5340 of
5341 the
5342 two
5343 colliding
5344 entries
5345 usually
5346 erasing
5347 the
5348 old
5349 item
5350 that
5351 is
5352 currently
5353 stored
5354 in
5355 the
5356 table
5357 and
5358 overwriting
5359 it
5360 with
5361 the
5362 new
5363 item
5364 so
5365 every
5366 item
5367 in
5368 the
5369 table
5370 has
5371 a
5372 unique
5373 hash
5374 value
5375 Sets
5376 Besides
5377 recovering
5378 the
5379 entry
5380 that
5381 has
5382 a
5383 given
5384 key
5385 many
5386 hash
5387 table
5388 implementations
5389 can
5390 also
5391 tell
5392 whether
5393 such
5394 an
5395 entry
5396 exists
5397 or
5398 not
5399 Those
5400 structures
5401 can
5402 therefore
5403 be
5404 used
5405 to
5406 implement
5407 a
5408 set
5409 data
5410 structure
5411 which
5412 merely
5413 records
5414 whether
5415 a
5416 given
5417 key
5418 belongs
5419 to
5420 a
5421 specified
5422 set
5423 of
5424 keys
5425 In
5426 this
5427 case
5428 the
5429 structure
5430 can
5431 be
5432 simplified
5433 by
5434 eliminating
5435 all
5436 parts
5437 that
5438 have
5439 to
5440 do
5441 with
5442 the
5443 entry
5444 values
5445 Hashing
5446 can
5447 be
5448 used
5449 to
5450 implement
5451 both
5452 static
5453 and
5454 dynamic
5455 sets
5456 Object
5457 representation
5458 Several
5459 dynamic
5460 languages
5461 such
5462 as
5463 Perl
5464 Python
5465 JavaScript
5466 and
5467 Ruby
5468 use
5469 hash
5470 tables
5471 to
5472 implement
5473 objects
5474 In
5475 this
5476 representation
5477 the
5478 keys
5479 are
5480 the
5481 names
5482 of
5483 the
5484 members
5485 and
5486 methods
5487 of
5488 the
5489 object
5490 and
5491 the
5492 values
5493 are
5494 pointers
5495 to
5496 the
5497 corresponding
5498 member
5499 or
5500 method
5501 Unique
5502 data
5503 representation
5504 Hash
5505 tables
5506 can
5507 be
5508 used
5509 by
5510 some
5511 programs
5512 to
5513 avoid
5514 creating
5515 multiple
5516 character
5517 strings
5518 with
5519 the
5520 same
5521 contents
5522 For
5523 that
5524 purpose
5525 all
5526 strings
5527 in
5528 use
5529 by
5530 the
5531 program
5532 are
5533 stored
5534 in
5535 a
5536 single
5537 string
5538 pool
5539 implemented
5540 as
5541 a
5542 hash
5543 table
5544 which
5545 is
5546 checked
5547 whenever
5548 a
5549 new
5550 string
5551 has
5552 to
5553 be
5554 created
5555 This
5556 technique
5557 was
5558 introduced
5559 in
5560 Lisp
5561 interpreters
5562 under
5563 the
5564 name
5565 hash
5566 consing
5567 and
5568 can
5569 be
5570 used
5571 with
5572 many
5573 other
5574 kinds
5575 of
5576 data
5577 expression
5578 trees
5579 in
5580 a
5581 symbolic
5582 algebra
5583 system
5584 records
5585 in
5586 a
5587 database
5588 files
5589 in
5590 a
5591 file
5592 system
5593 binary
5594 decision
5595 diagrams
5596 etc
5597 String
5598 interning
5599 Main
5600 article
5601 String
5602 interning
5603 Implementations
5604 In
5605 programming
5606 languages
5607 Many
5608 programming
5609 languages
5610 provide
5611 hash
5612 table
5613 functionality
5614 either
5615 as
5616 built
5617 in
5618 associative
5619 arrays
5620 or
5621 as
5622 standard
5623 library
5624 modules
5625 In
5626 C
5627 11
5628 for
5629 example
5630 the
5631 unordered
5632 map
5633 class
5634 provides
5635 hash
5636 tables
5637 for
5638 keys
5639 and
5640 values
5641 of
5642 arbitrary
5643 type
5644 In
5645 PHP
5646 5
5647 the
5648 Zend
5649 2
5650 engine
5651 uses
5652 one
5653 of
5654 the
5655 hash
5656 functions
5657 from
5658 Daniel
5659 J
5660 Bernstein
5661 to
5662 generate
5663 the
5664 hash
5665 values
5666 used
5667 in
5668 managing
5669 the
5670 mappings
5671 of
5672 data
5673 pointers
5674 stored
5675 in
5676 a
5677 hash
5678 table
5679 In
5680 the
5681 PHP
5682 source
5683 code
5684 it
5685 is
5686 labelled
5687 as
5688 DJBX33A
5689 Daniel
5690 J
5691 Bernstein
5692 Times
5693 33
5694 with
5695 Addition
5696 Pythons
5697 built
5698 in
5699 hash
5700 table
5701 implementation
5702 in
5703 the
5704 form
5705 of
5706 the
5707 dict
5708 type
5709 as
5710 well
5711 as
5712 Perls
5713 hash
5714 type
5715 are
5716 used
5717 internally
5718 to
5719 implement
5720 namespaces
5721 and
5722 therefore
5723 need
5724 to
5725 pay
5726 more
5727 attention
5728 to
5729 security
5730 ie
5731 collision
5732 attacks
5733 In
5734 the
5735 NET
5736 Framework
5737 support
5738 for
5739 hash
5740 tables
5741 is
5742 provided
5743 via
5744 the
5745 non
5746 generic
5747 Hashtable
5748 and
5749 generic
5750 Dictionary
5751 classes
5752 which
5753 store
5754 key
5755 value
5756 pairs
5757 and
5758 the
5759 generic
5760 HashSet
5761 class
5762 which
5763 stores
5764 only
5765 values
5766 Independent
5767 packages
5768 SparseHash
5769 formerly
5770 Google
5771 SparseHash
5772 An
5773 extremely
5774 memory
5775 efficient
5776 hash
5777 map
5778 implementation
5779 with
5780 only
5781 2
5782 bits
5783 entry
5784 of
5785 overhead
5786 The
5787 SparseHash
5788 library
5789 has
5790 several
5791 C
5792 hash
5793 map
5794 implementations
5795 with
5796 different
5797 performance
5798 characteristics
5799 including
5800 one
5801 that
5802 optimizes
5803 for
5804 memory
5805 use
5806 and
5807 another
5808 that
5809 optimizes
5810 for
5811 speed
5812 Sunrise
5813 DD
5814 An
5815 open
5816 source
5817 C
5818 library
5819 for
5820 hash
5821 table
5822 storage
5823 of
5824 arbitrary
5825 data
5826 objects
5827 with
5828 lock
5829 free
5830 lookups
5831 built
5832 in
5833 reference
5834 counting
5835 and
5836 guaranteed
5837 order
5838 iteration
5839 The
5840 library
5841 can
5842 participate
5843 in
5844 external
5845 reference
5846 counting
5847 systems
5848 or
5849 use
5850 its
5851 own
5852 built
5853 in
5854 reference
5855 counting
5856 It
5857 comes
5858 with
5859 a
5860 variety
5861 of
5862 hash
5863 functions
5864 and
5865 allows
5866 the
5867 use
5868 of
5869 runtime
5870 supplied
5871 hash
5872 functions
5873 via
5874 callback
5875 mechanism
5876 Source
5877 code
5878 is
5879 well
5880 documented
5881 uthash
5882 This
5883 is
5884 an
5885 easy
5886 to
5887 use
5888 hash
5889 table
5890 for
5891 C
5892 structures
5893 History
5894 The
5895 idea
5896 of
5897 hashing
5898 arose
5899 independently
5900 in
5901 different
5902 places
5903 In
5904 January
5905 1953
5906 H
5907 P
5908 Luhn
5909 wrote
5910 an
5911 internal
5912 IBM
5913 memorandum
5914 that
5915 used
5916 hashing
5917 with
5918 chaining24
5919 G
5920 N
5921 Amdahl
5922 E
5923 M
5924 Boehme
5925 N
5926 Rochester
5927 and
5928 Arthur
5929 Samuel
5930 implemented
5931 a
5932 program
5933 using
5934 hashing
5935 at
5936 about
5937 the
5938 same
5939 time
5940 Open
5941 addressing
5942 with
5943 linear
5944 probing
5945 relatively
5946 prime
5947 stepping
5948 is
5949 cr
5950 ed
5951 to
5952 Amdahl
5953 but
5954 Ershov
5955 in
5956 Russia
5957 had
5958 the
5959 same
5960 idea24
5961 See
5962 also
5963 Rabin
5964 Karp
5965 string
5966 search
5967 algorithm
5968 Stable
5969 hashing
5970 Consistent
5971 hashing
5972 Extendible
5973 hashing
5974 Lazy
5975 deletion
5976 Pearson
5977 hashing
5978 Related
5979 data
5980 structures
5981 There
5982 are
5983 several
5984 data
5985 structures
5986 that
5987 use
5988 hash
5989 functions
5990 but
5991 cannot
5992 be
5993 considered
5994 special
5995 cases
5996 of
5997 hash
5998 tables
5999 Bloom
6000 filter
6001 memory
6002 efficient
6003 data
6004 structure
6005 designed
6006 for
6007 constant
6008 time
6009 approximate
6010 lookups
6011 uses
6012 hash
6013 functions
6014 and
6015 can
6016 be
6017 seen
6018 as
6019 an
6020 approximate
6021 hash
6022 table
6023 Distributed
6024 hash
6025 table
6026 DHT
6027 a
6028 resilient
6029 dynamic
6030 table
6031 spread
6032 over
6033 several
6034 nodes
6035 of
6036 a
6037 network
6038 Hash
6039 array
6040 mapped
6041 trie
6042 a
6043 trie
6044 structure
6045 similar
6046 to
6047 the
6048 array
6049 mapped
6050 trie
6051 but
6052 where
6053 each
6054 key
6055 is
6056 hashed
6057 first
6058 A
6059 red
6060 black
6061 tree
6062 is
6063 a
6064 data
6065 structure
6066 which
6067 is
6068 a
6069 type
6070 of
6071 self
6072 balancing
6073 binary
6074 search
6075 tree
6076 Balance
6077 is
6078 preserved
6079 by
6080 painting
6081 each
6082 node
6083 of
6084 the
6085 tree
6086 with
6087 one
6088 of
6089 two
6090 colors
6091 typically
6092 called
6093 red
6094 and
6095 black
6096 in
6097 a
6098 way
6099 that
6100 satisfies
6101 certain
6102 properties
6103 which
6104 collectively
6105 constrain
6106 how
6107 unbalanced
6108 the
6109 tree
6110 can
6111 become
6112 in
6113 the
6114 worst
6115 case
6116 When
6117 the
6118 tree
6119 is
6120 modified
6121 the
6122 new
6123 tree
6124 is
6125 subsequently
6126 rearranged
6127 and
6128 repainted
6129 to
6130 restore
6131 the
6132 coloring
6133 properties
6134 The
6135 properties
6136 are
6137 designed
6138 in
6139 such
6140 a
6141 way
6142 that
6143 this
6144 rearranging
6145 and
6146 recoloring
6147 can
6148 be
6149 performed
6150 efficiently
6151 The
6152 balancing
6153 of
6154 the
6155 tree
6156 is
6157 not
6158 perfect
6159 but
6160 it
6161 is
6162 good
6163 enough
6164 to
6165 allow
6166 it
6167 to
6168 guarantee
6169 searching
6170 in
6171 O
6172 log
6173 n
6174 time
6175 where
6176 n
6177 is
6178 the
6179 total
6180 number
6181 of
6182 elements
6183 in
6184 the
6185 tree
6186 The
6187 insertion
6188 and
6189 deletion
6190 operations
6191 along
6192 with
6193 the
6194 tree
6195 rearrangement
6196 and
6197 recoloring
6198 are
6199 also
6200 performed
6201 in
6202 O
6203 log
6204 n
6205 time
6206 1
6207 Tracking
6208 the
6209 color
6210 of
6211 each
6212 node
6213 requires
6214 only
6215 1
6216 bit
6217 of
6218 information
6219 per
6220 node
6221 because
6222 there
6223 are
6224 only
6225 two
6226 colors
6227 The
6228 tree
6229 does
6230 not
6231 contain
6232 any
6233 other
6234 data
6235 specific
6236 to
6237 its
6238 being
6239 a
6240 red
6241 black
6242 tree
6243 so
6244 its
6245 memory
6246 footprint
6247 is
6248 almost
6249 identical
6250 to
6251 a
6252 classic
6253 uncolored
6254 binary
6255 search
6256 tree
6257 In
6258 many
6259 cases
6260 the
6261 additional
6262 bit
6263 of
6264 information
6265 can
6266 be
6267 stored
6268 at
6269 no
6270 additional
6271 memory
6272 cost
6273 The
6274 original
6275 data
6276 structure
6277 was
6278 invented
6279 in
6280 1972
6281 by
6282 Rudolf
6283 Bayer
6284 2
6285 and
6286 named
6287 symmetric
6288 binary
6289 B
6290 tree
6291 but
6292 acquired
6293 its
6294 modern
6295 name
6296 in
6297 a
6298 paper
6299 in
6300 1978
6301 by
6302 Leonidas
6303 J
6304 Guibas
6305 and
6306 Robert
6307 Sedgewick
6308 entitled
6309 A
6310 Dichromatic
6311 Framework
6312 for
6313 Balanced
6314 Trees
6315 3
6316 The
6317 color
6318 red
6319 was
6320 chosen
6321 because
6322 it
6323 was
6324 the
6325 best
6326 looking
6327 color
6328 produced
6329 by
6330 the
6331 color
6332 laser
6333 printer
6334 available
6335 to
6336 the
6337 authors
6338 while
6339 working
6340 at
6341 Xerox
6342 PARC
6343 4
6344 Terminology
6345 A
6346 red
6347 black
6348 tree
6349 is
6350 a
6351 special
6352 type
6353 of
6354 binary
6355 tree
6356 used
6357 in
6358 computer
6359 science
6360 to
6361 organize
6362 pieces
6363 of
6364 comparable
6365 data
6366 such
6367 as
6368 text
6369 fragments
6370 or
6371 numbers
6372 The
6373 leaf
6374 nodes
6375 of
6376 red
6377 black
6378 trees
6379 do
6380 not
6381 contain
6382 data
6383 These
6384 leaves
6385 need
6386 not
6387 be
6388 explicit
6389 in
6390 computer
6391 memory—a
6392 null
6393 child
6394 pointer
6395 can
6396 encode
6397 the
6398 fact
6399 that
6400 this
6401 child
6402 is
6403 a
6404 leaf—but
6405 it
6406 simplifies
6407 some
6408 algorithms
6409 for
6410 operating
6411 on
6412 red
6413 black
6414 trees
6415 if
6416 the
6417 leaves
6418 really
6419 are
6420 explicit
6421 nodes
6422 To
6423 save
6424 memory
6425 sometimes
6426 a
6427 single
6428 sentinel
6429 node
6430 performs
6431 the
6432 role
6433 of
6434 all
6435 leaf
6436 nodes
6437 all
6438 references
6439 from
6440 internal
6441 nodes
6442 to
6443 leaf
6444 nodes
6445 then
6446 point
6447 to
6448 the
6449 sentinel
6450 node
6451 Red
6452 black
6453 trees
6454 like
6455 all
6456 binary
6457 search
6458 trees
6459 allow
6460 efficient
6461 in
6462 order
6463 traversal
6464 that
6465 is
6466 in
6467 the
6468 order
6469 Left
6470 Root
6471 Right
6472 of
6473 their
6474 elements
6475 The
6476 search
6477 time
6478 results
6479 from
6480 the
6481 traversal
6482 from
6483 root
6484 to
6485 leaf
6486 and
6487 therefore
6488 a
6489 balanced
6490 tree
6491 of
6492 n
6493 nodes
6494 having
6495 the
6496 least
6497 possible
6498 tree
6499 height
6500 results
6501 in
6502 O
6503 log
6504 n
6505 search
6506 time
6507 Properties
6508 Diagram
6509 of
6510 binary
6511 tree
6512 The
6513 black
6514 root
6515 node
6516 has
6517 two
6518 red
6519 children
6520 and
6521 four
6522 black
6523 grandchildren
6524 The
6525 child
6526 nodes
6527 of
6528 the
6529 grandchildren
6530 are
6531 black
6532 nil
6533 pointers
6534 or
6535 red
6536 nodes
6537 with
6538 black
6539 nil
6540 pointers
6541 An
6542 example
6543 of
6544 a
6545 red
6546 black
6547 tree
6548 In
6549 addition
6550 to
6551 the
6552 requirements
6553 imposed
6554 on
6555 a
6556 binary
6557 search
6558 tree
6559 the
6560 following
6561 must
6562 be
6563 satisfied
6564 by
6565 a
6566 red
6567 black
6568 tree
6569 5
6570 A
6571 node
6572 is
6573 either
6574 red
6575 or
6576 black
6577 The
6578 root
6579 is
6580 black
6581 This
6582 rule
6583 is
6584 sometimes
6585 omitted
6586 Since
6587 the
6588 root
6589 can
6590 always
6591 be
6592 changed
6593 from
6594 red
6595 to
6596 black
6597 but
6598 not
6599 necessarily
6600 vice
6601 versa
6602 this
6603 rule
6604 has
6605 little
6606 effect
6607 on
6608 analysis
6609 All
6610 leaves
6611 NIL
6612 are
6613 black
6614 All
6615 leaves
6616 are
6617 same
6618 color
6619 as
6620 the
6621 root
6622 Every
6623 red
6624 node
6625 must
6626 have
6627 two
6628 black
6629 child
6630 nodes
6631 Every
6632 path
6633 from
6634 a
6635 given
6636 node
6637 to
6638 any
6639 of
6640 its
6641 descendant
6642 leaves
6643 contains
6644 the
6645 same
6646 number
6647 of
6648 black
6649 nodes
6650 These
6651 constraints
6652 enforce
6653 a
6654 critical
6655 property
6656 of
6657 red
6658 black
6659 trees
6660 that
6661 the
6662 path
6663 from
6664 the
6665 root
6666 to
6667 the
6668 furthest
6669 leaf
6670 is
6671 no
6672 more
6673 than
6674 twice
6675 as
6676 long
6677 as
6678 the
6679 path
6680 from
6681 the
6682 root
6683 to
6684 the
6685 nearest
6686 leaf
6687 The
6688 result
6689 is
6690 that
6691 the
6692 tree
6693 is
6694 roughly
6695 height
6696 balanced
6697 Since
6698 operations
6699 such
6700 as
6701 inserting
6702 deleting
6703 and
6704 finding
6705 values
6706 require
6707 worst
6708 case
6709 time
6710 proportional
6711 to
6712 the
6713 height
6714 of
6715 the
6716 tree
6717 this
6718 theoretical
6719 upper
6720 bound
6721 on
6722 the
6723 height
6724 allows
6725 red
6726 black
6727 trees
6728 to
6729 be
6730 efficient
6731 in
6732 the
6733 worst
6734 case
6735 unlike
6736 ordinary
6737 binary
6738 search
6739 trees
6740 To
6741 see
6742 why
6743 this
6744 is
6745 guaranteed
6746 it
6747 suffices
6748 to
6749 consider
6750 the
6751 effect
6752 of
6753 properties
6754 4
6755 and
6756 5
6757 together
6758 For
6759 a
6760 red
6761 black
6762 tree
6763 T
6764 let
6765 B
6766 be
6767 the
6768 number
6769 of
6770 black
6771 nodes
6772 in
6773 property
6774 5
6775 Let
6776 the
6777 shortest
6778 possible
6779 path
6780 from
6781 the
6782 root
6783 of
6784 T
6785 to
6786 any
6787 leaf
6788 consist
6789 of
6790 B
6791 black
6792 nodes
6793 Longer
6794 possible
6795 paths
6796 may
6797 be
6798 constructed
6799 by
6800 inserting
6801 red
6802 nodes
6803 However
6804 property
6805 4
6806 makes
6807 it
6808 impossible
6809 to
6810 insert
6811 more
6812 than
6813 one
6814 consecutive
6815 red
6816 node
6817 Therefore
6818 the
6819 longest
6820 possible
6821 path
6822 consists
6823 of
6824 2B
6825 nodes
6826 alternating
6827 black
6828 and
6829 red
6830 The
6831 shortest
6832 possible
6833 path
6834 has
6835 all
6836 black
6837 nodes
6838 and
6839 the
6840 longest
6841 possible
6842 path
6843 alternates
6844 between
6845 red
6846 and
6847 black
6848 nodes
6849 Since
6850 all
6851 maximal
6852 paths
6853 have
6854 the
6855 same
6856 number
6857 of
6858 black
6859 nodes
6860 by
6861 property
6862 5
6863 this
6864 shows
6865 that
6866 no
6867 path
6868 is
6869 more
6870 than
6871 twice
6872 as
6873 long
6874 as
6875 any
6876 other
6877 path
6878 Analogy
6879 to
6880 B
6881 trees
6882 of
6883 order
6884 4
6885 The
6886 same
6887 red
6888 black
6889 tree
6890 as
6891 in
6892 the
6893 example
6894 above
6895 seen
6896 as
6897 a
6898 B
6899 tree
6900 A
6901 red
6902 black
6903 tree
6904 is
6905 similar
6906 in
6907 structure
6908 to
6909 a
6910 B
6911 tree
6912 of
6913 order
6914 note
6915 1
6916 4
6917 where
6918 each
6919 node
6920 can
6921 contain
6922 between
6923 1
6924 and
6925 3
6926 values
6927 and
6928 accordingly
6929 between
6930 2
6931 and
6932 4
6933 child
6934 pointers
6935 In
6936 such
6937 a
6938 B
6939 tree
6940 each
6941 node
6942 will
6943 contain
6944 only
6945 one
6946 value
6947 matching
6948 the
6949 value
6950 in
6951 a
6952 black
6953 node
6954 of
6955 the
6956 red
6957 black
6958 tree
6959 with
6960 an
6961 optional
6962 value
6963 before
6964 and
6965 or
6966 after
6967 it
6968 in
6969 the
6970 same
6971 node
6972 both
6973 matching
6974 an
6975 equivalent
6976 red
6977 node
6978 of
6979 the
6980 red
6981 black
6982 tree
6983 One
6984 way
6985 to
6986 see
6987 this
6988 equivalence
6989 is
6990 to
6991 move
6992 up
6993 the
6994 red
6995 nodes
6996 in
6997 a
6998 graphical
6999 representation
7000 of
7001 the
7002 red
7003 black
7004 tree
7005 so
7006 that
7007 they
7008 align
7009 horizontally
7010 with
7011 their
7012 parent
7013 black
7014 node
7015 by
7016 creating
7017 together
7018 a
7019 horizontal
7020 cluster
7021 In
7022 the
7023 B
7024 tree
7025 or
7026 in
7027 the
7028 modified
7029 graphical
7030 representation
7031 of
7032 the
7033 red
7034 black
7035 tree
7036 all
7037 leaf
7038 nodes
7039 are
7040 at
7041 the
7042 same
7043 depth
7044 The
7045 red
7046 black
7047 tree
7048 is
7049 then
7050 structurally
7051 equivalent
7052 to
7053 a
7054 B
7055 tree
7056 of
7057 order
7058 4
7059 with
7060 a
7061 minimum
7062 fill
7063 factor
7064 of
7065 33
7066 of
7067 values
7068 per
7069 cluster
7070 with
7071 a
7072 maximum
7073 capacity
7074 of
7075 3
7076 values
7077 This
7078 B
7079 tree
7080 type
7081 is
7082 still
7083 more
7084 general
7085 than
7086 a
7087 red
7088 black
7089 tree
7090 though
7091 as
7092 it
7093 allows
7094 ambiguity
7095 in
7096 a
7097 red
7098 black
7099 tree
7100 conversion—multiple
7101 red
7102 black
7103 trees
7104 can
7105 be
7106 produced
7107 from
7108 an
7109 equivalent
7110 B
7111 tree
7112 of
7113 order
7114 4
7115 If
7116 a
7117 B
7118 tree
7119 cluster
7120 contains
7121 only
7122 1
7123 value
7124 it
7125 is
7126 the
7127 minimum
7128 black
7129 and
7130 has
7131 two
7132 child
7133 pointers
7134 If
7135 a
7136 cluster
7137 contains
7138 3
7139 values
7140 then
7141 the
7142 central
7143 value
7144 will
7145 be
7146 black
7147 and
7148 each
7149 value
7150 stored
7151 on
7152 its
7153 sides
7154 will
7155 be
7156 red
7157 If
7158 the
7159 cluster
7160 contains
7161 two
7162 values
7163 however
7164 either
7165 one
7166 can
7167 become
7168 the
7169 black
7170 node
7171 in
7172 the
7173 red
7174 black
7175 tree
7176 and
7177 the
7178 other
7179 one
7180 will
7181 be
7182 red
7183 So
7184 the
7185 order
7186 4
7187 B
7188 tree
7189 does
7190 not
7191 maintain
7192 which
7193 of
7194 the
7195 values
7196 contained
7197 in
7198 each
7199 cluster
7200 is
7201 the
7202 root
7203 black
7204 tree
7205 for
7206 the
7207 whole
7208 cluster
7209 and
7210 the
7211 parent
7212 of
7213 the
7214 other
7215 values
7216 in
7217 the
7218 same
7219 cluster
7220 Despite
7221 this
7222 the
7223 operations
7224 on
7225 red
7226 black
7227 trees
7228 are
7229 more
7230 economical
7231 in
7232 time
7233 because
7234 you
7235 don
7236 t
7237 have
7238 to
7239 maintain
7240 the
7241 vector
7242 of
7243 values
7244 It
7245 may
7246 be
7247 costly
7248 if
7249 values
7250 are
7251 stored
7252 directly
7253 in
7254 each
7255 node
7256 rather
7257 than
7258 being
7259 stored
7260 by
7261 reference
7262 B
7263 tree
7264 nodes
7265 however
7266 are
7267 more
7268 economical
7269 in
7270 space
7271 because
7272 you
7273 don
7274 t
7275 need
7276 to
7277 store
7278 the
7279 color
7280 attribute
7281 for
7282 each
7283 node
7284 Instead
7285 you
7286 have
7287 to
7288 know
7289 which
7290 slot
7291 in
7292 the
7293 cluster
7294 vector
7295 is
7296 used
7297 If
7298 values
7299 are
7300 stored
7301 by
7302 reference
7303 e
7304 g
7305 objects
7306 null
7307 references
7308 can
7309 be
7310 used
7311 and
7312 so
7313 the
7314 cluster
7315 can
7316 be
7317 represented
7318 by
7319 a
7320 vector
7321 containing
7322 3
7323 slots
7324 for
7325 value
7326 pointers
7327 plus
7328 4
7329 slots
7330 for
7331 child
7332 references
7333 in
7334 the
7335 tree
7336 In
7337 that
7338 case
7339 the
7340 B
7341 tree
7342 can
7343 be
7344 more
7345 compact
7346 in
7347 memory
7348 improving
7349 data
7350 locality
7351 The
7352 same
7353 analogy
7354 can
7355 be
7356 made
7357 with
7358 B
7359 trees
7360 with
7361 larger
7362 orders
7363 that
7364 can
7365 be
7366 structurally
7367 equivalent
7368 to
7369 a
7370 colored
7371 binary
7372 tree
7373 you
7374 just
7375 need
7376 more
7377 colors
7378 Suppose
7379 that
7380 you
7381 add
7382 blue
7383 then
7384 the
7385 blue
7386 red
7387 black
7388 tree
7389 defined
7390 like
7391 red
7392 black
7393 trees
7394 but
7395 with
7396 the
7397 additional
7398 constraint
7399 that
7400 no
7401 two
7402 successive
7403 nodes
7404 in
7405 the
7406 hierarchy
7407 will
7408 be
7409 blue
7410 and
7411 all
7412 blue
7413 nodes
7414 will
7415 be
7416 children
7417 of
7418 a
7419 red
7420 node
7421 then
7422 it
7423 becomes
7424 equivalent
7425 to
7426 a
7427 B
7428 tree
7429 whose
7430 clusters
7431 will
7432 have
7433 at
7434 most
7435 7
7436 values
7437 in
7438 the
7439 following
7440 colors
7441 blue
7442 red
7443 blue
7444 black
7445 blue
7446 red
7447 blue
7448 For
7449 each
7450 cluster
7451 there
7452 will
7453 be
7454 at
7455 most
7456 1
7457 black
7458 node
7459 2
7460 red
7461 nodes
7462 and
7463 4
7464 blue
7465 nodes
7466 For
7467 moderate
7468 volumes
7469 of
7470 values
7471 insertions
7472 and
7473 deletions
7474 in
7475 a
7476 colored
7477 binary
7478 tree
7479 are
7480 faster
7481 compared
7482 to
7483 B
7484 trees
7485 because
7486 colored
7487 trees
7488 don
7489 t
7490 attempt
7491 to
7492 maximize
7493 the
7494 fill
7495 factor
7496 of
7497 each
7498 horizontal
7499 cluster
7500 of
7501 nodes
7502 only
7503 the
7504 minimum
7505 fill
7506 factor
7507 is
7508 guaranteed
7509 in
7510 colored
7511 binary
7512 trees
7513 limiting
7514 the
7515 number
7516 of
7517 splits
7518 or
7519 junctions
7520 of
7521 clusters
7522 B
7523 trees
7524 will
7525 be
7526 faster
7527 for
7528 performing
7529 rotations
7530 because
7531 rotations
7532 will
7533 frequently
7534 occur
7535 within
7536 the
7537 same
7538 cluster
7539 rather
7540 than
7541 with
7542 multiple
7543 separate
7544 nodes
7545 in
7546 a
7547 colored
7548 binary
7549 tree
7550 However
7551 for
7552 storing
7553 large
7554 volumes
7555 B
7556 trees
7557 will
7558 be
7559 much
7560 faster
7561 as
7562 they
7563 will
7564 be
7565 more
7566 compact
7567 by
7568 grouping
7569 several
7570 children
7571 in
7572 the
7573 same
7574 cluster
7575 where
7576 they
7577 can
7578 be
7579 accessed
7580 locally
7581 All
7582 optimizations
7583 possible
7584 in
7585 B
7586 trees
7587 to
7588 increase
7589 the
7590 average
7591 fill
7592 factors
7593 of
7594 clusters
7595 are
7596 possible
7597 in
7598 the
7599 equivalent
7600 multicolored
7601 binary
7602 tree
7603 Notably
7604 maximizing
7605 the
7606 average
7607 fill
7608 factor
7609 in
7610 a
7611 structurally
7612 equivalent
7613 B
7614 tree
7615 is
7616 the
7617 same
7618 as
7619 reducing
7620 the
7621 total
7622 height
7623 of
7624 the
7625 multicolored
7626 tree
7627 by
7628 increasing
7629 the
7630 number
7631 of
7632 non
7633 black
7634 nodes
7635 The
7636 worst
7637 case
7638 occurs
7639 when
7640 all
7641 nodes
7642 in
7643 a
7644 colored
7645 binary
7646 tree
7647 are
7648 black
7649 the
7650 best
7651 case
7652 occurs
7653 when
7654 only
7655 a
7656 third
7657 of
7658 them
7659 are
7660 black
7661 and
7662 the
7663 other
7664 two
7665 thirds
7666 are
7667 red
7668 nodes
7669 Notes
7670 Jump
7671 up
7672 Using
7673 Knuth
7674 s
7675 definition
7676 of
7677 order
7678 the
7679 maximum
7680 number
7681 of
7682 children
7683 Applications
7684 and
7685 related
7686 data
7687 structures
7688 Red
7689 black
7690 trees
7691 offer
7692 worst
7693 case
7694 guarantees
7695 for
7696 insertion
7697 time
7698 deletion
7699 time
7700 and
7701 search
7702 time
7703 Not
7704 only
7705 does
7706 this
7707 make
7708 them
7709 valuable
7710 in
7711 time
7712 sensitive
7713 applications
7714 such
7715 as
7716 real
7717 time
7718 applications
7719 but
7720 it
7721 makes
7722 them
7723 valuable
7724 building
7725 blocks
7726 in
7727 other
7728 data
7729 structures
7730 which
7731 provide
7732 worst
7733 case
7734 guarantees
7735 for
7736 example
7737 many
7738 data
7739 structures
7740 used
7741 in
7742 computational
7743 geometry
7744 can
7745 be
7746 based
7747 on
7748 red
7749 black
7750 trees
7751 and
7752 the
7753 Completely
7754 Fair
7755 Scheduler
7756 used
7757 in
7758 current
7759 Linux
7760 kernels
7761 uses
7762 red
7763 black
7764 trees
7765 The
7766 AVL
7767 tree
7768 is
7769 another
7770 structure
7771 supporting
7772 O
7773 log
7774 n
7775 search
7776 insertion
7777 and
7778 removal
7779 It
7780 is
7781 more
7782 rigidly
7783 balanced
7784 than
7785 red
7786 black
7787 trees
7788 leading
7789 to
7790 slower
7791 insertion
7792 and
7793 removal
7794 but
7795 faster
7796 retrieval
7797 This
7798 makes
7799 it
7800 attractive
7801 for
7802 data
7803 structures
7804 that
7805 may
7806 be
7807 built
7808 once
7809 and
7810 loaded
7811 without
7812 reconstruction
7813 such
7814 as
7815 language
7816 dictionaries
7817 or
7818 program
7819 dictionaries
7820 such
7821 as
7822 the
7823 opcodes
7824 of
7825 an
7826 assembler
7827 or
7828 interpreter
7829 Red
7830 black
7831 trees
7832 are
7833 also
7834 particularly
7835 valuable
7836 in
7837 functional
7838 programming
7839 where
7840 they
7841 are
7842 one
7843 of
7844 the
7845 most
7846 common
7847 persistent
7848 data
7849 structures
7850 used
7851 to
7852 construct
7853 associative
7854 arrays
7855 and
7856 sets
7857 which
7858 can
7859 retain
7860 previous
7861 versions
7862 after
7863 mutations
7864 The
7865 persistent
7866 version
7867 of
7868 red
7869 black
7870 trees
7871 requires
7872 O
7873 log
7874 n
7875 space
7876 for
7877 each
7878 insertion
7879 or
7880 deletion
7881 in
7882 addition
7883 to
7884 time
7885 For
7886 every
7887 2
7888 4
7889 tree
7890 there
7891 are
7892 corresponding
7893 red
7894 black
7895 trees
7896 with
7897 data
7898 elements
7899 in
7900 the
7901 same
7902 order
7903 The
7904 insertion
7905 and
7906 deletion
7907 operations
7908 on
7909 2
7910 4
7911 trees
7912 are
7913 also
7914 equivalent
7915 to
7916 color
7917 flipping
7918 and
7919 rotations
7920 in
7921 red
7922 black
7923 trees
7924 This
7925 makes
7926 2
7927 4
7928 trees
7929 an
7930 important
7931 tool
7932 for
7933 understanding
7934 the
7935 logic
7936 behind
7937 red
7938 black
7939 trees
7940 and
7941 this
7942 is
7943 why
7944 many
7945 introductory
7946 algorithm
7947 texts
7948 introduce
7949 2
7950 4
7951 trees
7952 just
7953 before
7954 red
7955 black
7956 trees
7957 even
7958 though
7959 2
7960 4
7961 trees
7962 are
7963 not
7964 often
7965 used
7966 in
7967 practice
7968 In
7969 2008
7970 Sedgewick
7971 introduced
7972 a
7973 simpler
7974 version
7975 of
7976 the
7977 red
7978 black
7979 tree
7980 called
7981 the
7982 left
7983 leaning
7984 red
7985 black
7986 tree
7987 6
7988 by
7989 eliminating
7990 a
7991 previously
7992 unspecified
7993 degree
7994 of
7995 freedom
7996 in
7997 the
7998 implementation
7999 The
8000 LLRB
8001 maintains
8002 an
8003 additional
8004 invariant
8005 that
8006 all
8007 red
8008 links
8009 must
8010 lean
8011 left
8012 except
8013 during
8014 inserts
8015 and
8016 deletes
8017 Red
8018 black
8019 trees
8020 can
8021 be
8022 made
8023 isometric
8024 to
8025 either
8026 2
8027 3
8028 trees
8029 7
8030 or
8031 2
8032 4
8033 trees
8034 6
8035 for
8036 any
8037 sequence
8038 of
8039 operations
8040 The
8041 2
8042 4
8043 tree
8044 isometry
8045 was
8046 described
8047 in
8048 1978
8049 by
8050 Sedgewick
8051 this
8052 quote
8053 needs
8054 a
8055 citation
8056 With
8057 2
8058 4
8059 trees
8060 the
8061 isometry
8062 is
8063 resolved
8064 by
8065 a
8066 color
8067 flip
8068 corresponding
8069 to
8070 a
8071 split
8072 in
8073 which
8074 the
8075 red
8076 color
8077 of
8078 two
8079 children
8080 nodes
8081 leaves
8082 the
8083 children
8084 and
8085 moves
8086 to
8087 the
8088 parent
8089 node
8090 The
8091 tango
8092 tree
8093 a
8094 type
8095 of
8096 tree
8097 optimized
8098 for
8099 fast
8100 searches
8101 usually
8102 when
8103 uses
8104 red
8105 black
8106 trees
8107 as
8108 part
8109 of
8110 its
8111 data
8112 structure
8113 Operations
8114 Read
8115 only
8116 operations
8117 on
8118 a
8119 red
8120 black
8121 tree
8122 require
8123 no
8124 modification
8125 from
8126 those
8127 used
8128 for
8129 binary
8130 search
8131 trees
8132 because
8133 every
8134 red
8135 black
8136 tree
8137 is
8138 a
8139 special
8140 case
8141 of
8142 a
8143 simple
8144 binary
8145 search
8146 tree
8147 However
8148 the
8149 immediate
8150 result
8151 of
8152 an
8153 insertion
8154 or
8155 removal
8156 may
8157 violate
8158 the
8159 properties
8160 of
8161 a
8162 red
8163 black
8164 tree
8165 Restoring
8166 the
8167 red
8168 black
8169 properties
8170 requires
8171 a
8172 small
8173 number
8174 O
8175 log
8176 n
8177 or
8178 amortized
8179 O
8180 1
8181 of
8182 color
8183 changes
8184 which
8185 are
8186 very
8187 quick
8188 in
8189 practice
8190 and
8191 no
8192 more
8193 than
8194 three
8195 tree
8196 rotations
8197 two
8198 for
8199 insertion
8200 Although
8201 insert
8202 and
8203 delete
8204 operations
8205 are
8206 complicated
8207 their
8208 times
8209 remain
8210 O
8211 log
8212 n
8213 Insertion
8214 Insertion
8215 begins
8216 by
8217 adding
8218 the
8219 node
8220 as
8221 any
8222 binary
8223 search
8224 tree
8225 insertion
8226 does
8227 and
8228 by
8229 coloring
8230 it
8231 red
8232 Whereas
8233 in
8234 the
8235 binary
8236 search
8237 tree
8238 we
8239 always
8240 add
8241 a
8242 leaf
8243 in
8244 the
8245 red
8246 black
8247 tree
8248 leaves
8249 contain
8250 no
8251 information
8252 so
8253 instead
8254 we
8255 add
8256 a
8257 red
8258 interior
8259 node
8260 with
8261 two
8262 black
8263 leaves
8264 in
8265 place
8266 of
8267 an
8268 existing
8269 black
8270 leaf
8271 What
8272 happens
8273 next
8274 depends
8275 on
8276 the
8277 color
8278 of
8279 other
8280 nearby
8281 nodes
8282 The
8283 term
8284 uncle
8285 node
8286 will
8287 be
8288 used
8289 to
8290 refer
8291 to
8292 the
8293 sibling
8294 of
8295 a
8296 node
8297 s
8298 parent
8299 as
8300 in
8301 human
8302 family
8303 trees
8304 Note
8305 that
8306 property
8307 3
8308 all
8309 leaves
8310 are
8311 black
8312 always
8313 holds
8314 property
8315 4
8316 both
8317 children
8318 of
8319 every
8320 red
8321 node
8322 are
8323 black
8324 is
8325 threatened
8326 only
8327 by
8328 adding
8329 a
8330 red
8331 node
8332 repainting
8333 a
8334 black
8335 node
8336 red
8337 or
8338 a
8339 rotation
8340 property
8341 5
8342 all
8343 paths
8344 from
8345 any
8346 given
8347 node
8348 to
8349 its
8350 leaf
8351 nodes
8352 contain
8353 the
8354 same
8355 number
8356 of
8357 black
8358 nodes
8359 is
8360 threatened
8361 only
8362 by
8363 adding
8364 a
8365 black
8366 node
8367 repainting
8368 a
8369 red
8370 node
8371 black
8372 or
8373 vice
8374 versa
8375 or
8376 a
8377 rotation
8378 Note
8379 The
8380 label
8381 N
8382 will
8383 be
8384 used
8385 to
8386 denote
8387 the
8388 current
8389 node
8390 colored
8391 red
8392 At
8393 the
8394 beginning
8395 this
8396 is
8397 the
8398 new
8399 node
8400 being
8401 inserted
8402 but
8403 the
8404 entire
8405 procedure
8406 may
8407 also
8408 be
8409 applied
8410 recursively
8411 to
8412 other
8413 nodes
8414 see
8415 case
8416 3
8417 P
8418 will
8419 denote
8420 N
8421 s
8422 parent
8423 node
8424 G
8425 will
8426 denote
8427 N
8428 s
8429 grandparent
8430 and
8431 U
8432 will
8433 denote
8434 N
8435 s
8436 uncle
8437 Note
8438 that
8439 in
8440 between
8441 some
8442 cases
8443 the
8444 roles
8445 and
8446 labels
8447 of
8448 the
8449 nodes
8450 are
8451 exchanged
8452 but
8453 in
8454 each
8455 case
8456 every
8457 label
8458 continues
8459 to
8460 represent
8461 the
8462 same
8463 node
8464 it
8465 represented
8466 at
8467 the
8468 beginning
8469 of
8470 the
8471 case
8472 Any
8473 color
8474 shown
8475 in
8476 the
8477 diagram
8478 is
8479 either
8480 assumed
8481 in
8482 its
8483 case
8484 or
8485 implied
8486 by
8487 those
8488 assumptions
8489 A
8490 numbered
8491 triangle
8492 represents
8493 a
8494 subtree
8495 of
8496 unspecified
8497 depth
8498 A
8499 black
8500 circle
8501 atop
8502 the
8503 triangle
8504 designates
8505 a
8506 black
8507 root
8508 node
8509 otherwise
8510 the
8511 root
8512 node
8513 s
8514 color
8515 is
8516 unspecified
8517 Each
8518 case
8519 will
8520 be
8521 demonstrated
8522 with
8523 example
8524 C
8525 code
8526 The
8527 uncle
8528 and
8529 grandparent
8530 nodes
8531 can
8532 be
8533 found
8534 by
8535 these
8536 functions
8537 In
8538 a
8539 regular
8540 binary
8541 search
8542 tree
8543 when
8544 deleting
8545 a
8546 node
8547 with
8548 two
8549 non
8550 leaf
8551 children
8552 we
8553 find
8554 either
8555 the
8556 maximum
8557 element
8558 in
8559 its
8560 left
8561 subtree
8562 which
8563 is
8564 the
8565 in
8566 order
8567 predecessor
8568 or
8569 the
8570 minimum
8571 element
8572 in
8573 its
8574 right
8575 subtree
8576 which
8577 is
8578 the
8579 in
8580 order
8581 successor
8582 and
8583 move
8584 its
8585 value
8586 into
8587 the
8588 node
8589 being
8590 deleted
8591 as
8592 shown
8593 here
8594 We
8595 then
8596 delete
8597 the
8598 node
8599 we
8600 copied
8601 the
8602 value
8603 from
8604 which
8605 must
8606 have
8607 fewer
8608 than
8609 two
8610 non
8611 leaf
8612 children
8613 Non
8614 leaf
8615 children
8616 rather
8617 than
8618 all
8619 children
8620 are
8621 specified
8622 here
8623 because
8624 unlike
8625 normal
8626 binary
8627 search
8628 trees
8629 red
8630 black
8631 trees
8632 can
8633 have
8634 leaf
8635 nodes
8636 anywhere
8637 so
8638 that
8639 all
8640 nodes
8641 are
8642 either
8643 internal
8644 nodes
8645 with
8646 two
8647 children
8648 or
8649 leaf
8650 nodes
8651 with
8652 by
8653 definition
8654 zero
8655 children
8656 In
8657 effect
8658 internal
8659 nodes
8660 having
8661 two
8662 leaf
8663 children
8664 in
8665 a
8666 red
8667 black
8668 tree
8669 are
8670 like
8671 the
8672 leaf
8673 nodes
8674 in
8675 a
8676 regular
8677 binary
8678 search
8679 tree
8680 Because
8681 merely
8682 copying
8683 a
8684 value
8685 does
8686 not
8687 violate
8688 any
8689 red
8690 black
8691 properties
8692 this
8693 reduces
8694 to
8695 the
8696 problem
8697 of
8698 deleting
8699 a
8700 node
8701 with
8702 at
8703 most
8704 one
8705 non
8706 leaf
8707 child
8708 Once
8709 we
8710 have
8711 solved
8712 that
8713 problem
8714 the
8715 solution
8716 applies
8717 equally
8718 to
8719 the
8720 case
8721 where
8722 the
8723 node
8724 we
8725 originally
8726 want
8727 to
8728 delete
8729 has
8730 at
8731 most
8732 one
8733 non
8734 leaf
8735 child
8736 as
8737 to
8738 the
8739 case
8740 just
8741 considered
8742 where
8743 it
8744 has
8745 two
8746 non
8747 leaf
8748 children
8749 Therefore
8750 for
8751 the
8752 remainder
8753 of
8754 this
8755 discussion
8756 we
8757 address
8758 the
8759 deletion
8760 of
8761 a
8762 node
8763 with
8764 at
8765 most
8766 one
8767 non
8768 leaf
8769 child
8770 We
8771 use
8772 the
8773 label
8774 M
8775 to
8776 denote
8777 the
8778 node
8779 to
8780 be
8781 deleted
8782 C
8783 will
8784 denote
8785 a
8786 selected
8787 child
8788 of
8789 M
8790 which
8791 we
8792 will
8793 also
8794 call
8795 its
8796 child
8797 If
8798 M
8799 does
8800 have
8801 a
8802 non
8803 leaf
8804 child
8805 call
8806 that
8807 its
8808 child
8809 C
8810 otherwise
8811 choose
8812 either
8813 leaf
8814 as
8815 its
8816 child
8817 C
8818 If
8819 M
8820 is
8821 a
8822 red
8823 node
8824 we
8825 simply
8826 replace
8827 it
8828 with
8829 its
8830 child
8831 C
8832 which
8833 must
8834 be
8835 black
8836 by
8837 property
8838 4
8839 This
8840 can
8841 only
8842 occur
8843 when
8844 M
8845 has
8846 two
8847 leaf
8848 children
8849 because
8850 if
8851 the
8852 red
8853 node
8854 M
8855 had
8856 a
8857 black
8858 non
8859 leaf
8860 child
8861 on
8862 one
8863 side
8864 but
8865 just
8866 a
8867 leaf
8868 child
8869 on
8870 the
8871 other
8872 side
8873 then
8874 the
8875 count
8876 of
8877 black
8878 nodes
8879 on
8880 both
8881 sides
8882 would
8883 be
8884 different
8885 thus
8886 the
8887 tree
8888 would
8889 violate
8890 property
8891 5
8892 All
8893 paths
8894 through
8895 the
8896 deleted
8897 node
8898 will
8899 simply
8900 pass
8901 through
8902 one
8903 fewer
8904 red
8905 node
8906 and
8907 both
8908 the
8909 deleted
8910 node
8911 s
8912 parent
8913 and
8914 child
8915 must
8916 be
8917 black
8918 so
8919 property
8920 3
8921 all
8922 leaves
8923 are
8924 black
8925 and
8926 property
8927 4
8928 both
8929 children
8930 of
8931 every
8932 red
8933 node
8934 are
8935 black
8936 still
8937 hold
8938 Another
8939 simple
8940 case
8941 is
8942 when
8943 M
8944 is
8945 black
8946 and
8947 C
8948 is
8949 red
8950 Simply
8951 removing
8952 a
8953 black
8954 node
8955 could
8956 break
8957 Properties
8958 4
8959 Both
8960 children
8961 of
8962 every
8963 red
8964 node
8965 are
8966 black
8967 and
8968 5
8969 All
8970 paths
8971 from
8972 any
8973 given
8974 node
8975 to
8976 its
8977 leaf
8978 nodes
8979 contain
8980 the
8981 same
8982 number
8983 of
8984 black
8985 nodes
8986 but
8987 if
8988 we
8989 repaint
8990 C
8991 black
8992 both
8993 of
8994 these
8995 properties
8996 are
8997 preserved
8998 The
8999 complex
9000 case
9001 is
9002 when
9003 both
9004 M
9005 and
9006 C
9007 are
9008 black
9009 This
9010 can
9011 only
9012 occur
9013 when
9014 deleting
9015 a
9016 black
9017 node
9018 which
9019 has
9020 two
9021 leaf
9022 children
9023 because
9024 if
9025 the
9026 black
9027 node
9028 M
9029 had
9030 a
9031 black
9032 non
9033 leaf
9034 child
9035 on
9036 one
9037 side
9038 but
9039 just
9040 a
9041 leaf
9042 child
9043 on
9044 the
9045 other
9046 side
9047 then
9048 the
9049 count
9050 of
9051 black
9052 nodes
9053 on
9054 both
9055 sides
9056 would
9057 be
9058 different
9059 thus
9060 the
9061 tree
9062 would
9063 have
9064 been
9065 an
9066 invalid
9067 red
9068 black
9069 tree
9070 by
9071 violation
9072 of
9073 property
9074 5
9075 We
9076 begin
9077 by
9078 replacing
9079 M
9080 with
9081 its
9082 child
9083 C
9084 We
9085 will
9086 call
9087 or
9088 is
9089 relabel
9090 this
9091 child
9092 in
9093 its
9094 new
9095 position
9096 N
9097 and
9098 its
9099 sibling
9100 its
9101 new
9102 parent
9103 s
9104 other
9105 child
9106 S
9107 S
9108 was
9109 previously
9110 the
9111 sibling
9112 of
9113 M
9114 In
9115 the
9116 diagrams
9117 below
9118 we
9119 will
9120 also
9121 use
9122 P
9123 for
9124 N
9125 s
9126 new
9127 parent
9128 M
9129 s
9130 old
9131 parent
9132 SL
9133 for
9134 S
9135 s
9136 left
9137 child
9138 and
9139 SR
9140 for
9141 S
9142 s
9143 right
9144 child
9145 S
9146 cannot
9147 be
9148 a
9149 leaf
9150 because
9151 if
9152 M
9153 and
9154 C
9155 were
9156 black
9157 then
9158 P
9159 s
9160 one
9161 subtree
9162 which
9163 included
9164 M
9165 counted
9166 two
9167 black
9168 height
9169 and
9170 thus
9171 P
9172 s
9173 other
9174 subtree
9175 which
9176 includes
9177 S
9178 must
9179 also
9180 count
9181 two
9182 black
9183 height
9184 which
9185 cannot
9186 be
9187 the
9188 case
9189 if
9190 S
9191 is
9192 a
9193 leaf
9194 node
9195 Note
9196 In
9197 between
9198 some
9199 cases
9200 we
9201 exchange
9202 the
9203 roles
9204 and
9205 labels
9206 of
9207 the
9208 nodes
9209 but
9210 in
9211 each
9212 case
9213 every
9214 label
9215 continues
9216 to
9217 represent
9218 the
9219 same
9220 node
9221 it
9222 represented
9223 at
9224 the
9225 beginning
9226 of
9227 the
9228 case
9229 Any
9230 color
9231 shown
9232 in
9233 the
9234 diagram
9235 is
9236 either
9237 assumed
9238 in
9239 its
9240 case
9241 or
9242 implied
9243 by
9244 those
9245 assumptions
9246 White
9247 represents
9248 an
9249 unknown
9250 color
9251 either
9252 red
9253 or
9254 black
9255 We
9256 will
9257 find
9258 the
9259 sibling
9260 using
9261 this
9262 function
9263 Hash
9264 table
9265 Not
9266 to
9267 be
9268 confused
9269 with
9270 Hash
9271 list
9272 or
9273 Hash
9274 tree
9275 Hash
9276 table
9277 Type
9278 Unordered
9279 associative
9280 array
9281 Invented
9282 1953
9283 A
9284 small
9285 phone
9286 book
9287 as
9288 a
9289 hash
9290 table
9291 In
9292 computing
9293 a
9294 hash
9295 table
9296 hash
9297 map
9298 is
9299 a
9300 data
9301 structure
9302 used
9303 to
9304 implement
9305 an
9306 associative
9307 array
9308 a
9309 structure
9310 that
9311 can
9312 map
9313 keys
9314 to
9315 values
9316 A
9317 hash
9318 table
9319 uses
9320 a
9321 hash
9322 function
9323 to
9324 compute
9325 an
9326 index
9327 into
9328 an
9329 array
9330 of
9331 buckets
9332 or
9333 slots
9334 from
9335 which
9336 the
9337 correct
9338 value
9339 can
9340 be
9341 found
9342 Ideally
9343 the
9344 hash
9345 function
9346 will
9347 assign
9348 each
9349 key
9350 to
9351 a
9352 unique
9353 bucket
9354 but
9355 this
9356 situation
9357 is
9358 rarely
9359 achievable
9360 in
9361 practice
9362 usually
9363 some
9364 keys
9365 will
9366 hash
9367 to
9368 the
9369 same
9370 bucket
9371 Instead
9372 most
9373 hash
9374 table
9375 designs
9376 assume
9377 that
9378 hash
9379 collisions
9380 different
9381 keys
9382 that
9383 are
9384 assigned
9385 by
9386 the
9387 hash
9388 function
9389 to
9390 the
9391 same
9392 bucket
9393 will
9394 occur
9395 and
9396 must
9397 be
9398 accommodated
9399 in
9400 some
9401 way
9402 In
9403 a
9404 well
9405 dimensioned
9406 hash
9407 table
9408 the
9409 average
9410 cost
9411 number
9412 of
9413 instructions
9414 for
9415 each
9416 lookup
9417 is
9418 independent
9419 of
9420 the
9421 number
9422 of
9423 elements
9424 stored
9425 in
9426 the
9427 table
9428 Many
9429 hash
9430 table
9431 designs
9432 also
9433 allow
9434 arbitrary
9435 insertions
9436 and
9437 deletions
9438 of
9439 key
9440 value
9441 pairs
9442 at
9443 amortized2
9444 constant
9445 average
9446 cost
9447 per
9448 operation34
9449 In
9450 many
9451 situations
9452 hash
9453 tables
9454 turn
9455 out
9456 to
9457 be
9458 more
9459 efficient
9460 than
9461 search
9462 trees
9463 or
9464 any
9465 other
9466 table
9467 lookup
9468 structure
9469 For
9470 this
9471 reason
9472 they
9473 are
9474 widely
9475 used
9476 in
9477 many
9478 kinds
9479 of
9480 computer
9481 software
9482 particularly
9483 for
9484 associative
9485 arrays
9486 database
9487 indexing
9488 caches
9489 and
9490 sets
9491 Hash
9492 function
9493 The
9494 idea
9495 of
9496 hashing
9497 is
9498 to
9499 distribute
9500 the
9501 entries
9502 key
9503 value
9504 pairs
9505 across
9506 an
9507 array
9508 of
9509 buckets
9510 Given
9511 a
9512 key
9513 the
9514 algorithm
9515 computes
9516 an
9517 index
9518 that
9519 suggests
9520 where
9521 the
9522 entry
9523 can
9524 be
9525 found
9526 index
9527 fkey
9528 array
9529 size
9530 Often
9531 this
9532 is
9533 done
9534 in
9535 two
9536 steps
9537 hash
9538 hashfunckey
9539 index
9540 hash
9541 array
9542 size
9543 In
9544 this
9545 method
9546 the
9547 hash
9548 is
9549 independent
9550 of
9551 the
9552 array
9553 size
9554 and
9555 it
9556 is
9557 then
9558 reduced
9559 to
9560 an
9561 index
9562 a
9563 number
9564 between
9565 0
9566 and
9567 array
9568 size
9569 1
9570 using
9571 the
9572 modulo
9573 operator
9574 In
9575 the
9576 case
9577 that
9578 the
9579 array
9580 size
9581 is
9582 a
9583 power
9584 of
9585 two
9586 the
9587 remainder
9588 operation
9589 is
9590 reduced
9591 to
9592 masking
9593 which
9594 improves
9595 speed
9596 but
9597 can
9598 increase
9599 problems
9600 with
9601 a
9602 poor
9603 hash
9604 function
9605 Choosing
9606 a
9607 good
9608 hash
9609 function
9610 A
9611 good
9612 hash
9613 function
9614 and
9615 implementation
9616 algorithm
9617 are
9618 essential
9619 for
9620 good
9621 hash
9622 table
9623 performance
9624 but
9625 may
9626 be
9627 difficult
9628 to
9629 achieve
9630 A
9631 basic
9632 requirement
9633 is
9634 that
9635 the
9636 function
9637 should
9638 provide
9639 a
9640 uniform
9641 distribution
9642 of
9643 hash
9644 values
9645 A
9646 non
9647 uniform
9648 distribution
9649 increases
9650 the
9651 number
9652 of
9653 collisions
9654 and
9655 the
9656 cost
9657 of
9658 resolving
9659 them
9660 Uniformity
9661 is
9662 sometimes
9663 difficult
9664 to
9665 ensure
9666 by
9667 design
9668 but
9669 may
9670 be
9671 evaluated
9672 empirically
9673 using
9674 statistical
9675 tests
9676 eg
9677 a
9678 Pearsons
9679 chi
9680 squared
9681 test
9682 for
9683 discrete
9684 uniform
9685 distributions56
9686 The
9687 distribution
9688 needs
9689 to
9690 be
9691 uniform
9692 only
9693 for
9694 table
9695 sizes
9696 that
9697 occur
9698 in
9699 the
9700 application
9701 In
9702 particular
9703 if
9704 one
9705 uses
9706 dynamic
9707 resizing
9708 with
9709 exact
9710 doubling
9711 and
9712 halving
9713 of
9714 the
9715 table
9716 size
9717 s
9718 then
9719 the
9720 hash
9721 function
9722 needs
9723 to
9724 be
9725 uniform
9726 only
9727 when
9728 s
9729 is
9730 a
9731 power
9732 of
9733 two
9734 On
9735 the
9736 other
9737 hand
9738 some
9739 hashing
9740 algorithms
9741 provide
9742 uniform
9743 hashes
9744 only
9745 when
9746 s
9747 is
9748 a
9749 prime
9750 number7
9751 For
9752 open
9753 addressing
9754 schemes
9755 the
9756 hash
9757 function
9758 should
9759 also
9760 avoid
9761 clustering
9762 the
9763 mapping
9764 of
9765 two
9766 or
9767 more
9768 keys
9769 to
9770 consecutive
9771 slots
9772 Such
9773 clustering
9774 may
9775 cause
9776 the
9777 lookup
9778 cost
9779 to
9780 skyrocket
9781 even
9782 if
9783 the
9784 load
9785 factor
9786 is
9787 low
9788 and
9789 collisions
9790 are
9791 infrequent
9792 The
9793 popular
9794 multiplicative
9795 hash3
9796 is
9797 claimed
9798 to
9799 have
9800 particularly
9801 poor
9802 clustering
9803 behavior7
9804 Cryptographic
9805 hash
9806 functions
9807 are
9808 believed
9809 to
9810 provide
9811 good
9812 hash
9813 functions
9814 for
9815 any
9816 table
9817 size
9818 s
9819 either
9820 by
9821 modulo
9822 reduction
9823 or
9824 by
9825 bit
9826 masking
9827 They
9828 may
9829 also
9830 be
9831 appropriate
9832 if
9833 there
9834 is
9835 a
9836 risk
9837 of
9838 malicious
9839 users
9840 trying
9841 to
9842 sabotage
9843 a
9844 network
9845 service
9846 by
9847 submitting
9848 requests
9849 designed
9850 to
9851 generate
9852 a
9853 large
9854 number
9855 of
9856 collisions
9857 in
9858 the
9859 servers
9860 hash
9861 tables
9862 However
9863 the
9864 risk
9865 of
9866 sabotage
9867 can
9868 also
9869 be
9870 avoided
9871 by
9872 cheaper
9873 methods
9874 such
9875 as
9876 applying
9877 Hash
9878 table
9879 Not
9880 to
9881 be
9882 confused
9883 with
9884 Hash
9885 list
9886 or
9887 Hash
9888 tree
9889 Hash
9890 table
9891 Type
9892 Unordered
9893 associative
9894 array
9895 Invented
9896 1953
9897 A
9898 small
9899 phone
9900 book
9901 as
9902 a
9903 hash
9904 table
9905 In
9906 computing
9907 a
9908 hash
9909 table
9910 hash
9911 map
9912 is
9913 a
9914 data
9915 structure
9916 used
9917 to
9918 implement
9919 an
9920 associative
9921 array
9922 a
9923 structure
9924 that
9925 can
9926 map
9927 keys
9928 to
9929 values
9930 A
9931 hash
9932 table
9933 uses
9934 a
9935 hash
9936 function
9937 to
9938 compute
9939 an
9940 index
9941 into
9942 an
9943 array
9944 of
9945 buckets
9946 or
9947 slots
9948 from
9949 which
9950 the
9951 correct
9952 value
9953 can
9954 be
9955 found
9956 Ideally
9957 the
9958 hash
9959 function
9960 will
9961 assign
9962 each
9963 key
9964 to
9965 a
9966 unique
9967 bucket
9968 but
9969 this
9970 situation
9971 is
9972 rarely
9973 achievable
9974 in
9975 practice
9976 usually
9977 some
9978 keys
9979 will
9980 hash
9981 to
9982 the
9983 same
9984 bucket
9985 Instead
9986 most
9987 hash
9988 table
9989 designs
9990 assume
9991 that
9992 hash
9993 collisions
9994 different
9995 keys
9996 that
9997 are
9998 assigned
9999 by
10000 the
10001 hash
10002 function
10003 to
10004 the
10005 same
10006 bucket
10007 will
10008 occur
10009 and
10010 must
10011 be
10012 accommodated
10013 in
10014 some
10015 way
10016 In
10017 a
10018 well
10019 dimensioned
10020 hash
10021 table
10022 the
10023 average
10024 cost
10025 number
10026 of
10027 instructions
10028 for
10029 each
10030 lookup
10031 is
10032 independent
10033 of
10034 the
10035 number
10036 of
10037 elements
10038 stored
10039 in
10040 the
10041 table
10042 Many
10043 hash
10044 table
10045 designs
10046 also
10047 allow
10048 arbitrary
10049 insertions
10050 and
10051 deletions
10052 of
10053 key
10054 value
10055 pairs
10056 at
10057 amortized2
10058 constant
10059 average
10060 cost
10061 per
10062 operation34
10063 In
10064 many
10065 situations
10066 hash
10067 tables
10068 turn
10069 out
10070 to
10071 be
10072 more
10073 efficient
10074 than
10075 search
10076 trees
10077 or
10078 any
10079 other
10080 table
10081 lookup
10082 structure
10083 For
10084 this
10085 reason
10086 they
10087 are
10088 widely
10089 used
10090 in
10091 many
10092 kinds
10093 of
10094 computer
10095 software
10096 particularly
10097 for
10098 associative
10099 arrays
10100 database
10101 indexing
10102 caches
10103 and
10104 sets
10105 Hash
10106 function
10107 The
10108 idea
10109 of
10110 hashing
10111 is
10112 to
10113 distribute
10114 the
10115 entries
10116 key
10117 value
10118 pairs
10119 across
10120 an
10121 array
10122 of
10123 buckets
10124 Given
10125 a
10126 key
10127 the
10128 algorithm
10129 computes
10130 an
10131 index
10132 that
10133 suggests
10134 where
10135 the
10136 entry
10137 can
10138 be
10139 found
10140 index
10141 fkey
10142 array
10143 size
10144 Often
10145 this
10146 is
10147 done
10148 in
10149 two
10150 steps
10151 hash
10152 hashfunckey
10153 index
10154 hash
10155 array
10156 size
10157 In
10158 this
10159 method
10160 the
10161 hash
10162 is
10163 independent
10164 of
10165 the
10166 array
10167 size
10168 and
10169 it
10170 is
10171 then
10172 reduced
10173 to
10174 an
10175 index
10176 a
10177 number
10178 between
10179 0
10180 and
10181 array
10182 size
10183 1
10184 using
10185 the
10186 modulo
10187 operator
10188 In
10189 the
10190 case
10191 that
10192 the
10193 array
10194 size
10195 is
10196 a
10197 power
10198 of
10199 two
10200 the
10201 remainder
10202 operation
10203 is
10204 reduced
10205 to
10206 masking
10207 which
10208 improves
10209 speed
10210 but
10211 can
10212 increase
10213 problems
10214 with
10215 a
10216 poor
10217 hash
10218 function
10219 Choosing
10220 a
10221 good
10222 hash
10223 function
10224 A
10225 good
10226 hash
10227 function
10228 and
10229 implementation
10230 algorithm
10231 are
10232 essential
10233 for
10234 good
10235 hash
10236 table
10237 performance
10238 but
10239 may
10240 be
10241 difficult
10242 to
10243 achieve
10244 A
10245 basic
10246 requirement
10247 is
10248 that
10249 the
10250 function
10251 should
10252 provide
10253 a
10254 uniform
10255 distribution
10256 of
10257 hash
10258 values
10259 A
10260 non
10261 uniform
10262 distribution
10263 increases
10264 the
10265 number
10266 of
10267 collisions
10268 and
10269 the
10270 cost
10271 of
10272 resolving
10273 them
10274 Uniformity
10275 is
10276 sometimes
10277 difficult
10278 to
10279 ensure
10280 by
10281 design
10282 but
10283 may
10284 be
10285 evaluated
10286 empirically
10287 using
10288 statistical
10289 tests
10290 eg
10291 a
10292 Pearsons
10293 chi
10294 squared
10295 test
10296 for
10297 discrete
10298 uniform
10299 distributions56
10300 The
10301 distribution
10302 needs
10303 to
10304 be
10305 uniform
10306 only
10307 for
10308 table
10309 sizes
10310 that
10311 occur
10312 in
10313 the
10314 application
10315 In
10316 particular
10317 if
10318 one
10319 uses
10320 dynamic
10321 resizing
10322 with
10323 exact
10324 doubling
10325 and
10326 halving
10327 of
10328 the
10329 table
10330 size
10331 s
10332 then
10333 the
10334 hash
10335 function
10336 needs
10337 to
10338 be
10339 uniform
10340 only
10341 when
10342 s
10343 is
10344 a
10345 power
10346 of
10347 two
10348 On
10349 the
10350 other
10351 hand
10352 some
10353 hashing
10354 algorithms
10355 provide
10356 uniform
10357 hashes
10358 only
10359 when
10360 s
10361 is
10362 a
10363 prime
10364 number7
10365 For
10366 open
10367 addressing
10368 schemes
10369 the
10370 hash
10371 function
10372 should
10373 also
10374 avoid
10375 clustering
10376 the
10377 mapping
10378 of
10379 two
10380 or
10381 more
10382 keys
10383 to
10384 consecutive
10385 slots
10386 Such
10387 clustering
10388 may
10389 cause
10390 the
10391 lookup
10392 cost
10393 to
10394 skyrocket
10395 even
10396 if
10397 the
10398 load
10399 factor
10400 is
10401 low
10402 and
10403 collisions
10404 are
10405 infrequent
10406 The
10407 popular
10408 multiplicative
10409 hash3
10410 is
10411 claimed
10412 to
10413 have
10414 particularly
10415 poor
10416 clustering
10417 behavior7
10418 Cryptographic
10419 hash
10420 functions
10421 are
10422 believed
10423 to
10424 provide
10425 good
10426 hash
10427 functions
10428 for
10429 any
10430 table
10431 size
10432 s
10433 either
10434 by
10435 modulo
10436 reduction
10437 or
10438 by
10439 bit
10440 masking
10441 They
10442 may
10443 also
10444 be
10445 appropriate
10446 if
10447 there
10448 is
10449 a
10450 risk
10451 of
10452 malicious
10453 users
10454 trying
10455 to
10456 sabotage
10457 a
10458 network
10459 service
10460 by
10461 submitting
10462 requests
10463 designed
10464 to
10465 generate
10466 a
10467 large
10468 number
10469 of
10470 collisions
10471 in
10472 the
10473 servers
10474 hash
10475 tables
10476 However
10477 the
10478 risk
10479 of
10480 sabotage
10481 can
10482 also
10483 be
10484 avoided
10485 by
10486 cheaper
10487 methods
10488 such
10489 as
10490 applying
10491 a
10492 secret
10493 salt
10494 to
10495 the
10496 data
10497 or
10498 using
10499 a
10500 universal
10501 hash
10502 function
10503 Perfect
10504 hash
10505 function
10506 If
10507 all
10508 keys
10509 are
10510 known
10511 ahead
10512 of
10513 time
10514 a
10515 perfect
10516 hash
10517 function
10518 can
10519 be
10520 used
10521 to
10522 create
10523 a
10524 perfect
10525 hash
10526 table
10527 that
10528 has
10529 no
10530 collisions
10531 If
10532 minimal
10533 perfect
10534 hashing
10535 is
10536 used
10537 every
10538 location
10539 in
10540 the
10541 hash
10542 table
10543 can
10544 be
10545 used
10546 as
10547 well
10548 Perfect
10549 hashing
10550 allows
10551 for
10552 constant
10553 time
10554 lookups
10555 in
10556 the
10557 worst
10558 case
10559 This
10560 is
10561 in
10562 contrast
10563 to
10564 most
10565 chaining
10566 and
10567 open
10568 addressing
10569 methods
10570 where
10571 the
10572 time
10573 for
10574 lookup
10575 is
10576 low
10577 on
10578 average
10579 but
10580 may
10581 be
10582 very
10583 large
10584 proportional
10585 to
10586 the
10587 number
10588 of
10589 entries
10590 for
10591 some
10592 sets
10593 of
10594 keys
10595 Key
10596 statistics
10597 A
10598 critical
10599 statistic
10600 for
10601 a
10602 hash
10603 table
10604 is
10605 called
10606 the
10607 load
10608 factor
10609 This
10610 is
10611 simply
10612 the
10613 number
10614 of
10615 entries
10616 divided
10617 by
10618 the
10619 number
10620 of
10621 buckets
10622 that
10623 is
10624 n
10625 k
10626 where
10627 n
10628 is
10629 the
10630 number
10631 of
10632 entries
10633 and
10634 k
10635 is
10636 the
10637 number
10638 of
10639 buckets
10640 If
10641 the
10642 load
10643 factor
10644 is
10645 kept
10646 reasonable
10647 the
10648 hash
10649 table
10650 should
10651 perform
10652 well
10653 provided
10654 the
10655 hashing
10656 is
10657 good
10658 If
10659 the
10660 load
10661 factor
10662 grows
10663 too
10664 large
10665 the
10666 hash
10667 table
10668 will
10669 become
10670 slow
10671 or
10672 it
10673 may
10674 fail
10675 to
10676 work
10677 depending
10678 on
10679 the
10680 method
10681 used
10682 The
10683 expected
10684 constant
10685 time
10686 property
10687 of
10688 a
10689 hash
10690 table
10691 assumes
10692 that
10693 the
10694 load
10695 factor
10696 is
10697 kept
10698 below
10699 some
10700 bound
10701 For
10702 a
10703 fixed
10704 number
10705 of
10706 buckets
10707 the
10708 time
10709 for
10710 a
10711 lookup
10712 grows
10713 with
10714 the
10715 number
10716 of
10717 entries
10718 and
10719 so
10720 does
10721 not
10722 achieve
10723 the
10724 desired
10725 constant
10726 time
10727 Second
10728 to
10729 that
10730 one
10731 can
10732 examine
10733 the
10734 variance
10735 of
10736 number
10737 of
10738 entries
10739 per
10740 bucket
10741 For
10742 example
10743 two
10744 tables
10745 both
10746 have
10747 1000
10748 entries
10749 and
10750 1000
10751 buckets
10752 one
10753 has
10754 exactly
10755 one
10756 entry
10757 in
10758 each
10759 bucket
10760 the
10761 other
10762 has
10763 all
10764 entries
10765 in
10766 the
10767 same
10768 bucket
10769 Clearly
10770 the
10771 hashing
10772 is
10773 not
10774 working
10775 in
10776 the
10777 second
10778 one
10779 A
10780 low
10781 load
10782 factor
10783 is
10784 not
10785 especially
10786 beneficial
10787 As
10788 the
10789 load
10790 factor
10791 approaches
10792 0
10793 the
10794 proportion
10795 of
10796 unused
10797 areas
10798 in
10799 the
10800 hash
10801 table
10802 increases
10803 but
10804 there
10805 is
10806 not
10807 necessarily
10808 any
10809 reduction
10810 in
10811 search
10812 cost
10813 This
10814 results
10815 in
10816 wasted
10817 memory
10818 Collision
10819 resolution
10820 Hash
10821 collisions
10822 are
10823 practically
10824 unavoidable
10825 when
10826 hashing
10827 a
10828 random
10829 subset
10830 of
10831 a
10832 large
10833 set
10834 of
10835 possible
10836 keys
10837 For
10838 example
10839 if
10840 2
10841 450
10842 keys
10843 are
10844 hashed
10845 into
10846 a
10847 million
10848 buckets
10849 even
10850 with
10851 a
10852 perfectly
10853 uniform
10854 random
10855 distribution
10856 according
10857 to
10858 the
10859 birthday
10860 problem
10861 there
10862 is
10863 approximately
10864 a
10865 95
10866 chance
10867 of
10868 at
10869 least
10870 two
10871 of
10872 the
10873 keys
10874 being
10875 hashed
10876 to
10877 the
10878 same
10879 slot
10880 Therefore
10881 most
10882 hash
10883 table
10884 implementations
10885 have
10886 some
10887 collision
10888 resolution
10889 strategy
10890 to
10891 handle
10892 such
10893 events
10894 Some
10895 common
10896 strategies
10897 are
10898 described
10899 below
10900 All
10901 these
10902 methods
10903 require
10904 that
10905 the
10906 keys
10907 or
10908 pointers
10909 to
10910 them
10911 be
10912 stored
10913 in
10914 the
10915 table
10916 together
10917 with
10918 the
10919 associated
10920 values
10921 Separate
10922 chaining
10923 Hash
10924 collision
10925 resolved
10926 by
10927 separate
10928 chaining
10929 In
10930 the
10931 method
10932 known
10933 as
10934 separate
10935 chaining
10936 each
10937 bucket
10938 is
10939 independent
10940 and
10941 has
10942 some
10943 sort
10944 of
10945 list
10946 of
10947 entries
10948 with
10949 the
10950 same
10951 index
10952 The
10953 time
10954 for
10955 hash
10956 table
10957 operations
10958 is
10959 the
10960 time
10961 to
10962 find
10963 the
10964 bucket
10965 which
10966 is
10967 constant
10968 plus
10969 the
10970 time
10971 for
10972 the
10973 list
10974 operation
10975 The
10976 technique
10977 is
10978 also
10979 called
10980 open
10981 hashing
10982 or
10983 closed
10984 addressing
10985 In
10986 a
10987 good
10988 hash
10989 table
10990 each
10991 bucket
10992 has
10993 zero
10994 or
10995 one
10996 entries
10997 and
10998 sometimes
10999 two
11000 or
11001 three
11002 but
11003 rarely
11004 more
11005 than
11006 that
11007 Therefore
11008 structures
11009 that
11010 are
11011 efficient
11012 in
11013 time
11014 and
11015 space
11016 for
11017 these
11018 cases
11019 are
11020 preferred
11021 Structures
11022 that
11023 are
11024 efficient
11025 for
11026 a
11027 fairly
11028 large
11029 number
11030 of
11031 entries
11032 per
11033 bucket
11034 are
11035 not
11036 needed
11037 or
11038 desirable
11039 If
11040 these
11041 cases
11042 happen
11043 often
11044 the
11045 hashing
11046 is
11047 not
11048 working
11049 well
11050 and
11051 this
11052 needs
11053 to
11054 be
11055 fixed
11056 Separate
11057 chaining
11058 with
11059 linked
11060 lists
11061 Chained
11062 hash
11063 tables
11064 with
11065 linked
11066 lists
11067 are
11068 popular
11069 because
11070 they
11071 require
11072 only
11073 basic
11074 data
11075 structures
11076 with
11077 simple
11078 algorithms
11079 and
11080 can
11081 use
11082 simple
11083 hash
11084 functions
11085 that
11086 are
11087 unsuitable
11088 for
11089 other
11090 methods
11091 The
11092 cost
11093 of
11094 a
11095 table
11096 operation
11097 is
11098 that
11099 of
11100 scanning
11101 the
11102 entries
11103 of
11104 the
11105 selected
11106 bucket
11107 for
11108 the
11109 desired
11110 key
11111 If
11112 the
11113 distribution
11114 of
11115 keys
11116 is
11117 sufficiently
11118 uniform
11119 the
11120 average
11121 cost
11122 of
11123 a
11124 lookup
11125 depends
11126 only
11127 on
11128 the
11129 average
11130 number
11131 of
11132 keys
11133 per
11134 bucket
11135 that
11136 is
11137 on
11138 the
11139 load
11140 factor
11141 Chained
11142 hash
11143 tables
11144 remain
11145 effective
11146 even
11147 when
11148 the
11149 number
11150 of
11151 table
11152 entries
11153 n
11154 is
11155 much
11156 higher
11157 than
11158 the
11159 number
11160 of
11161 slots
11162 Their
11163 performance
11164 degrades
11165 more
11166 gracefully
11167 linearly
11168 with
11169 the
11170 load
11171 factor
11172 For
11173 example
11174 a
11175 chained
11176 hash
11177 table
11178 with
11179 1000
11180 slots
11181 and
11182 10
11183 000
11184 stored
11185 keys
11186 load
11187 factor
11188 10
11189 is
11190 five
11191 to
11192 ten
11193 times
11194 slower
11195 than
11196 a
11197 10
11198 000
11199 slot
11200 table
11201 load
11202 factor
11203 1
11204 but
11205 still
11206 1000
11207 times
11208 faster
11209 than
11210 a
11211 plain
11212 sequential
11213 list
11214 and
11215 possibly
11216 even
11217 faster
11218 than
11219 a
11220 balanced
11221 search
11222 tree
11223 For
11224 separate
11225 chaining
11226 the
11227 worst
11228 case
11229 scenario
11230 is
11231 when
11232 all
11233 entries
11234 are
11235 inserted
11236 into
11237 the
11238 same
11239 bucket
11240 in
11241 which
11242 case
11243 the
11244 hash
11245 table
11246 is
11247 ineffective
11248 and
11249 the
11250 cost
11251 is
11252 that
11253 of
11254 searching
11255 the
11256 bucket
11257 data
11258 structure
11259 If
11260 the
11261 latter
11262 is
11263 a
11264 linear
11265 list
11266 the
11267 lookup
11268 procedure
11269 may
11270 have
11271 to
11272 scan
11273 all
11274 its
11275 entries
11276 so
11277 the
11278 worst
11279 case
11280 cost
11281 is
11282 proportional
11283 to
11284 the
11285 number
11286 n
11287 of
11288 entries
11289 in
11290 the
11291 table
11292 The
11293 bucket
11294 chains
11295 are
11296 often
11297 implemented
11298 as
11299 ordered
11300 lists
11301 sorted
11302 by
11303 the
11304 key
11305 field
11306 this
11307 choice
11308 approximately
11309 halves
11310 the
11311 average
11312 cost
11313 of
11314 unsuccessful
11315 lookups
11316 compared
11317 to
11318 an
11319 unordered
11320 list
11321 However
11322 if
11323 some
11324 keys
11325 are
11326 much
11327 more
11328 likely
11329 to
11330 come
11331 up
11332 than
11333 others
11334 an
11335 unordered
11336 list
11337 with
11338 move
11339 to
11340 front
11341 heuristic
11342 may
11343 be
11344 more
11345 effective
11346 More
11347 sophisticated
11348 data
11349 structures
11350 such
11351 as
11352 balanced
11353 search
11354 trees
11355 are
11356 worth
11357 considering
11358 only
11359 if
11360 the
11361 load
11362 factor
11363 is
11364 large
11365 about
11366 10
11367 or
11368 more
11369 or
11370 if
11371 the
11372 hash
11373 distribution
11374 is
11375 likely
11376 to
11377 be
11378 very
11379 non
11380 uniform
11381 or
11382 if
11383 one
11384 must
11385 guarantee
11386 good
11387 performance
11388 even
11389 in
11390 a
11391 worst
11392 case
11393 scenario
11394 However
11395 using
11396 a
11397 larger
11398 table
11399 and
11400 or
11401 a
11402 better
11403 hash
11404 function
11405 may
11406 be
11407 even
11408 more
11409 effective
11410 in
11411 those
11412 cases
11413 Chained
11414 hash
11415 tables
11416 also
11417 inherit
11418 the
11419 disadvantages
11420 of
11421 linked
11422 lists
11423 When
11424 storing
11425 small
11426 keys
11427 and
11428 values
11429 the
11430 space
11431 overhead
11432 of
11433 the
11434 next
11435 pointer
11436 in
11437 each
11438 entry
11439 record
11440 can
11441 be
11442 significant
11443 An
11444 additional
11445 disadvantage
11446 is
11447 that
11448 traversing
11449 a
11450 linked
11451 list
11452 has
11453 poor
11454 cache
11455 performance
11456 making
11457 the
11458 processor
11459 cache
11460 ineffective
11461 Separate
11462 chaining
11463 with
11464 list
11465 head
11466 cells
11467 Hash
11468 collision
11469 by
11470 separate
11471 chaining
11472 with
11473 head
11474 records
11475 in
11476 the
11477 bucket
11478 array
11479 Some
11480 chaining
11481 implementations
11482 store
11483 the
11484 first
11485 record
11486 of
11487 each
11488 chain
11489 in
11490 the
11491 slot
11492 array
11493 itself4
11494 The
11495 number
11496 of
11497 pointer
11498 traversals
11499 is
11500 decreased
11501 by
11502 one
11503 for
11504 most
11505 cases
11506 The
11507 purpose
11508 is
11509 to
11510 increase
11511 cache
11512 efficiency
11513 of
11514 hash
11515 table
11516 access
11517 The
11518 disadvantage
11519 is
11520 that
11521 an
11522 empty
11523 bucket
11524 takes
11525 the
11526 same
11527 space
11528 as
11529 a
11530 bucket
11531 with
11532 one
11533 entry
11534 To
11535 save
11536 space
11537 such
11538 hash
11539 tables
11540 often
11541 have
11542 about
11543 as
11544 many
11545 slots
11546 as
11547 stored
11548 entries
11549 meaning
11550 that
11551 many
11552 slots
11553 have
11554 two
11555 or
11556 more
11557 entries
11558 Separate
11559 chaining
11560 with
11561 other
11562 structures
11563 Instead
11564 of
11565 a
11566 list
11567 one
11568 can
11569 use
11570 any
11571 other
11572 data
11573 structure
11574 that
11575 supports
11576 the
11577 required
11578 operations
11579 For
11580 example
11581 by
11582 using
11583 a
11584 self
11585 balancing
11586 tree
11587 the
11588 theoretical
11589 worst
11590 case
11591 time
11592 of
11593 common
11594 hash
11595 table
11596 operations
11597 insertion
11598 deletion
11599 lookup
11600 can
11601 be
11602 brought
11603 down
11604 to
11605 Olog
11606 n
11607 rather
11608 than
11609 On
11610 However
11611 this
11612 approach
11613 is
11614 only
11615 worth
11616 the
11617 trouble
11618 and
11619 extra
11620 memory
11621 cost
11622 if
11623 long
11624 delays
11625 must
11626 be
11627 avoided
11628 at
11629 all
11630 costs
11631 eg
11632 in
11633 a
11634 real
11635 time
11636 application
11637 or
11638 if
11639 one
11640 must
11641 guard
11642 against
11643 many
11644 entries
11645 hashed
11646 to
11647 the
11648 same
11649 slot
11650 eg
11651 if
11652 one
11653 expects
11654 extremely
11655 non
11656 uniform
11657 distributions
11658 or
11659 in
11660 the
11661 case
11662 of
11663 web
11664 sites
11665 or
11666 other
11667 publicly
11668 accessible
11669 services
11670 which
11671 are
11672 vulnerable
11673 to
11674 malicious
11675 key
11676 distributions
11677 in
11678 requests
11679 The
11680 variant
11681 called
11682 array
11683 hash
11684 table
11685 uses
11686 a
11687 dynamic
11688 array
11689 to
11690 store
11691 all
11692 the
11693 entries
11694 that
11695 hash
11696 to
11697 the
11698 same
11699 slot8910
11700 Each
11701 newly
11702 inserted
11703 entry
11704 gets
11705 appended
11706 to
11707 the
11708 end
11709 of
11710 the
11711 dynamic
11712 array
11713 that
11714 is
11715 assigned
11716 to
11717 the
11718 slot
11719 The
11720 dynamic
11721 array
11722 is
11723 resized
11724 in
11725 an
11726 exact
11727 fit
11728 manner
11729 meaning
11730 it
11731 is
11732 grown
11733 only
11734 by
11735 as
11736 many
11737 bytes
11738 as
11739 needed
11740 Alternative
11741 techniques
11742 such
11743 as
11744 growing
11745 the
11746 array
11747 by
11748 block
11749 sizes
11750 or
11751 pages
11752 were
11753 found
11754 to
11755 improve
11756 insertion
11757 performance
11758 but
11759 at
11760 a
11761 cost
11762 in
11763 space
11764 This
11765 variation
11766 makes
11767 more
11768 efficient
11769 use
11770 of
11771 CPU
11772 caching
11773 and
11774 the
11775 translation
11776 lookaside
11777 buffer
11778 TLB
11779 because
11780 slot
11781 entries
11782 are
11783 stored
11784 in
11785 sequential
11786 memory
11787 positions
11788 It
11789 also
11790 dispenses
11791 with
11792 the
11793 next
11794 pointers
11795 that
11796 are
11797 required
11798 by
11799 linked
11800 lists
11801 which
11802 saves
11803 space
11804 Despite
11805 frequent
11806 array
11807 resizing
11808 space
11809 overheads
11810 incurred
11811 by
11812 operating
11813 system
11814 such
11815 as
11816 memory
11817 fragmentation
11818 were
11819 found
11820 to
11821 be
11822 small
11823 An
11824 elaboration
11825 on
11826 this
11827 approach
11828 is
11829 the
11830 so
11831 called
11832 dynamic
11833 perfect
11834 hashing
11835 11
11836 where
11837 a
11838 bucket
11839 that
11840 contains
11841 k
11842 entries
11843 is
11844 organized
11845 as
11846 a
11847 perfect
11848 hash
11849 table
11850 with
11851 k2
11852 slots
11853 While
11854 it
11855 uses
11856 more
11857 memory
11858 n2
11859 slots
11860 for
11861 n
11862 entries
11863 in
11864 the
11865 worst
11866 case
11867 and
11868 n
11869 k
11870 slots
11871 in
11872 the
11873 average
11874 case
11875 this
11876 variant
11877 has
11878 guaranteed
11879 constant
11880 worst
11881 case
11882 lookup
11883 time
11884 and
11885 low
11886 amortized
11887 time
11888 for
11889 insertion
11890 Open
11891 addressing
11892 Hash
11893 collision
11894 resolved
11895 by
11896 open
11897 addressing
11898 with
11899 linear
11900 probing
11901 interval
11902 1
11903 Note
11904 that
11905 Ted
11906 Baker
11907 has
11908 a
11909 unique
11910 hash
11911 but
11912 nevertheless
11913 collided
11914 with
11915 Sandra
11916 Dee
11917 that
11918 had
11919 previously
11920 collided
11921 with
11922 John
11923 Smith
11924 In
11925 another
11926 strategy
11927 called
11928 open
11929 addressing
11930 all
11931 entry
11932 records
11933 are
11934 stored
11935 in
11936 the
11937 bucket
11938 array
11939 itself
11940 When
11941 a
11942 new
11943 entry
11944 has
11945 to
11946 be
11947 inserted
11948 the
11949 buckets
11950 are
11951 examined
11952 starting
11953 with
11954 the
11955 hashed
11956 to
11957 slot
11958 and
11959 proceeding
11960 in
11961 some
11962 probe
11963 sequence
11964 until
11965 an
11966 unoccupied
11967 slot
11968 is
11969 found
11970 When
11971 searching
11972 for
11973 an
11974 entry
11975 the
11976 buckets
11977 are
11978 scanned
11979 in
11980 the
11981 same
11982 sequence
11983 until
11984 either
11985 the
11986 target
11987 record
11988 is
11989 found
11990 or
11991 an
11992 unused
11993 array
11994 slot
11995 is
11996 found
11997 which
11998 indicates
11999 that
12000 there
12001 is
12002 no
12003 such
12004 key
12005 in
12006 the
12007 table12
12008 The
12009 name
12010 open
12011 addressing
12012 refers
12013 to
12014 the
12015 fact
12016 that
12017 the
12018 location
12019 address
12020 of
12021 the
12022 item
12023 is
12024 not
12025 determined
12026 by
12027 its
12028 hash
12029 value
12030 This
12031 method
12032 is
12033 also
12034 called
12035 closed
12036 hashing
12037 it
12038 should
12039 not
12040 be
12041 confused
12042 with
12043 open
12044 hashing
12045 or
12046 closed
12047 addressing
12048 that
12049 usually
12050 mean
12051 separate
12052 chaining
12053 Well
12054 known
12055 probe
12056 sequences
12057 include
12058 Linear
12059 probing
12060 in
12061 which
12062 the
12063 interval
12064 between
12065 probes
12066 is
12067 fixed
12068 usually
12069 1
12070 Quadratic
12071 probing
12072 in
12073 which
12074 the
12075 interval
12076 between
12077 probes
12078 is
12079 increased
12080 by
12081 adding
12082 the
12083 successive
12084 outputs
12085 of
12086 a
12087 quadratic
12088 polynomial
12089 to
12090 the
12091 starting
12092 value
12093 given
12094 by
12095 the
12096 original
12097 hash
12098 computation
12099 Double
12100 hashing
12101 in
12102 which
12103 the
12104 interval
12105 between
12106 probes
12107 is
12108 computed
12109 by
12110 another
12111 hash
12112 function
12113 A
12114 drawback
12115 of
12116 all
12117 these
12118 open
12119 addressing
12120 schemes
12121 is
12122 that
12123 the
12124 number
12125 of
12126 stored
12127 entries
12128 cannot
12129 exceed
12130 the
12131 number
12132 of
12133 slots
12134 in
12135 the
12136 bucket
12137 array
12138 In
12139 fact
12140 even
12141 with
12142 good
12143 hash
12144 functions
12145 their
12146 performance
12147 dramatically
12148 degrades
12149 when
12150 the
12151 load
12152 factor
12153 grows
12154 beyond
12155 07
12156 or
12157 so
12158 For
12159 many
12160 applications
12161 these
12162 restrictions
12163 mandate
12164 the
12165 use
12166 of
12167 dynamic
12168 resizing
12169 with
12170 its
12171 attendant
12172 costs
12173 Open
12174 addressing
12175 schemes
12176 also
12177 put
12178 more
12179 stringent
12180 requirements
12181 on
12182 the
12183 hash
12184 function
12185 besides
12186 distributing
12187 the
12188 keys
12189 more
12190 uniformly
12191 over
12192 the
12193 buckets
12194 the
12195 function
12196 must
12197 also
12198 minimize
12199 the
12200 clustering
12201 of
12202 hash
12203 values
12204 that
12205 are
12206 consecutive
12207 in
12208 the
12209 probe
12210 order
12211 Using
12212 separate
12213 chaining
12214 the
12215 only
12216 concern
12217 is
12218 that
12219 too
12220 many
12221 objects
12222 map
12223 to
12224 the
12225 same
12226 hash
12227 value
12228 whether
12229 they
12230 are
12231 adjacent
12232 or
12233 nearby
12234 is
12235 completely
12236 irrelevant
12237 Open
12238 addressing
12239 only
12240 saves
12241 memory
12242 if
12243 the
12244 entries
12245 are
12246 small
12247 less
12248 than
12249 four
12250 times
12251 the
12252 size
12253 of
12254 a
12255 pointer
12256 and
12257 the
12258 load
12259 factor
12260 is
12261 not
12262 too
12263 small
12264 If
12265 the
12266 load
12267 factor
12268 is
12269 close
12270 to
12271 zero
12272 that
12273 is
12274 there
12275 are
12276 far
12277 more
12278 buckets
12279 than
12280 stored
12281 entries
12282 open
12283 addressing
12284 is
12285 wasteful
12286 even
12287 if
12288 each
12289 entry
12290 is
12291 just
12292 two
12293 words
12294 This
12295 graph
12296 compares
12297 the
12298 average
12299 number
12300 of
12301 cache
12302 misses
12303 required
12304 to
12305 look
12306 up
12307 elements
12308 in
12309 tables
12310 with
12311 chaining
12312 and
12313 linear
12314 probing
12315 As
12316 the
12317 table
12318 passes
12319 the
12320 80
12321 full
12322 mark
12323 linear
12324 probings
12325 performance
12326 drastically
12327 degrades
12328 Open
12329 addressing
12330 avoids
12331 the
12332 time
12333 overhead
12334 of
12335 allocating
12336 each
12337 new
12338 entry
12339 record
12340 and
12341 can
12342 be
12343 implemented
12344 even
12345 in
12346 the
12347 absence
12348 of
12349 a
12350 memory
12351 allocator
12352 It
12353 also
12354 avoids
12355 the
12356 extra
12357 indirection
12358 required
12359 to
12360 access
12361 the
12362 first
12363 entry
12364 of
12365 each
12366 bucket
12367 that
12368 is
12369 usually
12370 the
12371 only
12372 one
12373 It
12374 also
12375 has
12376 better
12377 locality
12378 of
12379 reference
12380 particularly
12381 with
12382 linear
12383 probing
12384 With
12385 small
12386 record
12387 sizes
12388 these
12389 factors
12390 can
12391 yield
12392 better
12393 performance
12394 than
12395 chaining
12396 particularly
12397 for
12398 lookups
12399 Hash
12400 tables
12401 with
12402 open
12403 addressing
12404 are
12405 also
12406 easier
12407 to
12408 serialize
12409 because
12410 they
12411 do
12412 not
12413 use
12414 pointers
12415 On
12416 the
12417 other
12418 hand
12419 normal
12420 open
12421 addressing
12422 is
12423 a
12424 poor
12425 choice
12426 for
12427 large
12428 elements
12429 because
12430 these
12431 elements
12432 fill
12433 entire
12434 CPU
12435 cache
12436 lines
12437 negating
12438 the
12439 cache
12440 advantage
12441 and
12442 a
12443 large
12444 amount
12445 of
12446 space
12447 is
12448 wasted
12449 on
12450 large
12451 empty
12452 table
12453 slots
12454 If
12455 the
12456 open
12457 addressing
12458 table
12459 only
12460 stores
12461 references
12462 to
12463 elements
12464 external
12465 storage
12466 it
12467 uses
12468 space
12469 comparable
12470 to
12471 chaining
12472 even
12473 for
12474 large
12475 records
12476 but
12477 loses
12478 its
12479 speed
12480 advantage
12481 Generally
12482 speaking
12483 open
12484 addressing
12485 is
12486 better
12487 used
12488 for
12489 hash
12490 tables
12491 with
12492 small
12493 records
12494 that
12495 can
12496 be
12497 stored
12498 within
12499 the
12500 table
12501 internal
12502 storage
12503 and
12504 fit
12505 in
12506 a
12507 cache
12508 line
12509 They
12510 are
12511 particularly
12512 suitable
12513 for
12514 elements
12515 of
12516 one
12517 word
12518 or
12519 less
12520 If
12521 the
12522 table
12523 is
12524 expected
12525 to
12526 have
12527 a
12528 high
12529 load
12530 factor
12531 the
12532 records
12533 are
12534 large
12535 or
12536 the
12537 data
12538 is
12539 variable
12540 sized
12541 chained
12542 hash
12543 tables
12544 often
12545 perform
12546 as
12547 well
12548 or
12549 better
12550 Ultimately
12551 used
12552 sensibly
12553 any
12554 kind
12555 of
12556 hash
12557 table
12558 algorithm
12559 is
12560 usually
12561 fast
12562 enough
12563 and
12564 the
12565 percentage
12566 of
12567 a
12568 calculation
12569 spent
12570 in
12571 hash
12572 table
12573 code
12574 is
12575 low
12576 Memory
12577 usage
12578 is
12579 rarely
12580 considered
12581 excessive
12582 Therefore
12583 in
12584 most
12585 cases
12586 the
12587 differences
12588 between
12589 these
12590 algorithms
12591 are
12592 marginal
12593 and
12594 other
12595 considerations
12596 typically
12597 come
12598 into
12599 play
12600 Coalesced
12601 hashing
12602 A
12603 hybrid
12604 of
12605 chaining
12606 and
12607 open
12608 addressing
12609 coalesced
12610 hashing
12611 links
12612 together
12613 chains
12614 of
12615 nodes
12616 within
12617 the
12618 table
12619 itself12
12620 Like
12621 open
12622 addressing
12623 it
12624 achieves
12625 space
12626 usage
12627 and
12628 somewhat
12629 diminished
12630 cache
12631 advantages
12632 over
12633 chaining
12634 Like
12635 chaining
12636 it
12637 does
12638 not
12639 exhibit
12640 clustering
12641 effects
12642 in
12643 fact
12644 the
12645 table
12646 can
12647 be
12648 efficiently
12649 filled
12650 to
12651 a
12652 high
12653 density
12654 Unlike
12655 chaining
12656 it
12657 cannot
12658 have
12659 more
12660 elements
12661 than
12662 table
12663 slots
12664 Cuckoo
12665 hashing
12666 Another
12667 alternative
12668 open
12669 addressing
12670 solution
12671 is
12672 cuckoo
12673 hashing
12674 which
12675 ensures
12676 constant
12677 lookup
12678 time
12679 in
12680 the
12681 worst
12682 case
12683 and
12684 constant
12685 amortized
12686 time
12687 for
12688 insertions
12689 and
12690 deletions
12691 It
12692 uses
12693 two
12694 or
12695 more
12696 hash
12697 functions
12698 which
12699 means
12700 any
12701 key
12702 value
12703 pair
12704 could
12705 be
12706 in
12707 two
12708 or
12709 more
12710 locations
12711 For
12712 lookup
12713 the
12714 first
12715 hash
12716 function
12717 is
12718 used
12719 if
12720 the
12721 key
12722 value
12723 is
12724 not
12725 found
12726 then
12727 the
12728 second
12729 hash
12730 function
12731 is
12732 used
12733 and
12734 so
12735 on
12736 If
12737 a
12738 collision
12739 happens
12740 during
12741 insertion
12742 then
12743 the
12744 key
12745 is
12746 re
12747 hashed
12748 with
12749 the
12750 second
12751 hash
12752 function
12753 to
12754 map
12755 it
12756 to
12757 another
12758 bucket
12759 If
12760 all
12761 hash
12762 functions
12763 are
12764 used
12765 and
12766 there
12767 is
12768 still
12769 a
12770 collision
12771 then
12772 the
12773 key
12774 it
12775 collided
12776 with
12777 is
12778 removed
12779 to
12780 make
12781 space
12782 for
12783 the
12784 new
12785 key
12786 and
12787 the
12788 old
12789 key
12790 is
12791 re
12792 hashed
12793 with
12794 one
12795 of
12796 the
12797 other
12798 hash
12799 functions
12800 which
12801 maps
12802 it
12803 to
12804 another
12805 bucket
12806 If
12807 that
12808 location
12809 also
12810 results
12811 in
12812 a
12813 collision
12814 then
12815 the
12816 process
12817 repeats
12818 until
12819 there
12820 is
12821 no
12822 collision
12823 or
12824 the
12825 process
12826 traverses
12827 all
12828 the
12829 buckets
12830 at
12831 which
12832 point
12833 the
12834 table
12835 is
12836 resized
12837 By
12838 combining
12839 multiple
12840 hash
12841 functions
12842 with
12843 multiple
12844 cells
12845 per
12846 bucket
12847 very
12848 high
12849 space
12850 utilisation
12851 can
12852 be
12853 achieved
12854 Hopscotch
12855 hashing
12856 Another
12857 alternative
12858 open
12859 addressing
12860 solution
12861 is
12862 hopscotch
12863 hashing
12864 13
12865 which
12866 combines
12867 the
12868 approaches
12869 of
12870 cuckoo
12871 hashing
12872 and
12873 linear
12874 probing
12875 yet
12876 seems
12877 in
12878 general
12879 to
12880 avoid
12881 their
12882 limitations
12883 In
12884 particular
12885 it
12886 works
12887 well
12888 even
12889 when
12890 the
12891 load
12892 factor
12893 grows
12894 beyond
12895 09
12896 The
12897 algorithm
12898 is
12899 well
12900 suited
12901 for
12902 implementing
12903 a
12904 resizable
12905 concurrent
12906 hash
12907 table
12908 The
12909 hopscotch
12910 hashing
12911 algorithm
12912 works
12913 by
12914 defining
12915 a
12916 neighborhood
12917 of
12918 buckets
12919 near
12920 the
12921 original
12922 hashed
12923 bucket
12924 where
12925 a
12926 given
12927 entry
12928 is
12929 always
12930 found
12931 Thus
12932 search
12933 is
12934 limited
12935 to
12936 the
12937 number
12938 of
12939 entries
12940 in
12941 this
12942 neighborhood
12943 which
12944 is
12945 logarithmic
12946 in
12947 the
12948 worst
12949 case
12950 constant
12951 on
12952 average
12953 and
12954 with
12955 proper
12956 alignment
12957 of
12958 the
12959 neighborhood
12960 typically
12961 requires
12962 one
12963 cache
12964 miss
12965 When
12966 inserting
12967 an
12968 entry
12969 one
12970 first
12971 attempts
12972 to
12973 add
12974 it
12975 to
12976 a
12977 bucket
12978 in
12979 the
12980 neighborhood
12981 However
12982 if
12983 all
12984 buckets
12985 in
12986 this
12987 neighborhood
12988 are
12989 occupied
12990 the
12991 algorithm
12992 traverses
12993 buckets
12994 in
12995 sequence
12996 until
12997 an
12998 open
12999 slot
13000 an
13001 unoccupied
13002 bucket
13003 is
13004 found
13005 as
13006 in
13007 linear
13008 probing
13009 At
13010 that
13011 point
13012 since
13013 the
13014 empty
13015 bucket
13016 is
13017 outside
13018 the
13019 neighborhood
13020 items
13021 are
13022 repeatedly
13023 displaced
13024 in
13025 a
13026 sequence
13027 of
13028 hops
13029 This
13030 is
13031 similar
13032 to
13033 cuckoo
13034 hashing
13035 but
13036 with
13037 the
13038 difference
13039 that
13040 in
13041 this
13042 case
13043 the
13044 empty
13045 slot
13046 is
13047 being
13048 moved
13049 into
13050 the
13051 neighborhood
13052 instead
13053 of
13054 items
13055 being
13056 moved
13057 out
13058 with
13059 the
13060 hope
13061 of
13062 eventually
13063 finding
13064 an
13065 empty
13066 slot
13067 Each
13068 hop
13069 brings
13070 the
13071 open
13072 slot
13073 closer
13074 to
13075 the
13076 original
13077 neighborhood
13078 without
13079 invalidating
13080 the
13081 neighborhood
13082 property
13083 of
13084 any
13085 of
13086 the
13087 buckets
13088 along
13089 the
13090 way
13091 In
13092 the
13093 end
13094 the
13095 open
13096 slot
13097 has
13098 been
13099 moved
13100 into
13101 the
13102 neighborhood
13103 and
13104 the
13105 entry
13106 being
13107 inserted
13108 can
13109 be
13110 added
13111 to
13112 it
13113 Robin
13114 Hood
13115 hashing
13116 One
13117 interesting
13118 variation
13119 on
13120 double
13121 hashing
13122 collision
13123 resolution
13124 is
13125 Robin
13126 Hood
13127 hashing1415
13128 The
13129 idea
13130 is
13131 that
13132 a
13133 new
13134 key
13135 may
13136 displace
13137 a
13138 key
13139 already
13140 inserted
13141 if
13142 its
13143 probe
13144 count
13145 is
13146 larger
13147 than
13148 that
13149 of
13150 the
13151 key
13152 at
13153 the
13154 current
13155 position
13156 The
13157 net
13158 effect
13159 of
13160 this
13161 is
13162 that
13163 it
13164 reduces
13165 worst
13166 case
13167 search
13168 times
13169 in
13170 the
13171 table
13172 This
13173 is
13174 similar
13175 to
13176 ordered
13177 hash
13178 tables16
13179 except
13180 that
13181 the
13182 criterion
13183 for
13184 bumping
13185 a
13186 key
13187 does
13188 not
13189 depend
13190 on
13191 a
13192 direct
13193 relationship
13194 between
13195 the
13196 keys
13197 Since
13198 both
13199 the
13200 worst
13201 case
13202 and
13203 the
13204 variation
13205 in
13206 the
13207 number
13208 of
13209 probes
13210 is
13211 reduced
13212 dramatically
13213 an
13214 interesting
13215 variation
13216 is
13217 to
13218 probe
13219 the
13220 table
13221 starting
13222 at
13223 the
13224 expected
13225 successful
13226 probe
13227 value
13228 and
13229 then
13230 expand
13231 from
13232 that
13233 position
13234 in
13235 both
13236 directions17
13237 External
13238 Robin
13239 Hashing
13240 is
13241 an
13242 extension
13243 of
13244 this
13245 algorithm
13246 where
13247 the
13248 table
13249 is
13250 stored
13251 in
13252 an
13253 external
13254 file
13255 and
13256 each
13257 table
13258 position
13259 corresponds
13260 to
13261 a
13262 fixed
13263 sized
13264 page
13265 or
13266 bucket
13267 with
13268 B
13269 records18
13270 2
13271 choice
13272 hashing
13273 2
13274 choice
13275 hashing
13276 employs
13277 2
13278 different
13279 hash
13280 functions
13281 h1x
13282 and
13283 h2x
13284 for
13285 the
13286 hash
13287 table
13288 Both
13289 hash
13290 functions
13291 are
13292 used
13293 to
13294 compute
13295 two
13296 table
13297 locations
13298 When
13299 an
13300 object
13301 is
13302 inserted
13303 in
13304 the
13305 table
13306 then
13307 it
13308 is
13309 placed
13310 in
13311 the
13312 table
13313 location
13314 that
13315 contains
13316 fewer
13317 objects
13318 with
13319 the
13320 default
13321 being
13322 the
13323 h1x
13324 table
13325 location
13326 if
13327 there
13328 is
13329 equality
13330 in
13331 bucket
13332 size
13333 2
13334 choice
13335 hashing
13336 employs
13337 the
13338 principle
13339 of
13340 the
13341 power
13342 of
13343 two
13344 choices19
13345 Dynamic
13346 resizing
13347 The
13348 good
13349 functioning
13350 of
13351 a
13352 hash
13353 table
13354 depends
13355 on
13356 the
13357 fact
13358 that
13359 the
13360 table
13361 size
13362 is
13363 proportional
13364 to
13365 the
13366 number
13367 of
13368 entries
13369 With
13370 a
13371 fixed
13372 size
13373 and
13374 the
13375 common
13376 structures
13377 it
13378 is
13379 similar
13380 to
13381 linear
13382 search
13383 except
13384 with
13385 a
13386 better
13387 constant
13388 factor
13389 In
13390 some
13391 cases
13392 the
13393 number
13394 of
13395 entries
13396 may
13397 be
13398 definitely
13399 known
13400 in
13401 advance
13402 for
13403 example
13404 keywords
13405 in
13406 a
13407 language
13408 More
13409 commonly
13410 this
13411 is
13412 not
13413 known
13414 for
13415 sure
13416 if
13417 only
13418 due
13419 to
13420 later
13421 changes
13422 in
13423 code
13424 and
13425 data
13426 It
13427 is
13428 one
13429 serious
13430 although
13431 common
13432 mistake
13433 to
13434 not
13435 provide
13436 any
13437 way
13438 for
13439 the
13440 table
13441 to
13442 resize
13443 A
13444 general
13445 purpose
13446 hash
13447 table
13448 class
13449 will
13450 almost
13451 always
13452 have
13453 some
13454 way
13455 to
13456 resize
13457 and
13458 it
13459 is
13460 good
13461 practice
13462 even
13463 for
13464 simple
13465 custom
13466 tables
13467 An
13468 implementation
13469 should
13470 check
13471 the
13472 load
13473 factor
13474 and
13475 do
13476 something
13477 if
13478 it
13479 becomes
13480 too
13481 large
13482 this
13483 needs
13484 to
13485 be
13486 done
13487 only
13488 on
13489 inserts
13490 since
13491 that
13492 is
13493 the
13494 only
13495 thing
13496 that
13497 would
13498 increase
13499 it
13500 To
13501 keep
13502 the
13503 load
13504 factor
13505 under
13506 a
13507 certain
13508 limit
13509 eg
13510 under
13511 3
13512 4
13513 many
13514 table
13515 implementations
13516 expand
13517 the
13518 table
13519 when
13520 items
13521 are
13522 inserted
13523 For
13524 example
13525 in
13526 Javas
13527 HashMap
13528 class
13529 the
13530 default
13531 load
13532 factor
13533 threshold
13534 for
13535 table
13536 expansion
13537 is
13538 075
13539 and
13540 in
13541 Pythons
13542 dict
13543 table
13544 size
13545 is
13546 resized
13547 when
13548 load
13549 factor
13550 is
13551 greater
13552 than
13553 2
13554 3
13555 Since
13556 buckets
13557 are
13558 usually
13559 implemented
13560 on
13561 top
13562 of
13563 a
13564 dynamic
13565 array
13566 and
13567 any
13568 constant
13569 proportion
13570 for
13571 resizing
13572 greater
13573 than
13574 1
13575 will
13576 keep
13577 the
13578 load
13579 factor
13580 under
13581 the
13582 desired
13583 limit
13584 the
13585 exact
13586 choice
13587 of
13588 the
13589 constant
13590 is
13591 determined
13592 by
13593 the
13594 same
13595 space
13596 time
13597 tradeoff
13598 as
13599 for
13600 dynamic
13601 arrays
13602 Resizing
13603 is
13604 accompanied
13605 by
13606 a
13607 full
13608 or
13609 incremental
13610 table
13611 rehash
13612 whereby
13613 existing
13614 items
13615 are
13616 mapped
13617 to
13618 new
13619 bucket
13620 locations
13621 To
13622 limit
13623 the
13624 proportion
13625 of
13626 memory
13627 wasted
13628 due
13629 to
13630 empty
13631 buckets
13632 some
13633 implementations
13634 also
13635 shrink
13636 the
13637 size
13638 of
13639 the
13640 table
13641 followed
13642 by
13643 a
13644 rehash
13645 when
13646 items
13647 are
13648 deleted
13649 From
13650 the
13651 point
13652 of
13653 space
13654 time
13655 tradeoffs
13656 this
13657 operation
13658 is
13659 similar
13660 to
13661 the
13662 deallocation
13663 in
13664 dynamic
13665 arrays
13666 Resizing
13667 by
13668 copying
13669 all
13670 entries
13671 A
13672 common
13673 approach
13674 is
13675 to
13676 automatically
13677 trigger
13678 a
13679 complete
13680 resizing
13681 when
13682 the
13683 load
13684 factor
13685 exceeds
13686 some
13687 threshold
13688 rmax
13689 Then
13690 a
13691 new
13692 larger
13693 table
13694 is
13695 allocated
13696 all
13697 the
13698 entries
13699 of
13700 the
13701 old
13702 table
13703 are
13704 removed
13705 and
13706 inserted
13707 into
13708 this
13709 new
13710 table
13711 and
13712 the
13713 old
13714 table
13715 is
13716 returned
13717 to
13718 the
13719 free
13720 storage
13721 pool
13722 Symmetrically
13723 when
13724 the
13725 load
13726 factor
13727 falls
13728 below
13729 a
13730 second
13731 threshold
13732 rmin
13733 all
13734 entries
13735 are
13736 moved
13737 to
13738 a
13739 new
13740 smaller
13741 table
13742 If
13743 the
13744 table
13745 size
13746 increases
13747 or
13748 decreases
13749 by
13750 a
13751 fixed
13752 percentage
13753 at
13754 each
13755 expansion
13756 the
13757 total
13758 cost
13759 of
13760 these
13761 resizings
13762 amortized
13763 over
13764 all
13765 insert
13766 and
13767 delete
13768 operations
13769 is
13770 still
13771 a
13772 constant
13773 independent
13774 of
13775 the
13776 number
13777 of
13778 entries
13779 n
13780 and
13781 of
13782 the
13783 number
13784 m
13785 of
13786 operations
13787 performed
13788 For
13789 example
13790 consider
13791 a
13792 table
13793 that
13794 was
13795 created
13796 with
13797 the
13798 minimum
13799 possible
13800 size
13801 and
13802 is
13803 doubled
13804 each
13805 time
13806 the
13807 load
13808 ratio
13809 exceeds
13810 some
13811 threshold
13812 If
13813 m
13814 elements
13815 are
13816 inserted
13817 into
13818 that
13819 table
13820 the
13821 total
13822 number
13823 of
13824 extra
13825 re
13826 insertions
13827 that
13828 occur
13829 in
13830 all
13831 dynamic
13832 resizings
13833 of
13834 the
13835 table
13836 is
13837 at
13838 most
13839 m
13840 1
13841 In
13842 other
13843 words
13844 dynamic
13845 resizing
13846 roughly
13847 doubles
13848 the
13849 cost
13850 of
13851 each
13852 insert
13853 or
13854 delete
13855 operation
13856 Incremental
13857 resizing
13858 Some
13859 hash
13860 table
13861 implementations
13862 notably
13863 in
13864 real
13865 time
13866 systems
13867 cannot
13868 pay
13869 the
13870 price
13871 of
13872 enlarging
13873 the
13874 hash
13875 table
13876 all
13877 at
13878 once
13879 because
13880 it
13881 may
13882 interrupt
13883 time
13884 critical
13885 operations
13886 If
13887 one
13888 cannot
13889 avoid
13890 dynamic
13891 resizing
13892 a
13893 solution
13894 is
13895 to
13896 perform
13897 the
13898 resizing
13899 gradually
13900 During
13901 the
13902 resize
13903 allocate
13904 the
13905 new
13906 hash
13907 table
13908 but
13909 keep
13910 the
13911 old
13912 table
13913 unchanged
13914 In
13915 each
13916 lookup
13917 or
13918 delete
13919 operation
13920 check
13921 both
13922 tables
13923 Perform
13924 insertion
13925 operations
13926 only
13927 in
13928 the
13929 new
13930 table
13931 At
13932 each
13933 insertion
13934 also
13935 move
13936 r
13937 elements
13938 from
13939 the
13940 old
13941 table
13942 to
13943 the
13944 new
13945 table
13946 When
13947 all
13948 elements
13949 are
13950 removed
13951 from
13952 the
13953 old
13954 table
13955 deallocate
13956 it
13957 To
13958 ensure
13959 that
13960 the
13961 old
13962 table
13963 is
13964 completely
13965 copied
13966 over
13967 before
13968 the
13969 new
13970 table
13971 itself
13972 needs
13973 to
13974 be
13975 enlarged
13976 it
13977 is
13978 necessary
13979 to
13980 increase
13981 the
13982 size
13983 of
13984 the
13985 table
13986 by
13987 a
13988 factor
13989 of
13990 at
13991 least
13992 r
13993 1
13994 r
13995 during
13996 resizing
13997 Monotonic
13998 keys
13999 If
14000 it
14001 is
14002 known
14003 that
14004 key
14005 values
14006 will
14007 always
14008 increase
14009 or
14010 decrease
14011 monotonically
14012 then
14013 a
14014 variation
14015 of
14016 consistent
14017 hashing
14018 can
14019 be
14020 achieved
14021 by
14022 keeping
14023 a
14024 list
14025 of
14026 the
14027 single
14028 most
14029 recent
14030 key
14031 value
14032 at
14033 each
14034 hash
14035 table
14036 resize
14037 operation
14038 Upon
14039 lookup
14040 keys
14041 that
14042 fall
14043 in
14044 the
14045 ranges
14046 defined
14047 by
14048 these
14049 list
14050 entries
14051 are
14052 directed
14053 to
14054 the
14055 appropriate
14056 hash
14057 function
14058 and
14059 indeed
14060 hash
14061 table
14062 both
14063 of
14064 which
14065 can
14066 be
14067 different
14068 for
14069 each
14070 range
14071 Since
14072 it
14073 is
14074 common
14075 to
14076 grow
14077 the
14078 overall
14079 number
14080 of
14081 entries
14082 by
14083 doubling
14084 there
14085 will
14086 only
14087 be
14088 OlgN
14089 ranges
14090 to
14091 check
14092 and
14093 binary
14094 search
14095 time
14096 for
14097 the
14098 redirection
14099 would
14100 be
14101 OlglgN
14102 As
14103 with
14104 consistent
14105 hashing
14106 this
14107 approach
14108 guarantees
14109 that
14110 any
14111 keys
14112 hash
14113 once
14114 issued
14115 will
14116 never
14117 change
14118 even
14119 when
14120 the
14121 hash
14122 table
14123 is
14124 later
14125 grown
14126 Other
14127 solutions
14128 Linear
14129 hashing20
14130 is
14131 a
14132 hash
14133 table
14134 algorithm
14135 that
14136 permits
14137 incremental
14138 hash
14139 table
14140 expansion
14141 It
14142 is
14143 implemented
14144 using
14145 a
14146 single
14147 hash
14148 table
14149 but
14150 with
14151 two
14152 possible
14153 look
14154 up
14155 functions
14156 Another
14157 way
14158 to
14159 decrease
14160 the
14161 cost
14162 of
14163 table
14164 resizing
14165 is
14166 to
14167 choose
14168 a
14169 hash
14170 function
14171 in
14172 such
14173 a
14174 way
14175 that
14176 the
14177 hashes
14178 of
14179 most
14180 values
14181 do
14182 not
14183 change
14184 when
14185 the
14186 table
14187 is
14188 resized
14189 This
14190 approach
14191 called
14192 consistent
14193 hashing
14194 is
14195 prevalent
14196 in
14197 disk
14198 based
14199 and
14200 distributed
14201 hashes
14202 where
14203 rehashing
14204 is
14205 prohibitively
14206 costly
14207 Performance
14208 analysis
14209 In
14210 the
14211 simplest
14212 model
14213 the
14214 hash
14215 function
14216 is
14217 completely
14218 unspecified
14219 and
14220 the
14221 table
14222 does
14223 not
14224 resize
14225 For
14226 the
14227 best
14228 possible
14229 choice
14230 of
14231 hash
14232 function
14233 a
14234 table
14235 of
14236 size
14237 k
14238 with
14239 open
14240 addressing
14241 has
14242 no
14243 collisions
14244 and
14245 holds
14246 up
14247 to
14248 k
14249 elements
14250 with
14251 a
14252 single
14253 comparison
14254 for
14255 successful
14256 lookup
14257 and
14258 a
14259 table
14260 of
14261 size
14262 k
14263 with
14264 chaining
14265 and
14266 n
14267 keys
14268 has
14269 the
14270 minimum
14271 max0
14272 n
14273 k
14274 collisions
14275 and
14276 O1
14277 n
14278 k
14279 comparisons
14280 for
14281 lookup
14282 For
14283 the
14284 worst
14285 choice
14286 of
14287 hash
14288 function
14289 every
14290 insertion
14291 causes
14292 a
14293 collision
14294 and
14295 hash
14296 tables
14297 degenerate
14298 to
14299 linear
14300 search
14301 with
14302 Ωn
14303 amortized
14304 comparisons
14305 per
14306 insertion
14307 and
14308 up
14309 to
14310 n
14311 comparisons
14312 for
14313 a
14314 successful
14315 lookup
14316 Adding
14317 rehashing
14318 to
14319 this
14320 model
14321 is
14322 straightforward
14323 As
14324 in
14325 a
14326 dynamic
14327 array
14328 geometric
14329 resizing
14330 by
14331 a
14332 factor
14333 of
14334 b
14335 implies
14336 that
14337 only
14338 n
14339 bi
14340 keys
14341 are
14342 inserted
14343 i
14344 or
14345 more
14346 times
14347 so
14348 that
14349 the
14350 total
14351 number
14352 of
14353 insertions
14354 is
14355 bounded
14356 above
14357 by
14358 bn
14359 b
14360 1
14361 which
14362 is
14363 On
14364 By
14365 using
14366 rehashing
14367 to
14368 maintain
14369 n
14370 k
14371 tables
14372 using
14373 both
14374 chaining
14375 and
14376 open
14377 addressing
14378 can
14379 have
14380 unlimited
14381 elements
14382 and
14383 perform
14384 successful
14385 lookup
14386 in
14387 a
14388 single
14389 comparison
14390 for
14391 the
14392 best
14393 choice
14394 of
14395 hash
14396 function
14397 In
14398 more
14399 realistic
14400 models
14401 the
14402 hash
14403 function
14404 is
14405 a
14406 random
14407 variable
14408 over
14409 a
14410 probability
14411 distribution
14412 of
14413 hash
14414 functions
14415 and
14416 performance
14417 is
14418 computed
14419 on
14420 average
14421 over
14422 the
14423 choice
14424 of
14425 hash
14426 function
14427 When
14428 this
14429 distribution
14430 is
14431 uniform
14432 the
14433 assumption
14434 is
14435 called
14436 simple
14437 uniform
14438 hashing
14439 and
14440 it
14441 can
14442 be
14443 shown
14444 that
14445 hashing
14446 with
14447 chaining
14448 requires
14449 Θ1
14450 n
14451 k
14452 comparisons
14453 on
14454 average
14455 for
14456 an
14457 unsuccessful
14458 lookup
14459 and
14460 hashing
14461 with
14462 open
14463 addressing
14464 requires
14465 Θ1
14466 1
14467 n
14468 k21
14469 Both
14470 these
14471 bounds
14472 are
14473 constant
14474 if
14475 we
14476 maintain
14477 n
14478 k
14479 c
14480 using
14481 table
14482 resizing
14483 where
14484 c
14485 is
14486 a
14487 fixed
14488 constant
14489 less
14490 than
14491 1
14492 Features
14493 Advantages
14494 The
14495 main
14496 advantage
14497 of
14498 hash
14499 tables
14500 over
14501 other
14502 table
14503 data
14504 structures
14505 is
14506 speed
14507 This
14508 advantage
14509 is
14510 more
14511 apparent
14512 when
14513 the
14514 number
14515 of
14516 entries
14517 is
14518 large
14519 Hash
14520 tables
14521 are
14522 particularly
14523 efficient
14524 when
14525 the
14526 maximum
14527 number
14528 of
14529 entries
14530 can
14531 be
14532 predicted
14533 in
14534 advance
14535 so
14536 that
14537 the
14538 bucket
14539 array
14540 can
14541 be
14542 allocated
14543 once
14544 with
14545 the
14546 optimum
14547 size
14548 and
14549 never
14550 resized
14551 If
14552 the
14553 set
14554 of
14555 key
14556 value
14557 pairs
14558 is
14559 fixed
14560 and
14561 known
14562 ahead
14563 of
14564 time
14565 so
14566 insertions
14567 and
14568 deletions
14569 are
14570 not
14571 allowed
14572 one
14573 may
14574 reduce
14575 the
14576 average
14577 lookup
14578 cost
14579 by
14580 a
14581 careful
14582 choice
14583 of
14584 the
14585 hash
14586 function
14587 bucket
14588 table
14589 size
14590 and
14591 internal
14592 data
14593 structures
14594 In
14595 particular
14596 one
14597 may
14598 be
14599 able
14600 to
14601 devise
14602 a
14603 hash
14604 function
14605 that
14606 is
14607 collision
14608 free
14609 or
14610 even
14611 perfect
14612 see
14613 below
14614 In
14615 this
14616 case
14617 the
14618 keys
14619 need
14620 not
14621 be
14622 stored
14623 in
14624 the
14625 table
14626 Drawbacks
14627 Although
14628 operations
14629 on
14630 a
14631 hash
14632 table
14633 take
14634 constant
14635 time
14636 on
14637 average
14638 the
14639 cost
14640 of
14641 a
14642 good
14643 hash
14644 function
14645 can
14646 be
14647 significantly
14648 higher
14649 than
14650 the
14651 inner
14652 loop
14653 of
14654 the
14655 lookup
14656 algorithm
14657 for
14658 a
14659 sequential
14660 list
14661 or
14662 search
14663 tree
14664 Thus
14665 hash
14666 tables
14667 are
14668 not
14669 effective
14670 when
14671 the
14672 number
14673 of
14674 entries
14675 is
14676 very
14677 small
14678 However
14679 in
14680 some
14681 cases
14682 the
14683 high
14684 cost
14685 of
14686 computing
14687 the
14688 hash
14689 function
14690 can
14691 be
14692 mitigated
14693 by
14694 saving
14695 the
14696 hash
14697 value
14698 together
14699 with
14700 the
14701 key
14702 For
14703 certain
14704 string
14705 processing
14706 applications
14707 such
14708 as
14709 spell
14710 checking
14711 hash
14712 tables
14713 may
14714 be
14715 less
14716 efficient
14717 than
14718 tries
14719 finite
14720 automata
14721 or
14722 Judy
14723 arrays
14724 Also
14725 if
14726 each
14727 key
14728 is
14729 represented
14730 by
14731 a
14732 small
14733 enough
14734 number
14735 of
14736 bits
14737 then
14738 instead
14739 of
14740 a
14741 hash
14742 table
14743 one
14744 may
14745 use
14746 the
14747 key
14748 directly
14749 as
14750 the
14751 index
14752 into
14753 an
14754 array
14755 of
14756 values
14757 Note
14758 that
14759 there
14760 are
14761 no
14762 collisions
14763 in
14764 this
14765 case
14766 The
14767 entries
14768 stored
14769 in
14770 a
14771 hash
14772 table
14773 can
14774 be
14775 enumerated
14776 efficiently
14777 at
14778 constant
14779 cost
14780 per
14781 entry
14782 but
14783 only
14784 in
14785 some
14786 pseudo
14787 random
14788 order
14789 Therefore
14790 there
14791 is
14792 no
14793 efficient
14794 way
14795 to
14796 locate
14797 an
14798 entry
14799 whose
14800 key
14801 is
14802 nearest
14803 to
14804 a
14805 given
14806 key
14807 Listing
14808 all
14809 n
14810 entries
14811 in
14812 some
14813 specific
14814 order
14815 generally
14816 requires
14817 a
14818 separate
14819 sorting
14820 step
14821 whose
14822 cost
14823 is
14824 proportional
14825 to
14826 logn
14827 per
14828 entry
14829 In
14830 comparison
14831 ordered
14832 search
14833 trees
14834 have
14835 lookup
14836 and
14837 insertion
14838 cost
14839 proportional
14840 to
14841 logn
14842 but
14843 allow
14844 finding
14845 the
14846 nearest
14847 key
14848 at
14849 about
14850 the
14851 same
14852 cost
14853 and
14854 ordered
14855 enumeration
14856 of
14857 all
14858 entries
14859 at
14860 constant
14861 cost
14862 per
14863 entry
14864 If
14865 the
14866 keys
14867 are
14868 not
14869 stored
14870 because
14871 the
14872 hash
14873 function
14874 is
14875 collision
14876 free
14877 there
14878 may
14879 be
14880 no
14881 easy
14882 way
14883 to
14884 enumerate
14885 the
14886 keys
14887 that
14888 are
14889 present
14890 in
14891 the
14892 table
14893 at
14894 any
14895 given
14896 moment
14897 Although
14898 the
14899 average
14900 cost
14901 per
14902 operation
14903 is
14904 constant
14905 and
14906 fairly
14907 small
14908 the
14909 cost
14910 of
14911 a
14912 single
14913 operation
14914 may
14915 be
14916 quite
14917 high
14918 In
14919 particular
14920 if
14921 the
14922 hash
14923 table
14924 uses
14925 dynamic
14926 resizing
14927 an
14928 insertion
14929 or
14930 deletion
14931 operation
14932 may
14933 occasionally
14934 take
14935 time
14936 proportional
14937 to
14938 the
14939 number
14940 of
14941 entries
14942 This
14943 may
14944 be
14945 a
14946 serious
14947 drawback
14948 in
14949 real
14950 time
14951 or
14952 interactive
14953 applications
14954 Hash
14955 tables
14956 in
14957 general
14958 exhibit
14959 poor
14960 locality
14961 of
14962 reference
14963 that
14964 is
14965 the
14966 data
14967 to
14968 be
14969 accessed
14970 is
14971 distributed
14972 seemingly
14973 at
14974 random
14975 in
14976 memory
14977 Because
14978 hash
14979 tables
14980 cause
14981 access
14982 patterns
14983 that
14984 jump
14985 around
14986 this
14987 can
14988 trigger
14989 microprocessor
14990 cache
14991 misses
14992 that
14993 cause
14994 long
14995 delays
14996 Compact
14997 data
14998 structures
14999 such
15000 as
15001 arrays
15002 searched
15003 with
15004 linear
15005 search
15006 may
15007 be
15008 faster
15009 if
15010 the
15011 table
15012 is
15013 relatively
15014 small
15015 and
15016 keys
15017 are
15018 compact
15019 The
15020 optimal
15021 performance
15022 point
15023 varies
15024 from
15025 system
15026 to
15027 system
15028 Hash
15029 tables
15030 become
15031 quite
15032 inefficient
15033 when
15034 there
15035 are
15036 many
15037 collisions
15038 While
15039 extremely
15040 uneven
15041 hash
15042 distributions
15043 are
15044 extremely
15045 unlikely
15046 to
15047 arise
15048 by
15049 chance
15050 a
15051 malicious
15052 adversary
15053 with
15054 knowledge
15055 of
15056 the
15057 hash
15058 function
15059 may
15060 be
15061 able
15062 to
15063 supply
15064 information
15065 to
15066 a
15067 hash
15068 that
15069 creates
15070 worst
15071 case
15072 behavior
15073 by
15074 causing
15075 excessive
15076 collisions
15077 resulting
15078 in
15079 very
15080 poor
15081 performance
15082 eg
15083 a
15084 denial
15085 of
15086 service
15087 attack22
15088 In
15089 critical
15090 applications
15091 universal
15092 hashing
15093 can
15094 be
15095 used
15096 a
15097 data
15098 structure
15099 with
15100 better
15101 worst
15102 case
15103 guarantees
15104 may
15105 be
15106 preferable23
15107 Uses
15108 Question
15109 book
15110 newsvg
15111 This
15112 section
15113 does
15114 not
15115 cite
15116 any
15117 references
15118 or
15119 sources
15120 Please
15121 help
15122 improve
15123 this
15124 section
15125 by
15126 adding
15127 citations
15128 to
15129 reliable
15130 sources
15131 Unsourced
15132 material
15133 may
15134 be
15135 challenged
15136 and
15137 removed
15138 July
15139 2013
15140 Associative
15141 arrays
15142 Hash
15143 tables
15144 are
15145 commonly
15146 used
15147 to
15148 implement
15149 many
15150 types
15151 of
15152 in
15153 memory
15154 tables
15155 They
15156 are
15157 used
15158 to
15159 implement
15160 associative
15161 arrays
15162 arrays
15163 whose
15164 indices
15165 are
15166 arbitrary
15167 strings
15168 or
15169 other
15170 complicated
15171 objects
15172 especially
15173 in
15174 interpreted
15175 programming
15176 languages
15177 like
15178 Ruby
15179 Python
15180 and
15181 PHP
15182 When
15183 storing
15184 a
15185 new
15186 item
15187 into
15188 a
15189 multimap
15190 and
15191 a
15192 hash
15193 collision
15194 occurs
15195 the
15196 multimap
15197 unconditionally
15198 stores
15199 both
15200 items
15201 When
15202 storing
15203 a
15204 new
15205 item
15206 into
15207 a
15208 typical
15209 associative
15210 array
15211 and
15212 a
15213 hash
15214 collision
15215 occurs
15216 but
15217 the
15218 actual
15219 keys
15220 themselves
15221 are
15222 different
15223 the
15224 associative
15225 array
15226 likewise
15227 stores
15228 both
15229 items
15230 However
15231 if
15232 the
15233 key
15234 of
15235 the
15236 new
15237 item
15238 exactly
15239 matches
15240 the
15241 key
15242 of
15243 an
15244 old
15245 item
15246 the
15247 associative
15248 array
15249 typically
15250 erases
15251 the
15252 old
15253 item
15254 and
15255 overwrites
15256 it
15257 with
15258 the
15259 new
15260 item
15261 so
15262 every
15263 item
15264 in
15265 the
15266 table
15267 has
15268 a
15269 unique
15270 key
15271 Database
15272 indexing
15273 Hash
15274 tables
15275 may
15276 also
15277 be
15278 used
15279 as
15280 disk
15281 based
15282 data
15283 structures
15284 and
15285 database
15286 indices
15287 such
15288 as
15289 in
15290 dbm
15291 although
15292 B
15293 trees
15294 are
15295 more
15296 popular
15297 in
15298 these
15299 applications
15300 Caches
15301 Hash
15302 tables
15303 can
15304 be
15305 used
15306 to
15307 implement
15308 caches
15309 auxiliary
15310 data
15311 tables
15312 that
15313 are
15314 used
15315 to
15316 speed
15317 up
15318 the
15319 access
15320 to
15321 data
15322 that
15323 is
15324 primarily
15325 stored
15326 in
15327 slower
15328 media
15329 In
15330 this
15331 application
15332 hash
15333 collisions
15334 can
15335 be
15336 handled
15337 by
15338 discarding
15339 one
15340 of
15341 the
15342 two
15343 colliding
15344 entries
15345 usually
15346 erasing
15347 the
15348 old
15349 item
15350 that
15351 is
15352 currently
15353 stored
15354 in
15355 the
15356 table
15357 and
15358 overwriting
15359 it
15360 with
15361 the
15362 new
15363 item
15364 so
15365 every
15366 item
15367 in
15368 the
15369 table
15370 has
15371 a
15372 unique
15373 hash
15374 value
15375 Sets
15376 Besides
15377 recovering
15378 the
15379 entry
15380 that
15381 has
15382 a
15383 given
15384 key
15385 many
15386 hash
15387 table
15388 implementations
15389 can
15390 also
15391 tell
15392 whether
15393 such
15394 an
15395 entry
15396 exists
15397 or
15398 not
15399 Those
15400 structures
15401 can
15402 therefore
15403 be
15404 used
15405 to
15406 implement
15407 a
15408 set
15409 data
15410 structure
15411 which
15412 merely
15413 records
15414 whether
15415 a
15416 given
15417 key
15418 belongs
15419 to
15420 a
15421 specified
15422 set
15423 of
15424 keys
15425 In
15426 this
15427 case
15428 the
15429 structure
15430 can
15431 be
15432 simplified
15433 by
15434 eliminating
15435 all
15436 parts
15437 that
15438 have
15439 to
15440 do
15441 with
15442 the
15443 entry
15444 values
15445 Hashing
15446 can
15447 be
15448 used
15449 to
15450 implement
15451 both
15452 static
15453 and
15454 dynamic
15455 sets
15456 Object
15457 representation
15458 Several
15459 dynamic
15460 languages
15461 such
15462 as
15463 Perl
15464 Python
15465 JavaScript
15466 and
15467 Ruby
15468 use
15469 hash
15470 tables
15471 to
15472 implement
15473 objects
15474 In
15475 this
15476 representation
15477 the
15478 keys
15479 are
15480 the
15481 names
15482 of
15483 the
15484 members
15485 and
15486 methods
15487 of
15488 the
15489 object
15490 and
15491 the
15492 values
15493 are
15494 pointers
15495 to
15496 the
15497 corresponding
15498 member
15499 or
15500 method
15501 Unique
15502 data
15503 representation
15504 Hash
15505 tables
15506 can
15507 be
15508 used
15509 by
15510 some
15511 programs
15512 to
15513 avoid
15514 creating
15515 multiple
15516 character
15517 strings
15518 with
15519 the
15520 same
15521 contents
15522 For
15523 that
15524 purpose
15525 all
15526 strings
15527 in
15528 use
15529 by
15530 the
15531 program
15532 are
15533 stored
15534 in
15535 a
15536 single
15537 string
15538 pool
15539 implemented
15540 as
15541 a
15542 hash
15543 table
15544 which
15545 is
15546 checked
15547 whenever
15548 a
15549 new
15550 string
15551 has
15552 to
15553 be
15554 created
15555 This
15556 technique
15557 was
15558 introduced
15559 in
15560 Lisp
15561 interpreters
15562 under
15563 the
15564 name
15565 hash
15566 consing
15567 and
15568 can
15569 be
15570 used
15571 with
15572 many
15573 other
15574 kinds
15575 of
15576 data
15577 expression
15578 trees
15579 in
15580 a
15581 symbolic
15582 algebra
15583 system
15584 records
15585 in
15586 a
15587 database
15588 files
15589 in
15590 a
15591 file
15592 system
15593 binary
15594 decision
15595 diagrams
15596 etc
15597 String
15598 interning
15599 Main
15600 article
15601 String
15602 interning
15603 Implementations
15604 In
15605 programming
15606 languages
15607 Many
15608 programming
15609 languages
15610 provide
15611 hash
15612 table
15613 functionality
15614 either
15615 as
15616 built
15617 in
15618 associative
15619 arrays
15620 or
15621 as
15622 standard
15623 library
15624 modules
15625 In
15626 C
15627 11
15628 for
15629 example
15630 the
15631 unordered
15632 map
15633 class
15634 provides
15635 hash
15636 tables
15637 for
15638 keys
15639 and
15640 values
15641 of
15642 arbitrary
15643 type
15644 In
15645 PHP
15646 5
15647 the
15648 Zend
15649 2
15650 engine
15651 uses
15652 one
15653 of
15654 the
15655 hash
15656 functions
15657 from
15658 Daniel
15659 J
15660 Bernstein
15661 to
15662 generate
15663 the
15664 hash
15665 values
15666 used
15667 in
15668 managing
15669 the
15670 mappings
15671 of
15672 data
15673 pointers
15674 stored
15675 in
15676 a
15677 hash
15678 table
15679 In
15680 the
15681 PHP
15682 source
15683 code
15684 it
15685 is
15686 labelled
15687 as
15688 DJBX33A
15689 Daniel
15690 J
15691 Bernstein
15692 Times
15693 33
15694 with
15695 Addition
15696 Pythons
15697 built
15698 in
15699 hash
15700 table
15701 implementation
15702 in
15703 the
15704 form
15705 of
15706 the
15707 dict
15708 type
15709 as
15710 well
15711 as
15712 Perls
15713 hash
15714 type
15715 are
15716 used
15717 internally
15718 to
15719 implement
15720 namespaces
15721 and
15722 therefore
15723 need
15724 to
15725 pay
15726 more
15727 attention
15728 to
15729 security
15730 ie
15731 collision
15732 attacks
15733 In
15734 the
15735 NET
15736 Framework
15737 support
15738 for
15739 hash
15740 tables
15741 is
15742 provided
15743 via
15744 the
15745 non
15746 generic
15747 Hashtable
15748 and
15749 generic
15750 Dictionary
15751 classes
15752 which
15753 store
15754 key
15755 value
15756 pairs
15757 and
15758 the
15759 generic
15760 HashSet
15761 class
15762 which
15763 stores
15764 only
15765 values
15766 Independent
15767 packages
15768 SparseHash
15769 formerly
15770 Google
15771 SparseHash
15772 An
15773 extremely
15774 memory
15775 efficient
15776 hash
15777 map
15778 implementation
15779 with
15780 only
15781 2
15782 bits
15783 entry
15784 of
15785 overhead
15786 The
15787 SparseHash
15788 library
15789 has
15790 several
15791 C
15792 hash
15793 map
15794 implementations
15795 with
15796 different
15797 performance
15798 characteristics
15799 including
15800 one
15801 that
15802 optimizes
15803 for
15804 memory
15805 use
15806 and
15807 another
15808 that
15809 optimizes
15810 for
15811 speed
15812 Sunrise
15813 DD
15814 An
15815 open
15816 source
15817 C
15818 library
15819 for
15820 hash
15821 table
15822 storage
15823 of
15824 arbitrary
15825 data
15826 objects
15827 with
15828 lock
15829 free
15830 lookups
15831 built
15832 in
15833 reference
15834 counting
15835 and
15836 guaranteed
15837 order
15838 iteration
15839 The
15840 library
15841 can
15842 participate
15843 in
15844 external
15845 reference
15846 counting
15847 systems
15848 or
15849 use
15850 its
15851 own
15852 built
15853 in
15854 reference
15855 counting
15856 It
15857 comes
15858 with
15859 a
15860 variety
15861 of
15862 hash
15863 functions
15864 and
15865 allows
15866 the
15867 use
15868 of
15869 runtime
15870 supplied
15871 hash
15872 functions
15873 via
15874 callback
15875 mechanism
15876 Source
15877 code
15878 is
15879 well
15880 documented
15881 uthash
15882 This
15883 is
15884 an
15885 easy
15886 to
15887 use
15888 hash
15889 table
15890 for
15891 C
15892 structures
15893 History
15894 The
15895 idea
15896 of
15897 hashing
15898 arose
15899 independently
15900 in
15901 different
15902 places
15903 In
15904 January
15905 1953
15906 H
15907 P
15908 Luhn
15909 wrote
15910 an
15911 internal
15912 IBM
15913 memorandum
15914 that
15915 used
15916 hashing
15917 with
15918 chaining24
15919 G
15920 N
15921 Amdahl
15922 E
15923 M
15924 Boehme
15925 N
15926 Rochester
15927 and
15928 Arthur
15929 Samuel
15930 implemented
15931 a
15932 program
15933 using
15934 hashing
15935 at
15936 about
15937 the
15938 same
15939 time
15940 Open
15941 addressing
15942 with
15943 linear
15944 probing
15945 relatively
15946 prime
15947 stepping
15948 is
15949 cr
15950 ed
15951 to
15952 Amdahl
15953 but
15954 Ershov
15955 in
15956 Russia
15957 had
15958 the
15959 same
15960 idea24
15961 See
15962 also
15963 Rabin
15964 Karp
15965 string
15966 search
15967 algorithm
15968 Stable
15969 hashing
15970 Consistent
15971 hashing
15972 Extendible
15973 hashing
15974 Lazy
15975 deletion
15976 Pearson
15977 hashing
15978 Related
15979 data
15980 structures
15981 There
15982 are
15983 several
15984 data
15985 structures
15986 that
15987 use
15988 hash
15989 functions
15990 but
15991 cannot
15992 be
15993 considered
15994 special
15995 cases
15996 of
15997 hash
15998 tables
15999 Bloom
16000 filter
16001 memory
16002 efficient
16003 data
16004 structure
16005 designed
16006 for
16007 constant
16008 time
16009 approximate
16010 lookups
16011 uses
16012 hash
16013 functions
16014 and
16015 can
16016 be
16017 seen
16018 as
16019 an
16020 approximate
16021 hash
16022 table
16023 Distributed
16024 hash
16025 table
16026 DHT
16027 a
16028 resilient
16029 dynamic
16030 table
16031 spread
16032 over
16033 several
16034 nodes
16035 of
16036 a
16037 network
16038 Hash
16039 array
16040 mapped
16041 trie
16042 a
16043 trie
16044 structure
16045 similar
16046 to
16047 the
16048 array
16049 mapped
16050 trie
16051 but
16052 where
16053 each
16054 key
16055 is
16056 hashed
16057 first
16058 A
16059 red
16060 black
16061 tree
16062 is
16063 a
16064 data
16065 structure
16066 which
16067 is
16068 a
16069 type
16070 of
16071 self
16072 balancing
16073 binary
16074 search
16075 tree
16076 Balance
16077 is
16078 preserved
16079 by
16080 painting
16081 each
16082 node
16083 of
16084 the
16085 tree
16086 with
16087 one
16088 of
16089 two
16090 colors
16091 typically
16092 called
16093 red
16094 and
16095 black
16096 in
16097 a
16098 way
16099 that
16100 satisfies
16101 certain
16102 properties
16103 which
16104 collectively
16105 constrain
16106 how
16107 unbalanced
16108 the
16109 tree
16110 can
16111 become
16112 in
16113 the
16114 worst
16115 case
16116 When
16117 the
16118 tree
16119 is
16120 modified
16121 the
16122 new
16123 tree
16124 is
16125 subsequently
16126 rearranged
16127 and
16128 repainted
16129 to
16130 restore
16131 the
16132 coloring
16133 properties
16134 The
16135 properties
16136 are
16137 designed
16138 in
16139 such
16140 a
16141 way
16142 that
16143 this
16144 rearranging
16145 and
16146 recoloring
16147 can
16148 be
16149 performed
16150 efficiently
16151 The
16152 balancing
16153 of
16154 the
16155 tree
16156 is
16157 not
16158 perfect
16159 but
16160 it
16161 is
16162 good
16163 enough
16164 to
16165 allow
16166 it
16167 to
16168 guarantee
16169 searching
16170 in
16171 O
16172 log
16173 n
16174 time
16175 where
16176 n
16177 is
16178 the
16179 total
16180 number
16181 of
16182 elements
16183 in
16184 the
16185 tree
16186 The
16187 insertion
16188 and
16189 deletion
16190 operations
16191 along
16192 with
16193 the
16194 tree
16195 rearrangement
16196 and
16197 recoloring
16198 are
16199 also
16200 performed
16201 in
16202 O
16203 log
16204 n
16205 time
16206 1
16207 Tracking
16208 the
16209 color
16210 of
16211 each
16212 node
16213 requires
16214 only
16215 1
16216 bit
16217 of
16218 information
16219 per
16220 node
16221 because
16222 there
16223 are
16224 only
16225 two
16226 colors
16227 The
16228 tree
16229 does
16230 not
16231 contain
16232 any
16233 other
16234 data
16235 specific
16236 to
16237 its
16238 being
16239 a
16240 red
16241 black
16242 tree
16243 so
16244 its
16245 memory
16246 footprint
16247 is
16248 almost
16249 identical
16250 to
16251 a
16252 classic
16253 uncolored
16254 binary
16255 search
16256 tree
16257 In
16258 many
16259 cases
16260 the
16261 additional
16262 bit
16263 of
16264 information
16265 can
16266 be
16267 stored
16268 at
16269 no
16270 additional
16271 memory
16272 cost
16273 The
16274 original
16275 data
16276 structure
16277 was
16278 invented
16279 in
16280 1972
16281 by
16282 Rudolf
16283 Bayer
16284 2
16285 and
16286 named
16287 symmetric
16288 binary
16289 B
16290 tree
16291 but
16292 acquired
16293 its
16294 modern
16295 name
16296 in
16297 a
16298 paper
16299 in
16300 1978
16301 by
16302 Leonidas
16303 J
16304 Guibas
16305 and
16306 Robert
16307 Sedgewick
16308 entitled
16309 A
16310 Dichromatic
16311 Framework
16312 for
16313 Balanced
16314 Trees
16315 3
16316 The
16317 color
16318 red
16319 was
16320 chosen
16321 because
16322 it
16323 was
16324 the
16325 best
16326 looking
16327 color
16328 produced
16329 by
16330 the
16331 color
16332 laser
16333 printer
16334 available
16335 to
16336 the
16337 authors
16338 while
16339 working
16340 at
16341 Xerox
16342 PARC
16343 4
16344 Terminology
16345 A
16346 red
16347 black
16348 tree
16349 is
16350 a
16351 special
16352 type
16353 of
16354 binary
16355 tree
16356 used
16357 in
16358 computer
16359 science
16360 to
16361 organize
16362 pieces
16363 of
16364 comparable
16365 data
16366 such
16367 as
16368 text
16369 fragments
16370 or
16371 numbers
16372 The
16373 leaf
16374 nodes
16375 of
16376 red
16377 black
16378 trees
16379 do
16380 not
16381 contain
16382 data
16383 These
16384 leaves
16385 need
16386 not
16387 be
16388 explicit
16389 in
16390 computer
16391 memory—a
16392 null
16393 child
16394 pointer
16395 can
16396 encode
16397 the
16398 fact
16399 that
16400 this
16401 child
16402 is
16403 a
16404 leaf—but
16405 it
16406 simplifies
16407 some
16408 algorithms
16409 for
16410 operating
16411 on
16412 red
16413 black
16414 trees
16415 if
16416 the
16417 leaves
16418 really
16419 are
16420 explicit
16421 nodes
16422 To
16423 save
16424 memory
16425 sometimes
16426 a
16427 single
16428 sentinel
16429 node
16430 performs
16431 the
16432 role
16433 of
16434 all
16435 leaf
16436 nodes
16437 all
16438 references
16439 from
16440 internal
16441 nodes
16442 to
16443 leaf
16444 nodes
16445 then
16446 point
16447 to
16448 the
16449 sentinel
16450 node
16451 Red
16452 black
16453 trees
16454 like
16455 all
16456 binary
16457 search
16458 trees
16459 allow
16460 efficient
16461 in
16462 order
16463 traversal
16464 that
16465 is
16466 in
16467 the
16468 order
16469 Left
16470 Root
16471 Right
16472 of
16473 their
16474 elements
16475 The
16476 search
16477 time
16478 results
16479 from
16480 the
16481 traversal
16482 from
16483 root
16484 to
16485 leaf
16486 and
16487 therefore
16488 a
16489 balanced
16490 tree
16491 of
16492 n
16493 nodes
16494 having
16495 the
16496 least
16497 possible
16498 tree
16499 height
16500 results
16501 in
16502 O
16503 log
16504 n
16505 search
16506 time
16507 Properties
16508 Diagram
16509 of
16510 binary
16511 tree
16512 The
16513 black
16514 root
16515 node
16516 has
16517 two
16518 red
16519 children
16520 and
16521 four
16522 black
16523 grandchildren
16524 The
16525 child
16526 nodes
16527 of
16528 the
16529 grandchildren
16530 are
16531 black
16532 nil
16533 pointers
16534 or
16535 red
16536 nodes
16537 with
16538 black
16539 nil
16540 pointers
16541 An
16542 example
16543 of
16544 a
16545 red
16546 black
16547 tree
16548 In
16549 addition
16550 to
16551 the
16552 requirements
16553 imposed
16554 on
16555 a
16556 binary
16557 search
16558 tree
16559 the
16560 following
16561 must
16562 be
16563 satisfied
16564 by
16565 a
16566 red
16567 black
16568 tree
16569 5
16570 A
16571 node
16572 is
16573 either
16574 red
16575 or
16576 black
16577 The
16578 root
16579 is
16580 black
16581 This
16582 rule
16583 is
16584 sometimes
16585 omitted
16586 Since
16587 the
16588 root
16589 can
16590 always
16591 be
16592 changed
16593 from
16594 red
16595 to
16596 black
16597 but
16598 not
16599 necessarily
16600 vice
16601 versa
16602 this
16603 rule
16604 has
16605 little
16606 effect
16607 on
16608 analysis
16609 All
16610 leaves
16611 NIL
16612 are
16613 black
16614 All
16615 leaves
16616 are
16617 same
16618 color
16619 as
16620 the
16621 root
16622 Every
16623 red
16624 node
16625 must
16626 have
16627 two
16628 black
16629 child
16630 nodes
16631 Every
16632 path
16633 from
16634 a
16635 given
16636 node
16637 to
16638 any
16639 of
16640 its
16641 descendant
16642 leaves
16643 contains
16644 the
16645 same
16646 number
16647 of
16648 black
16649 nodes
16650 These
16651 constraints
16652 enforce
16653 a
16654 critical
16655 property
16656 of
16657 red
16658 black
16659 trees
16660 that
16661 the
16662 path
16663 from
16664 the
16665 root
16666 to
16667 the
16668 furthest
16669 leaf
16670 is
16671 no
16672 more
16673 than
16674 twice
16675 as
16676 long
16677 as
16678 the
16679 path
16680 from
16681 the
16682 root
16683 to
16684 the
16685 nearest
16686 leaf
16687 The
16688 result
16689 is
16690 that
16691 the
16692 tree
16693 is
16694 roughly
16695 height
16696 balanced
16697 Since
16698 operations
16699 such
16700 as
16701 inserting
16702 deleting
16703 and
16704 finding
16705 values
16706 require
16707 worst
16708 case
16709 time
16710 proportional
16711 to
16712 the
16713 height
16714 of
16715 the
16716 tree
16717 this
16718 theoretical
16719 upper
16720 bound
16721 on
16722 the
16723 height
16724 allows
16725 red
16726 black
16727 trees
16728 to
16729 be
16730 efficient
16731 in
16732 the
16733 worst
16734 case
16735 unlike
16736 ordinary
16737 binary
16738 search
16739 trees
16740 To
16741 see
16742 why
16743 this
16744 is
16745 guaranteed
16746 it
16747 suffices
16748 to
16749 consider
16750 the
16751 effect
16752 of
16753 properties
16754 4
16755 and
16756 5
16757 together
16758 For
16759 a
16760 red
16761 black
16762 tree
16763 T
16764 let
16765 B
16766 be
16767 the
16768 number
16769 of
16770 black
16771 nodes
16772 in
16773 property
16774 5
16775 Let
16776 the
16777 shortest
16778 possible
16779 path
16780 from
16781 the
16782 root
16783 of
16784 T
16785 to
16786 any
16787 leaf
16788 consist
16789 of
16790 B
16791 black
16792 nodes
16793 Longer
16794 possible
16795 paths
16796 may
16797 be
16798 constructed
16799 by
16800 inserting
16801 red
16802 nodes
16803 However
16804 property
16805 4
16806 makes
16807 it
16808 impossible
16809 to
16810 insert
16811 more
16812 than
16813 one
16814 consecutive
16815 red
16816 node
16817 Therefore
16818 the
16819 longest
16820 possible
16821 path
16822 consists
16823 of
16824 2B
16825 nodes
16826 alternating
16827 black
16828 and
16829 red
16830 The
16831 shortest
16832 possible
16833 path
16834 has
16835 all
16836 black
16837 nodes
16838 and
16839 the
16840 longest
16841 possible
16842 path
16843 alternates
16844 between
16845 red
16846 and
16847 black
16848 nodes
16849 Since
16850 all
16851 maximal
16852 paths
16853 have
16854 the
16855 same
16856 number
16857 of
16858 black
16859 nodes
16860 by
16861 property
16862 5
16863 this
16864 shows
16865 that
16866 no
16867 path
16868 is
16869 more
16870 than
16871 twice
16872 as
16873 long
16874 as
16875 any
16876 other
16877 path
16878 Analogy
16879 to
16880 B
16881 trees
16882 of
16883 order
16884 4
16885 The
16886 same
16887 red
16888 black
16889 tree
16890 as
16891 in
16892 the
16893 example
16894 above
16895 seen
16896 as
16897 a
16898 B
16899 tree
16900 A
16901 red
16902 black
16903 tree
16904 is
16905 similar
16906 in
16907 structure
16908 to
16909 a
16910 B
16911 tree
16912 of
16913 order
16914 note
16915 1
16916 4
16917 where
16918 each
16919 node
16920 can
16921 contain
16922 between
16923 1
16924 and
16925 3
16926 values
16927 and
16928 accordingly
16929 between
16930 2
16931 and
16932 4
16933 child
16934 pointers
16935 In
16936 such
16937 a
16938 B
16939 tree
16940 each
16941 node
16942 will
16943 contain
16944 only
16945 one
16946 value
16947 matching
16948 the
16949 value
16950 in
16951 a
16952 black
16953 node
16954 of
16955 the
16956 red
16957 black
16958 tree
16959 with
16960 an
16961 optional
16962 value
16963 before
16964 and
16965 or
16966 after
16967 it
16968 in
16969 the
16970 same
16971 node
16972 both
16973 matching
16974 an
16975 equivalent
16976 red
16977 node
16978 of
16979 the
16980 red
16981 black
16982 tree
16983 One
16984 way
16985 to
16986 see
16987 this
16988 equivalence
16989 is
16990 to
16991 move
16992 up
16993 the
16994 red
16995 nodes
16996 in
16997 a
16998 graphical
16999 representation
17000 of
17001 the
17002 red
17003 black
17004 tree
17005 so
17006 that
17007 they
17008 align
17009 horizontally
17010 with
17011 their
17012 parent
17013 black
17014 node
17015 by
17016 creating
17017 together
17018 a
17019 horizontal
17020 cluster
17021 In
17022 the
17023 B
17024 tree
17025 or
17026 in
17027 the
17028 modified
17029 graphical
17030 representation
17031 of
17032 the
17033 red
17034 black
17035 tree
17036 all
17037 leaf
17038 nodes
17039 are
17040 at
17041 the
17042 same
17043 depth
17044 The
17045 red
17046 black
17047 tree
17048 is
17049 then
17050 structurally
17051 equivalent
17052 to
17053 a
17054 B
17055 tree
17056 of
17057 order
17058 4
17059 with
17060 a
17061 minimum
17062 fill
17063 factor
17064 of
17065 33
17066 of
17067 values
17068 per
17069 cluster
17070 with
17071 a
17072 maximum
17073 capacity
17074 of
17075 3
17076 values
17077 This
17078 B
17079 tree
17080 type
17081 is
17082 still
17083 more
17084 general
17085 than
17086 a
17087 red
17088 black
17089 tree
17090 though
17091 as
17092 it
17093 allows
17094 ambiguity
17095 in
17096 a
17097 red
17098 black
17099 tree
17100 conversion—multiple
17101 red
17102 black
17103 trees
17104 can
17105 be
17106 produced
17107 from
17108 an
17109 equivalent
17110 B
17111 tree
17112 of
17113 order
17114 4
17115 If
17116 a
17117 B
17118 tree
17119 cluster
17120 contains
17121 only
17122 1
17123 value
17124 it
17125 is
17126 the
17127 minimum
17128 black
17129 and
17130 has
17131 two
17132 child
17133 pointers
17134 If
17135 a
17136 cluster
17137 contains
17138 3
17139 values
17140 then
17141 the
17142 central
17143 value
17144 will
17145 be
17146 black
17147 and
17148 each
17149 value
17150 stored
17151 on
17152 its
17153 sides
17154 will
17155 be
17156 red
17157 If
17158 the
17159 cluster
17160 contains
17161 two
17162 values
17163 however
17164 either
17165 one
17166 can
17167 become
17168 the
17169 black
17170 node
17171 in
17172 the
17173 red
17174 black
17175 tree
17176 and
17177 the
17178 other
17179 one
17180 will
17181 be
17182 red
17183 So
17184 the
17185 order
17186 4
17187 B
17188 tree
17189 does
17190 not
17191 maintain
17192 which
17193 of
17194 the
17195 values
17196 contained
17197 in
17198 each
17199 cluster
17200 is
17201 the
17202 root
17203 black
17204 tree
17205 for
17206 the
17207 whole
17208 cluster
17209 and
17210 the
17211 parent
17212 of
17213 the
17214 other
17215 values
17216 in
17217 the
17218 same
17219 cluster
17220 Despite
17221 this
17222 the
17223 operations
17224 on
17225 red
17226 black
17227 trees
17228 are
17229 more
17230 economical
17231 in
17232 time
17233 because
17234 you
17235 don
17236 t
17237 have
17238 to
17239 maintain
17240 the
17241 vector
17242 of
17243 values
17244 It
17245 may
17246 be
17247 costly
17248 if
17249 values
17250 are
17251 stored
17252 directly
17253 in
17254 each
17255 node
17256 rather
17257 than
17258 being
17259 stored
17260 by
17261 reference
17262 B
17263 tree
17264 nodes
17265 however
17266 are
17267 more
17268 economical
17269 in
17270 space
17271 because
17272 you
17273 don
17274 t
17275 need
17276 to
17277 store
17278 the
17279 color
17280 attribute
17281 for
17282 each
17283 node
17284 Instead
17285 you
17286 have
17287 to
17288 know
17289 which
17290 slot
17291 in
17292 the
17293 cluster
17294 vector
17295 is
17296 used
17297 If
17298 values
17299 are
17300 stored
17301 by
17302 reference
17303 e
17304 g
17305 objects
17306 null
17307 references
17308 can
17309 be
17310 used
17311 and
17312 so
17313 the
17314 cluster
17315 can
17316 be
17317 represented
17318 by
17319 a
17320 vector
17321 containing
17322 3
17323 slots
17324 for
17325 value
17326 pointers
17327 plus
17328 4
17329 slots
17330 for
17331 child
17332 references
17333 in
17334 the
17335 tree
17336 In
17337 that
17338 case
17339 the
17340 B
17341 tree
17342 can
17343 be
17344 more
17345 compact
17346 in
17347 memory
17348 improving
17349 data
17350 locality
17351 The
17352 same
17353 analogy
17354 can
17355 be
17356 made
17357 with
17358 B
17359 trees
17360 with
17361 larger
17362 orders
17363 that
17364 can
17365 be
17366 structurally
17367 equivalent
17368 to
17369 a
17370 colored
17371 binary
17372 tree
17373 you
17374 just
17375 need
17376 more
17377 colors
17378 Suppose
17379 that
17380 you
17381 add
17382 blue
17383 then
17384 the
17385 blue
17386 red
17387 black
17388 tree
17389 defined
17390 like
17391 red
17392 black
17393 trees
17394 but
17395 with
17396 the
17397 additional
17398 constraint
17399 that
17400 no
17401 two
17402 successive
17403 nodes
17404 in
17405 the
17406 hierarchy
17407 will
17408 be
17409 blue
17410 and
17411 all
17412 blue
17413 nodes
17414 will
17415 be
17416 children
17417 of
17418 a
17419 red
17420 node
17421 then
17422 it
17423 becomes
17424 equivalent
17425 to
17426 a
17427 B
17428 tree
17429 whose
17430 clusters
17431 will
17432 have
17433 at
17434 most
17435 7
17436 values
17437 in
17438 the
17439 following
17440 colors
17441 blue
17442 red
17443 blue
17444 black
17445 blue
17446 red
17447 blue
17448 For
17449 each
17450 cluster
17451 there
17452 will
17453 be
17454 at
17455 most
17456 1
17457 black
17458 node
17459 2
17460 red
17461 nodes
17462 and
17463 4
17464 blue
17465 nodes
17466 For
17467 moderate
17468 volumes
17469 of
17470 values
17471 insertions
17472 and
17473 deletions
17474 in
17475 a
17476 colored
17477 binary
17478 tree
17479 are
17480 faster
17481 compared
17482 to
17483 B
17484 trees
17485 because
17486 colored
17487 trees
17488 don
17489 t
17490 attempt
17491 to
17492 maximize
17493 the
17494 fill
17495 factor
17496 of
17497 each
17498 horizontal
17499 cluster
17500 of
17501 nodes
17502 only
17503 the
17504 minimum
17505 fill
17506 factor
17507 is
17508 guaranteed
17509 in
17510 colored
17511 binary
17512 trees
17513 limiting
17514 the
17515 number
17516 of
17517 splits
17518 or
17519 junctions
17520 of
17521 clusters
17522 B
17523 trees
17524 will
17525 be
17526 faster
17527 for
17528 performing
17529 rotations
17530 because
17531 rotations
17532 will
17533 frequently
17534 occur
17535 within
17536 the
17537 same
17538 cluster
17539 rather
17540 than
17541 with
17542 multiple
17543 separate
17544 nodes
17545 in
17546 a
17547 colored
17548 binary
17549 tree
17550 However
17551 for
17552 storing
17553 large
17554 volumes
17555 B
17556 trees
17557 will
17558 be
17559 much
17560 faster
17561 as
17562 they
17563 will
17564 be
17565 more
17566 compact
17567 by
17568 grouping
17569 several
17570 children
17571 in
17572 the
17573 same
17574 cluster
17575 where
17576 they
17577 can
17578 be
17579 accessed
17580 locally
17581 All
17582 optimizations
17583 possible
17584 in
17585 B
17586 trees
17587 to
17588 increase
17589 the
17590 average
17591 fill
17592 factors
17593 of
17594 clusters
17595 are
17596 possible
17597 in
17598 the
17599 equivalent
17600 multicolored
17601 binary
17602 tree
17603 Notably
17604 maximizing
17605 the
17606 average
17607 fill
17608 factor
17609 in
17610 a
17611 structurally
17612 equivalent
17613 B
17614 tree
17615 is
17616 the
17617 same
17618 as
17619 reducing
17620 the
17621 total
17622 height
17623 of
17624 the
17625 multicolored
17626 tree
17627 by
17628 increasing
17629 the
17630 number
17631 of
17632 non
17633 black
17634 nodes
17635 The
17636 worst
17637 case
17638 occurs
17639 when
17640 all
17641 nodes
17642 in
17643 a
17644 colored
17645 binary
17646 tree
17647 are
17648 black
17649 the
17650 best
17651 case
17652 occurs
17653 when
17654 only
17655 a
17656 third
17657 of
17658 them
17659 are
17660 black
17661 and
17662 the
17663 other
17664 two
17665 thirds
17666 are
17667 red
17668 nodes
17669 Notes
17670 Jump
17671 up
17672 Using
17673 Knuth
17674 s
17675 definition
17676 of
17677 order
17678 the
17679 maximum
17680 number
17681 of
17682 children
17683 Applications
17684 and
17685 related
17686 data
17687 structures
17688 Red
17689 black
17690 trees
17691 offer
17692 worst
17693 case
17694 guarantees
17695 for
17696 insertion
17697 time
17698 deletion
17699 time
17700 and
17701 search
17702 time
17703 Not
17704 only
17705 does
17706 this
17707 make
17708 them
17709 valuable
17710 in
17711 time
17712 sensitive
17713 applications
17714 such
17715 as
17716 real
17717 time
17718 applications
17719 but
17720 it
17721 makes
17722 them
17723 valuable
17724 building
17725 blocks
17726 in
17727 other
17728 data
17729 structures
17730 which
17731 provide
17732 worst
17733 case
17734 guarantees
17735 for
17736 example
17737 many
17738 data
17739 structures
17740 used
17741 in
17742 computational
17743 geometry
17744 can
17745 be
17746 based
17747 on
17748 red
17749 black
17750 trees
17751 and
17752 the
17753 Completely
17754 Fair
17755 Scheduler
17756 used
17757 in
17758 current
17759 Linux
17760 kernels
17761 uses
17762 red
17763 black
17764 trees
17765 The
17766 AVL
17767 tree
17768 is
17769 another
17770 structure
17771 supporting
17772 O
17773 log
17774 n
17775 search
17776 insertion
17777 and
17778 removal
17779 It
17780 is
17781 more
17782 rigidly
17783 balanced
17784 than
17785 red
17786 black
17787 trees
17788 leading
17789 to
17790 slower
17791 insertion
17792 and
17793 removal
17794 but
17795 faster
17796 retrieval
17797 This
17798 makes
17799 it
17800 attractive
17801 for
17802 data
17803 structures
17804 that
17805 may
17806 be
17807 built
17808 once
17809 and
17810 loaded
17811 without
17812 reconstruction
17813 such
17814 as
17815 language
17816 dictionaries
17817 or
17818 program
17819 dictionaries
17820 such
17821 as
17822 the
17823 opcodes
17824 of
17825 an
17826 assembler
17827 or
17828 interpreter
17829 Red
17830 black
17831 trees
17832 are
17833 also
17834 particularly
17835 valuable
17836 in
17837 functional
17838 programming
17839 where
17840 they
17841 are
17842 one
17843 of
17844 the
17845 most
17846 common
17847 persistent
17848 data
17849 structures
17850 used
17851 to
17852 construct
17853 associative
17854 arrays
17855 and
17856 sets
17857 which
17858 can
17859 retain
17860 previous
17861 versions
17862 after
17863 mutations
17864 The
17865 persistent
17866 version
17867 of
17868 red
17869 black
17870 trees
17871 requires
17872 O
17873 log
17874 n
17875 space
17876 for
17877 each
17878 insertion
17879 or
17880 deletion
17881 in
17882 addition
17883 to
17884 time
17885 For
17886 every
17887 2
17888 4
17889 tree
17890 there
17891 are
17892 corresponding
17893 red
17894 black
17895 trees
17896 with
17897 data
17898 elements
17899 in
17900 the
17901 same
17902 order
17903 The
17904 insertion
17905 and
17906 deletion
17907 operations
17908 on
17909 2
17910 4
17911 trees
17912 are
17913 also
17914 equivalent
17915 to
17916 color
17917 flipping
17918 and
17919 rotations
17920 in
17921 red
17922 black
17923 trees
17924 This
17925 makes
17926 2
17927 4
17928 trees
17929 an
17930 important
17931 tool
17932 for
17933 understanding
17934 the
17935 logic
17936 behind
17937 red
17938 black
17939 trees
17940 and
17941 this
17942 is
17943 why
17944 many
17945 introductory
17946 algorithm
17947 texts
17948 introduce
17949 2
17950 4
17951 trees
17952 just
17953 before
17954 red
17955 black
17956 trees
17957 even
17958 though
17959 2
17960 4
17961 trees
17962 are
17963 not
17964 often
17965 used
17966 in
17967 practice
17968 In
17969 2008
17970 Sedgewick
17971 introduced
17972 a
17973 simpler
17974 version
17975 of
17976 the
17977 red
17978 black
17979 tree
17980 called
17981 the
17982 left
17983 leaning
17984 red
17985 black
17986 tree
17987 6
17988 by
17989 eliminating
17990 a
17991 previously
17992 unspecified
17993 degree
17994 of
17995 freedom
17996 in
17997 the
17998 implementation
17999 The
18000 LLRB
18001 maintains
18002 an
18003 additional
18004 invariant
18005 that
18006 all
18007 red
18008 links
18009 must
18010 lean
18011 left
18012 except
18013 during
18014 inserts
18015 and
18016 deletes
18017 Red
18018 black
18019 trees
18020 can
18021 be
18022 made
18023 isometric
18024 to
18025 either
18026 2
18027 3
18028 trees
18029 7
18030 or
18031 2
18032 4
18033 trees
18034 6
18035 for
18036 any
18037 sequence
18038 of
18039 operations
18040 The
18041 2
18042 4
18043 tree
18044 isometry
18045 was
18046 described
18047 in
18048 1978
18049 by
18050 Sedgewick
18051 this
18052 quote
18053 needs
18054 a
18055 citation
18056 With
18057 2
18058 4
18059 trees
18060 the
18061 isometry
18062 is
18063 resolved
18064 by
18065 a
18066 color
18067 flip
18068 corresponding
18069 to
18070 a
18071 split
18072 in
18073 which
18074 the
18075 red
18076 color
18077 of
18078 two
18079 children
18080 nodes
18081 leaves
18082 the
18083 children
18084 and
18085 moves
18086 to
18087 the
18088 parent
18089 node
18090 The
18091 tango
18092 tree
18093 a
18094 type
18095 of
18096 tree
18097 optimized
18098 for
18099 fast
18100 searches
18101 usually
18102 when
18103 uses
18104 red
18105 black
18106 trees
18107 as
18108 part
18109 of
18110 its
18111 data
18112 structure
18113 Operations
18114 Read
18115 only
18116 operations
18117 on
18118 a
18119 red
18120 black
18121 tree
18122 require
18123 no
18124 modification
18125 from
18126 those
18127 used
18128 for
18129 binary
18130 search
18131 trees
18132 because
18133 every
18134 red
18135 black
18136 tree
18137 is
18138 a
18139 special
18140 case
18141 of
18142 a
18143 simple
18144 binary
18145 search
18146 tree
18147 However
18148 the
18149 immediate
18150 result
18151 of
18152 an
18153 insertion
18154 or
18155 removal
18156 may
18157 violate
18158 the
18159 properties
18160 of
18161 a
18162 red
18163 black
18164 tree
18165 Restoring
18166 the
18167 red
18168 black
18169 properties
18170 requires
18171 a
18172 small
18173 number
18174 O
18175 log
18176 n
18177 or
18178 amortized
18179 O
18180 1
18181 of
18182 color
18183 changes
18184 which
18185 are
18186 very
18187 quick
18188 in
18189 practice
18190 and
18191 no
18192 more
18193 than
18194 three
18195 tree
18196 rotations
18197 two
18198 for
18199 insertion
18200 Although
18201 insert
18202 and
18203 delete
18204 operations
18205 are
18206 complicated
18207 their
18208 times
18209 remain
18210 O
18211 log
18212 n
18213 Insertion
18214 Insertion
18215 begins
18216 by
18217 adding
18218 the
18219 node
18220 as
18221 any
18222 binary
18223 search
18224 tree
18225 insertion
18226 does
18227 and
18228 by
18229 coloring
18230 it
18231 red
18232 Whereas
18233 in
18234 the
18235 binary
18236 search
18237 tree
18238 we
18239 always
18240 add
18241 a
18242 leaf
18243 in
18244 the
18245 red
18246 black
18247 tree
18248 leaves
18249 contain
18250 no
18251 information
18252 so
18253 instead
18254 we
18255 add
18256 a
18257 red
18258 interior
18259 node
18260 with
18261 two
18262 black
18263 leaves
18264 in
18265 place
18266 of
18267 an
18268 existing
18269 black
18270 leaf
18271 What
18272 happens
18273 next
18274 depends
18275 on
18276 the
18277 color
18278 of
18279 other
18280 nearby
18281 nodes
18282 The
18283 term
18284 uncle
18285 node
18286 will
18287 be
18288 used
18289 to
18290 refer
18291 to
18292 the
18293 sibling
18294 of
18295 a
18296 node
18297 s
18298 parent
18299 as
18300 in
18301 human
18302 family
18303 trees
18304 Note
18305 that
18306 property
18307 3
18308 all
18309 leaves
18310 are
18311 black
18312 always
18313 holds
18314 property
18315 4
18316 both
18317 children
18318 of
18319 every
18320 red
18321 node
18322 are
18323 black
18324 is
18325 threatened
18326 only
18327 by
18328 adding
18329 a
18330 red
18331 node
18332 repainting
18333 a
18334 black
18335 node
18336 red
18337 or
18338 a
18339 rotation
18340 property
18341 5
18342 all
18343 paths
18344 from
18345 any
18346 given
18347 node
18348 to
18349 its
18350 leaf
18351 nodes
18352 contain
18353 the
18354 same
18355 number
18356 of
18357 black
18358 nodes
18359 is
18360 threatened
18361 only
18362 by
18363 adding
18364 a
18365 black
18366 node
18367 repainting
18368 a
18369 red
18370 node
18371 black
18372 or
18373 vice
18374 versa
18375 or
18376 a
18377 rotation
18378 Note
18379 The
18380 label
18381 N
18382 will
18383 be
18384 used
18385 to
18386 denote
18387 the
18388 current
18389 node
18390 colored
18391 red
18392 At
18393 the
18394 beginning
18395 this
18396 is
18397 the
18398 new
18399 node
18400 being
18401 inserted
18402 but
18403 the
18404 entire
18405 procedure
18406 may
18407 also
18408 be
18409 applied
18410 recursively
18411 to
18412 other
18413 nodes
18414 see
18415 case
18416 3
18417 P
18418 will
18419 denote
18420 N
18421 s
18422 parent
18423 node
18424 G
18425 will
18426 denote
18427 N
18428 s
18429 grandparent
18430 and
18431 U
18432 will
18433 denote
18434 N
18435 s
18436 uncle
18437 Note
18438 that
18439 in
18440 between
18441 some
18442 cases
18443 the
18444 roles
18445 and
18446 labels
18447 of
18448 the
18449 nodes
18450 are
18451 exchanged
18452 but
18453 in
18454 each
18455 case
18456 every
18457 label
18458 continues
18459 to
18460 represent
18461 the
18462 same
18463 node
18464 it
18465 represented
18466 at
18467 the
18468 beginning
18469 of
18470 the
18471 case
18472 Any
18473 color
18474 shown
18475 in
18476 the
18477 diagram
18478 is
18479 either
18480 assumed
18481 in
18482 its
18483 case
18484 or
18485 implied
18486 by
18487 those
18488 assumptions
18489 A
18490 numbered
18491 triangle
18492 represents
18493 a
18494 subtree
18495 of
18496 unspecified
18497 depth
18498 A
18499 black
18500 circle
18501 atop
18502 the
18503 triangle
18504 designates
18505 a
18506 black
18507 root
18508 node
18509 otherwise
18510 the
18511 root
18512 node
18513 s
18514 color
18515 is
18516 unspecified
18517 Each
18518 case
18519 will
18520 be
18521 demonstrated
18522 with
18523 example
18524 C
18525 code
18526 The
18527 uncle
18528 and
18529 grandparent
18530 nodes
18531 can
18532 be
18533 found
18534 by
18535 these
18536 functions
18537 In
18538 a
18539 regular
18540 binary
18541 search
18542 tree
18543 when
18544 deleting
18545 a
18546 node
18547 with
18548 two
18549 non
18550 leaf
18551 children
18552 we
18553 find
18554 either
18555 the
18556 maximum
18557 element
18558 in
18559 its
18560 left
18561 subtree
18562 which
18563 is
18564 the
18565 in
18566 order
18567 predecessor
18568 or
18569 the
18570 minimum
18571 element
18572 in
18573 its
18574 right
18575 subtree
18576 which
18577 is
18578 the
18579 in
18580 order
18581 successor
18582 and
18583 move
18584 its
18585 value
18586 into
18587 the
18588 node
18589 being
18590 deleted
18591 as
18592 shown
18593 here
18594 We
18595 then
18596 delete
18597 the
18598 node
18599 we
18600 copied
18601 the
18602 value
18603 from
18604 which
18605 must
18606 have
18607 fewer
18608 than
18609 two
18610 non
18611 leaf
18612 children
18613 Non
18614 leaf
18615 children
18616 rather
18617 than
18618 all
18619 children
18620 are
18621 specified
18622 here
18623 because
18624 unlike
18625 normal
18626 binary
18627 search
18628 trees
18629 red
18630 black
18631 trees
18632 can
18633 have
18634 leaf
18635 nodes
18636 anywhere
18637 so
18638 that
18639 all
18640 nodes
18641 are
18642 either
18643 internal
18644 nodes
18645 with
18646 two
18647 children
18648 or
18649 leaf
18650 nodes
18651 with
18652 by
18653 definition
18654 zero
18655 children
18656 In
18657 effect
18658 internal
18659 nodes
18660 having
18661 two
18662 leaf
18663 children
18664 in
18665 a
18666 red
18667 black
18668 tree
18669 are
18670 like
18671 the
18672 leaf
18673 nodes
18674 in
18675 a
18676 regular
18677 binary
18678 search
18679 tree
18680 Because
18681 merely
18682 copying
18683 a
18684 value
18685 does
18686 not
18687 violate
18688 any
18689 red
18690 black
18691 properties
18692 this
18693 reduces
18694 to
18695 the
18696 problem
18697 of
18698 deleting
18699 a
18700 node
18701 with
18702 at
18703 most
18704 one
18705 non
18706 leaf
18707 child
18708 Once
18709 we
18710 have
18711 solved
18712 that
18713 problem
18714 the
18715 solution
18716 applies
18717 equally
18718 to
18719 the
18720 case
18721 where
18722 the
18723 node
18724 we
18725 originally
18726 want
18727 to
18728 delete
18729 has
18730 at
18731 most
18732 one
18733 non
18734 leaf
18735 child
18736 as
18737 to
18738 the
18739 case
18740 just
18741 considered
18742 where
18743 it
18744 has
18745 two
18746 non
18747 leaf
18748 children
18749 Therefore
18750 for
18751 the
18752 remainder
18753 of
18754 this
18755 discussion
18756 we
18757 address
18758 the
18759 deletion
18760 of
18761 a
18762 node
18763 with
18764 at
18765 most
18766 one
18767 non
18768 leaf
18769 child
18770 We
18771 use
18772 the
18773 label
18774 M
18775 to
18776 denote
18777 the
18778 node
18779 to
18780 be
18781 deleted
18782 C
18783 will
18784 denote
18785 a
18786 selected
18787 child
18788 of
18789 M
18790 which
18791 we
18792 will
18793 also
18794 call
18795 its
18796 child
18797 If
18798 M
18799 does
18800 have
18801 a
18802 non
18803 leaf
18804 child
18805 call
18806 that
18807 its
18808 child
18809 C
18810 otherwise
18811 choose
18812 either
18813 leaf
18814 as
18815 its
18816 child
18817 C
18818 If
18819 M
18820 is
18821 a
18822 red
18823 node
18824 we
18825 simply
18826 replace
18827 it
18828 with
18829 its
18830 child
18831 C
18832 which
18833 must
18834 be
18835 black
18836 by
18837 property
18838 4
18839 This
18840 can
18841 only
18842 occur
18843 when
18844 M
18845 has
18846 two
18847 leaf
18848 children
18849 because
18850 if
18851 the
18852 red
18853 node
18854 M
18855 had
18856 a
18857 black
18858 non
18859 leaf
18860 child
18861 on
18862 one
18863 side
18864 but
18865 just
18866 a
18867 leaf
18868 child
18869 on
18870 the
18871 other
18872 side
18873 then
18874 the
18875 count
18876 of
18877 black
18878 nodes
18879 on
18880 both
18881 sides
18882 would
18883 be
18884 different
18885 thus
18886 the
18887 tree
18888 would
18889 violate
18890 property
18891 5
18892 All
18893 paths
18894 through
18895 the
18896 deleted
18897 node
18898 will
18899 simply
18900 pass
18901 through
18902 one
18903 fewer
18904 red
18905 node
18906 and
18907 both
18908 the
18909 deleted
18910 node
18911 s
18912 parent
18913 and
18914 child
18915 must
18916 be
18917 black
18918 so
18919 property
18920 3
18921 all
18922 leaves
18923 are
18924 black
18925 and
18926 property
18927 4
18928 both
18929 children
18930 of
18931 every
18932 red
18933 node
18934 are
18935 black
18936 still
18937 hold
18938 Another
18939 simple
18940 case
18941 is
18942 when
18943 M
18944 is
18945 black
18946 and
18947 C
18948 is
18949 red
18950 Simply
18951 removing
18952 a
18953 black
18954 node
18955 could
18956 break
18957 Properties
18958 4
18959 Both
18960 children
18961 of
18962 every
18963 red
18964 node
18965 are
18966 black
18967 and
18968 5
18969 All
18970 paths
18971 from
18972 any
18973 given
18974 node
18975 to
18976 its
18977 leaf
18978 nodes
18979 contain
18980 the
18981 same
18982 number
18983 of
18984 black
18985 nodes
18986 but
18987 if
18988 we
18989 repaint
18990 C
18991 black
18992 both
18993 of
18994 these
18995 properties
18996 are
18997 preserved
18998 The
18999 complex
19000 case
19001 is
19002 when
19003 both
19004 M
19005 and
19006 C
19007 are
19008 black
19009 This
19010 can
19011 only
19012 occur
19013 when
19014 deleting
19015 a
19016 black
19017 node
19018 which
19019 has
19020 two
19021 leaf
19022 children
19023 because
19024 if
19025 the
19026 black
19027 node
19028 M
19029 had
19030 a
19031 black
19032 non
19033 leaf
19034 child
19035 on
19036 one
19037 side
19038 but
19039 just
19040 a
19041 leaf
19042 child
19043 on
19044 the
19045 other
19046 side
19047 then
19048 the
19049 count
19050 of
19051 black
19052 nodes
19053 on
19054 both
19055 sides
19056 would
19057 be
19058 different
19059 thus
19060 the
19061 tree
19062 would
19063 have
19064 been
19065 an
19066 invalid
19067 red
19068 black
19069 tree
19070 by
19071 violation
19072 of
19073 property
19074 5
19075 We
19076 begin
19077 by
19078 replacing
19079 M
19080 with
19081 its
19082 child
19083 C
19084 We
19085 will
19086 call
19087 or
19088 is
19089 relabel
19090 this
19091 child
19092 in
19093 its
19094 new
19095 position
19096 N
19097 and
19098 its
19099 sibling
19100 its
19101 new
19102 parent
19103 s
19104 other
19105 child
19106 S
19107 S
19108 was
19109 previously
19110 the
19111 sibling
19112 of
19113 M
19114 In
19115 the
19116 diagrams
19117 below
19118 we
19119 will
19120 also
19121 use
19122 P
19123 for
19124 N
19125 s
19126 new
19127 parent
19128 M
19129 s
19130 old
19131 parent
19132 SL
19133 for
19134 S
19135 s
19136 left
19137 child
19138 and
19139 SR
19140 for
19141 S
19142 s
19143 right
19144 child
19145 S
19146 cannot
19147 be
19148 a
19149 leaf
19150 because
19151 if
19152 M
19153 and
19154 C
19155 were
19156 black
19157 then
19158 P
19159 s
19160 one
19161 subtree
19162 which
19163 included
19164 M
19165 counted
19166 two
19167 black
19168 height
19169 and
19170 thus
19171 P
19172 s
19173 other
19174 subtree
19175 which
19176 includes
19177 S
19178 must
19179 also
19180 count
19181 two
19182 black
19183 height
19184 which
19185 cannot
19186 be
19187 the
19188 case
19189 if
19190 S
19191 is
19192 a
19193 leaf
19194 node
19195 Note
19196 In
19197 between
19198 some
19199 cases
19200 we
19201 exchange
19202 the
19203 roles
19204 and
19205 labels
19206 of
19207 the
19208 nodes
19209 but
19210 in
19211 each
19212 case
19213 every
19214 label
19215 continues
19216 to
19217 represent
19218 the
19219 same
19220 node
19221 it
19222 represented
19223 at
19224 the
19225 beginning
19226 of
19227 the
19228 case
19229 Any
19230 color
19231 shown
19232 in
19233 the
19234 diagram
19235 is
19236 either
19237 assumed
19238 in
19239 its
19240 case
19241 or
19242 implied
19243 by
19244 those
19245 assumptions
19246 White
19247 represents
19248 an
19249 unknown
19250 color
19251 either
19252 red
19253 or
19254 black
19255 We
19256 will
19257 find
19258 the
19259 sibling
19260 using
19261 this
19262 function
19263 Hash
19264 table
19265 Not
19266 to
19267 be
19268 confused
19269 with
19270 Hash
19271 list
19272 or
19273 Hash
19274 tree
19275 Hash
19276 table
19277 Type
19278 Unordered
19279 associative
19280 array
19281 Invented
19282 1953
19283 A
19284 small
19285 phone
19286 book
19287 as
19288 a
19289 hash
19290 table
19291 In
19292 computing
19293 a
19294 hash
19295 table
19296 hash
19297 map
19298 is
19299 a
19300 data
19301 structure
19302 used
19303 to
19304 implement
19305 an
19306 associative
19307 array
19308 a
19309 structure
19310 that
19311 can
19312 map
19313 keys
19314 to
19315 values
19316 A
19317 hash
19318 table
19319 uses
19320 a
19321 hash
19322 function
19323 to
19324 compute
19325 an
19326 index
19327 into
19328 an
19329 array
19330 of
19331 buckets
19332 or
19333 slots
19334 from
19335 which
19336 the
19337 correct
19338 value
19339 can
19340 be
19341 found
19342 Ideally
19343 the
19344 hash
19345 function
19346 will
19347 assign
19348 each
19349 key
19350 to
19351 a
19352 unique
19353 bucket
19354 but
19355 this
19356 situation
19357 is
19358 rarely
19359 achievable
19360 in
19361 practice
19362 usually
19363 some
19364 keys
19365 will
19366 hash
19367 to
19368 the
19369 same
19370 bucket
19371 Instead
19372 most
19373 hash
19374 table
19375 designs
19376 assume
19377 that
19378 hash
19379 collisions
19380 different
19381 keys
19382 that
19383 are
19384 assigned
19385 by
19386 the
19387 hash
19388 function
19389 to
19390 the
19391 same
19392 bucket
19393 will
19394 occur
19395 and
19396 must
19397 be
19398 accommodated
19399 in
19400 some
19401 way
19402 In
19403 a
19404 well
19405 dimensioned
19406 hash
19407 table
19408 the
19409 average
19410 cost
19411 number
19412 of
19413 instructions
19414 for
19415 each
19416 lookup
19417 is
19418 independent
19419 of
19420 the
19421 number
19422 of
19423 elements
19424 stored
19425 in
19426 the
19427 table
19428 Many
19429 hash
19430 table
19431 designs
19432 also
19433 allow
19434 arbitrary
19435 insertions
19436 and
19437 deletions
19438 of
19439 key
19440 value
19441 pairs
19442 at
19443 amortized2
19444 constant
19445 average
19446 cost
19447 per
19448 operation34
19449 In
19450 many
19451 situations
19452 hash
19453 tables
19454 turn
19455 out
19456 to
19457 be
19458 more
19459 efficient
19460 than
19461 search
19462 trees
19463 or
19464 any
19465 other
19466 table
19467 lookup
19468 structure
19469 For
19470 this
19471 reason
19472 they
19473 are
19474 widely
19475 used
19476 in
19477 many
19478 kinds
19479 of
19480 computer
19481 software
19482 particularly
19483 for
19484 associative
19485 arrays
19486 database
19487 indexing
19488 caches
19489 and
19490 sets
19491 Hash
19492 function
19493 The
19494 idea
19495 of
19496 hashing
19497 is
19498 to
19499 distribute
19500 the
19501 entries
19502 key
19503 value
19504 pairs
19505 across
19506 an
19507 array
19508 of
19509 buckets
19510 Given
19511 a
19512 key
19513 the
19514 algorithm
19515 computes
19516 an
19517 index
19518 that
19519 suggests
19520 where
19521 the
19522 entry
19523 can
19524 be
19525 found
19526 index
19527 fkey
19528 array
19529 size
19530 Often
19531 this
19532 is
19533 done
19534 in
19535 two
19536 steps
19537 hash
19538 hashfunckey
19539 index
19540 hash
19541 array
19542 size
19543 In
19544 this
19545 method
19546 the
19547 hash
19548 is
19549 independent
19550 of
19551 the
19552 array
19553 size
19554 and
19555 it
19556 is
19557 then
19558 reduced
19559 to
19560 an
19561 index
19562 a
19563 number
19564 between
19565 0
19566 and
19567 array
19568 size
19569 1
19570 using
19571 the
19572 modulo
19573 operator
19574 In
19575 the
19576 case
19577 that
19578 the
19579 array
19580 size
19581 is
19582 a
19583 power
19584 of
19585 two
19586 the
19587 remainder
19588 operation
19589 is
19590 reduced
19591 to
19592 masking
19593 which
19594 improves
19595 speed
19596 but
19597 can
19598 increase
19599 problems
19600 with
19601 a
19602 poor
19603 hash
19604 function
19605 Choosing
19606 a
19607 good
19608 hash
19609 function
19610 A
19611 good
19612 hash
19613 function
19614 and
19615 implementation
19616 algorithm
19617 are
19618 essential
19619 for
19620 good
19621 hash
19622 table
19623 performance
19624 but
19625 may
19626 be
19627 difficult
19628 to
19629 achieve
19630 A
19631 basic
19632 requirement
19633 is
19634 that
19635 the
19636 function
19637 should
19638 provide
19639 a
19640 uniform
19641 distribution
19642 of
19643 hash
19644 values
19645 A
19646 non
19647 uniform
19648 distribution
19649 increases
19650 the
19651 number
19652 of
19653 collisions
19654 and
19655 the
19656 cost
19657 of
19658 resolving
19659 them
19660 Uniformity
19661 is
19662 sometimes
19663 difficult
19664 to
19665 ensure
19666 by
19667 design
19668 but
19669 may
19670 be
19671 evaluated
19672 empirically
19673 using
19674 statistical
19675 tests
19676 eg
19677 a
19678 Pearsons
19679 chi
19680 squared
19681 test
19682 for
19683 discrete
19684 uniform
19685 distributions56
19686 The
19687 distribution
19688 needs
19689 to
19690 be
19691 uniform
19692 only
19693 for
19694 table
19695 sizes
19696 that
19697 occur
19698 in
19699 the
19700 application
19701 In
19702 particular
19703 if
19704 one
19705 uses
19706 dynamic
19707 resizing
19708 with
19709 exact
19710 doubling
19711 and
19712 halving
19713 of
19714 the
19715 table
19716 size
19717 s
19718 then
19719 the
19720 hash
19721 function
19722 needs
19723 to
19724 be
19725 uniform
19726 only
19727 when
19728 s
19729 is
19730 a
19731 power
19732 of
19733 two
19734 On
19735 the
19736 other
19737 hand
19738 some
19739 hashing
19740 algorithms
19741 provide
19742 uniform
19743 hashes
19744 only
19745 when
19746 s
19747 is
19748 a
19749 prime
19750 number7
19751 For
19752 open
19753 addressing
19754 schemes
19755 the
19756 hash
19757 function
19758 should
19759 also
19760 avoid
19761 clustering
19762 the
19763 mapping
19764 of
19765 two
19766 or
19767 more
19768 keys
19769 to
19770 consecutive
19771 slots
19772 Such
19773 clustering
19774 may
19775 cause
19776 the
19777 lookup
19778 cost
19779 to
19780 skyrocket
19781 even
19782 if
19783 the
19784 load
19785 factor
19786 is
19787 low
19788 and
19789 collisions
19790 are
19791 infrequent
19792 The
19793 popular
19794 multiplicative
19795 hash3
19796 is
19797 claimed
19798 to
19799 have
19800 particularly
19801 poor
19802 clustering
19803 behavior7
19804 Cryptographic
19805 hash
19806 functions
19807 are
19808 believed
19809 to
19810 provide
19811 good
19812 hash
19813 functions
19814 for
19815 any
19816 table
19817 size
19818 s
19819 either
19820 by
19821 modulo
19822 reduction
19823 or
19824 by
19825 bit
19826 masking
19827 They
19828 may
19829 also
19830 be
19831 appropriate
19832 if
19833 there
19834 is
19835 a
19836 risk
19837 of
19838 malicious
19839 users
19840 trying
19841 to
19842 sabotage
19843 a
19844 network
19845 service
19846 by
19847 submitting
19848 requests
19849 designed
19850 to
19851 generate
19852 a
19853 large
19854 number
19855 of
19856 collisions
19857 in
19858 the
19859 servers
19860 hash
19861 tables
19862 However
19863 the
19864 risk
19865 of
19866 sabotage
19867 can
19868 also
19869 be
19870 avoided
19871 by
19872 cheaper
19873 methods
19874 such
19875 as
19876 applying
19877 Hash
19878 table
19879 Not
19880 to
19881 be
19882 confused
19883 with
19884 Hash
19885 list
19886 or
19887 Hash
19888 tree
19889 Hash
19890 table
19891 Type
19892 Unordered
19893 associative
19894 array
19895 Invented
19896 1953
19897 A
19898 small
19899 phone
19900 book
19901 as
19902 a
19903 hash
19904 table
19905 In
19906 computing
19907 a
19908 hash
19909 table
19910 hash
19911 map
19912 is
19913 a
19914 data
19915 structure
19916 used
19917 to
19918 implement
19919 an
19920 associative
19921 array
19922 a
19923 structure
19924 that
19925 can
19926 map
19927 keys
19928 to
19929 values
19930 A
19931 hash
19932 table
19933 uses
19934 a
19935 hash
19936 function
19937 to
19938 compute
19939 an
19940 index
19941 into
19942 an
19943 array
19944 of
19945 buckets
19946 or
19947 slots
19948 from
19949 which
19950 the
19951 correct
19952 value
19953 can
19954 be
19955 found
19956 Ideally
19957 the
19958 hash
19959 function
19960 will
19961 assign
19962 each
19963 key
19964 to
19965 a
19966 unique
19967 bucket
19968 but
19969 this
19970 situation
19971 is
19972 rarely
19973 achievable
19974 in
19975 practice
19976 usually
19977 some
19978 keys
19979 will
19980 hash
19981 to
19982 the
19983 same
19984 bucket
19985 Instead
19986 most
19987 hash
19988 table
19989 designs
19990 assume
19991 that
19992 hash
19993 collisions
19994 different
19995 keys
19996 that
19997 are
19998 assigned
19999 by
20000 the
20001 hash
20002 function
20003 to
20004 the
20005 same
20006 bucket
20007 will
20008 occur
20009 and
20010 must
20011 be
20012 accommodated
20013 in
20014 some
20015 way
20016 In
20017 a
20018 well
20019 dimensioned
20020 hash
20021 table
20022 the
20023 average
20024 cost
20025 number
20026 of
20027 instructions
20028 for
20029 each
20030 lookup
20031 is
20032 independent
20033 of
20034 the
20035 number
20036 of
20037 elements
20038 stored
20039 in
20040 the
20041 table
20042 Many
20043 hash
20044 table
20045 designs
20046 also
20047 allow
20048 arbitrary
20049 insertions
20050 and
20051 deletions
20052 of
20053 key
20054 value
20055 pairs
20056 at
20057 amortized2
20058 constant
20059 average
20060 cost
20061 per
20062 operation34
20063 In
20064 many
20065 situations
20066 hash
20067 tables
20068 turn
20069 out
20070 to
20071 be
20072 more
20073 efficient
20074 than
20075 search
20076 trees
20077 or
20078 any
20079 other
20080 table
20081 lookup
20082 structure
20083 For
20084 this
20085 reason
20086 they
20087 are
20088 widely
20089 used
20090 in
20091 many
20092 kinds
20093 of
20094 computer
20095 software
20096 particularly
20097 for
20098 associative
20099 arrays
20100 database
20101 indexing
20102 caches
20103 and
20104 sets
20105 Hash
20106 function
20107 The
20108 idea
20109 of
20110 hashing
20111 is
20112 to
20113 distribute
20114 the
20115 entries
20116 key
20117 value
20118 pairs
20119 across
20120 an
20121 array
20122 of
20123 buckets
20124 Given
20125 a
20126 key
20127 the
20128 algorithm
20129 computes
20130 an
20131 index
20132 that
20133 suggests
20134 where
20135 the
20136 entry
20137 can
20138 be
20139 found
20140 index
20141 fkey
20142 array
20143 size
20144 Often
20145 this
20146 is
20147 done
20148 in
20149 two
20150 steps
20151 hash
20152 hashfunckey
20153 index
20154 hash
20155 array
20156 size
20157 In
20158 this
20159 method
20160 the
20161 hash
20162 is
20163 independent
20164 of
20165 the
20166 array
20167 size
20168 and
20169 it
20170 is
20171 then
20172 reduced
20173 to
20174 an
20175 index
20176 a
20177 number
20178 between
20179 0
20180 and
20181 array
20182 size
20183 1
20184 using
20185 the
20186 modulo
20187 operator
20188 In
20189 the
20190 case
20191 that
20192 the
20193 array
20194 size
20195 is
20196 a
20197 power
20198 of
20199 two
20200 the
20201 remainder
20202 operation
20203 is
20204 reduced
20205 to
20206 masking
20207 which
20208 improves
20209 speed
20210 but
20211 can
20212 increase
20213 problems
20214 with
20215 a
20216 poor
20217 hash
20218 function
20219 Choosing
20220 a
20221 good
20222 hash
20223 function
20224 A
20225 good
20226 hash
20227 function
20228 and
20229 implementation
20230 algorithm
20231 are
20232 essential
20233 for
20234 good
20235 hash
20236 table
20237 performance
20238 but
20239 may
20240 be
20241 difficult
20242 to
20243 achieve
20244 A
20245 basic
20246 requirement
20247 is
20248 that
20249 the
20250 function
20251 should
20252 provide
20253 a
20254 uniform
20255 distribution
20256 of
20257 hash
20258 values
20259 A
20260 non
20261 uniform
20262 distribution
20263 increases
20264 the
20265 number
20266 of
20267 collisions
20268 and
20269 the
20270 cost
20271 of
20272 resolving
20273 them
20274 Uniformity
20275 is
20276 sometimes
20277 difficult
20278 to
20279 ensure
20280 by
20281 design
20282 but
20283 may
20284 be
20285 evaluated
20286 empirically
20287 using
20288 statistical
20289 tests
20290 eg
20291 a
20292 Pearsons
20293 chi
20294 squared
20295 test
20296 for
20297 discrete
20298 uniform
20299 distributions56
20300 The
20301 distribution
20302 needs
20303 to
20304 be
20305 uniform
20306 only
20307 for
20308 table
20309 sizes
20310 that
20311 occur
20312 in
20313 the
20314 application
20315 In
20316 particular
20317 if
20318 one
20319 uses
20320 dynamic
20321 resizing
20322 with
20323 exact
20324 doubling
20325 and
20326 halving
20327 of
20328 the
20329 table
20330 size
20331 s
20332 then
20333 the
20334 hash
20335 function
20336 needs
20337 to
20338 be
20339 uniform
20340 only
20341 when
20342 s
20343 is
20344 a
20345 power
20346 of
20347 two
20348 On
20349 the
20350 other
20351 hand
20352 some
20353 hashing
20354 algorithms
20355 provide
20356 uniform
20357 hashes
20358 only
20359 when
20360 s
20361 is
20362 a
20363 prime
20364 number7
20365 For
20366 open
20367 addressing
20368 schemes
20369 the
20370 hash
20371 function
20372 should
20373 also
20374 avoid
20375 clustering
20376 the
20377 mapping
20378 of
20379 two
20380 or
20381 more
20382 keys
20383 to
20384 consecutive
20385 slots
20386 Such
20387 clustering
20388 may
20389 cause
20390 the
20391 lookup
20392 cost
20393 to
20394 skyrocket
20395 even
20396 if
20397 the
20398 load
20399 factor
20400 is
20401 low
20402 and
20403 collisions
20404 are
20405 infrequent
20406 The
20407 popular
20408 multiplicative
20409 hash3
20410 is
20411 claimed
20412 to
20413 have
20414 particularly
20415 poor
20416 clustering
20417 behavior7
20418 Cryptographic
20419 hash
20420 functions
20421 are
20422 believed
20423 to
20424 provide
20425 good
20426 hash
20427 functions
20428 for
20429 any
20430 table
20431 size
20432 s
20433 either
20434 by
20435 modulo
20436 reduction
20437 or
20438 by
20439 bit
20440 masking
20441 They
20442 may
20443 also
20444 be
20445 appropriate
20446 if
20447 there
20448 is
20449 a
20450 risk
20451 of
20452 malicious
20453 users
20454 trying
20455 to
20456 sabotage
20457 a
20458 network
20459 service
20460 by
20461 submitting
20462 requests
20463 designed
20464 to
20465 generate
20466 a
20467 large
20468 number
20469 of
20470 collisions
20471 in
20472 the
20473 servers
20474 hash
20475 tables
20476 However
20477 the
20478 risk
20479 of
20480 sabotage
20481 can
20482 also
20483 be
20484 avoided
20485 by
20486 cheaper
20487 methods
20488 such
20489 as
20490 applying
20491 a
20492 secret
20493 salt
20494 to
20495 the
20496 data
20497 or
20498 using
20499 a
20500 universal
20501 hash
20502 function
20503 Perfect
20504 hash
20505 function
20506 If
20507 all
20508 keys
20509 are
20510 known
20511 ahead
20512 of
20513 time
20514 a
20515 perfect
20516 hash
20517 function
20518 can
20519 be
20520 used
20521 to
20522 create
20523 a
20524 perfect
20525 hash
20526 table
20527 that
20528 has
20529 no
20530 collisions
20531 If
20532 minimal
20533 perfect
20534 hashing
20535 is
20536 used
20537 every
20538 location
20539 in
20540 the
20541 hash
20542 table
20543 can
20544 be
20545 used
20546 as
20547 well
20548 Perfect
20549 hashing
20550 allows
20551 for
20552 constant
20553 time
20554 lookups
20555 in
20556 the
20557 worst
20558 case
20559 This
20560 is
20561 in
20562 contrast
20563 to
20564 most
20565 chaining
20566 and
20567 open
20568 addressing
20569 methods
20570 where
20571 the
20572 time
20573 for
20574 lookup
20575 is
20576 low
20577 on
20578 average
20579 but
20580 may
20581 be
20582 very
20583 large
20584 proportional
20585 to
20586 the
20587 number
20588 of
20589 entries
20590 for
20591 some
20592 sets
20593 of
20594 keys
20595 Key
20596 statistics
20597 A
20598 critical
20599 statistic
20600 for
20601 a
20602 hash
20603 table
20604 is
20605 called
20606 the
20607 load
20608 factor
20609 This
20610 is
20611 simply
20612 the
20613 number
20614 of
20615 entries
20616 divided
20617 by
20618 the
20619 number
20620 of
20621 buckets
20622 that
20623 is
20624 n
20625 k
20626 where
20627 n
20628 is
20629 the
20630 number
20631 of
20632 entries
20633 and
20634 k
20635 is
20636 the
20637 number
20638 of
20639 buckets
20640 If
20641 the
20642 load
20643 factor
20644 is
20645 kept
20646 reasonable
20647 the
20648 hash
20649 table
20650 should
20651 perform
20652 well
20653 provided
20654 the
20655 hashing
20656 is
20657 good
20658 If
20659 the
20660 load
20661 factor
20662 grows
20663 too
20664 large
20665 the
20666 hash
20667 table
20668 will
20669 become
20670 slow
20671 or
20672 it
20673 may
20674 fail
20675 to
20676 work
20677 depending
20678 on
20679 the
20680 method
20681 used
20682 The
20683 expected
20684 constant
20685 time
20686 property
20687 of
20688 a
20689 hash
20690 table
20691 assumes
20692 that
20693 the
20694 load
20695 factor
20696 is
20697 kept
20698 below
20699 some
20700 bound
20701 For
20702 a
20703 fixed
20704 number
20705 of
20706 buckets
20707 the
20708 time
20709 for
20710 a
20711 lookup
20712 grows
20713 with
20714 the
20715 number
20716 of
20717 entries
20718 and
20719 so
20720 does
20721 not
20722 achieve
20723 the
20724 desired
20725 constant
20726 time
20727 Second
20728 to
20729 that
20730 one
20731 can
20732 examine
20733 the
20734 variance
20735 of
20736 number
20737 of
20738 entries
20739 per
20740 bucket
20741 For
20742 example
20743 two
20744 tables
20745 both
20746 have
20747 1000
20748 entries
20749 and
20750 1000
20751 buckets
20752 one
20753 has
20754 exactly
20755 one
20756 entry
20757 in
20758 each
20759 bucket
20760 the
20761 other
20762 has
20763 all
20764 entries
20765 in
20766 the
20767 same
20768 bucket
20769 Clearly
20770 the
20771 hashing
20772 is
20773 not
20774 working
20775 in
20776 the
20777 second
20778 one
20779 A
20780 low
20781 load
20782 factor
20783 is
20784 not
20785 especially
20786 beneficial
20787 As
20788 the
20789 load
20790 factor
20791 approaches
20792 0
20793 the
20794 proportion
20795 of
20796 unused
20797 areas
20798 in
20799 the
20800 hash
20801 table
20802 increases
20803 but
20804 there
20805 is
20806 not
20807 necessarily
20808 any
20809 reduction
20810 in
20811 search
20812 cost
20813 This
20814 results
20815 in
20816 wasted
20817 memory
20818 Collision
20819 resolution
20820 Hash
20821 collisions
20822 are
20823 practically
20824 unavoidable
20825 when
20826 hashing
20827 a
20828 random
20829 subset
20830 of
20831 a
20832 large
20833 set
20834 of
20835 possible
20836 keys
20837 For
20838 example
20839 if
20840 2
20841 450
20842 keys
20843 are
20844 hashed
20845 into
20846 a
20847 million
20848 buckets
20849 even
20850 with
20851 a
20852 perfectly
20853 uniform
20854 random
20855 distribution
20856 according
20857 to
20858 the
20859 birthday
20860 problem
20861 there
20862 is
20863 approximately
20864 a
20865 95
20866 chance
20867 of
20868 at
20869 least
20870 two
20871 of
20872 the
20873 keys
20874 being
20875 hashed
20876 to
20877 the
20878 same
20879 slot
20880 Therefore
20881 most
20882 hash
20883 table
20884 implementations
20885 have
20886 some
20887 collision
20888 resolution
20889 strategy
20890 to
20891 handle
20892 such
20893 events
20894 Some
20895 common
20896 strategies
20897 are
20898 described
20899 below
20900 All
20901 these
20902 methods
20903 require
20904 that
20905 the
20906 keys
20907 or
20908 pointers
20909 to
20910 them
20911 be
20912 stored
20913 in
20914 the
20915 table
20916 together
20917 with
20918 the
20919 associated
20920 values
20921 Separate
20922 chaining
20923 Hash
20924 collision
20925 resolved
20926 by
20927 separate
20928 chaining
20929 In
20930 the
20931 method
20932 known
20933 as
20934 separate
20935 chaining
20936 each
20937 bucket
20938 is
20939 independent
20940 and
20941 has
20942 some
20943 sort
20944 of
20945 list
20946 of
20947 entries
20948 with
20949 the
20950 same
20951 index
20952 The
20953 time
20954 for
20955 hash
20956 table
20957 operations
20958 is
20959 the
20960 time
20961 to
20962 find
20963 the
20964 bucket
20965 which
20966 is
20967 constant
20968 plus
20969 the
20970 time
20971 for
20972 the
20973 list
20974 operation
20975 The
20976 technique
20977 is
20978 also
20979 called
20980 open
20981 hashing
20982 or
20983 closed
20984 addressing
20985 In
20986 a
20987 good
20988 hash
20989 table
20990 each
20991 bucket
20992 has
20993 zero
20994 or
20995 one
20996 entries
20997 and
20998 sometimes
20999 two
21000 or
21001 three
21002 but
21003 rarely
21004 more
21005 than
21006 that
21007 Therefore
21008 structures
21009 that
21010 are
21011 efficient
21012 in
21013 time
21014 and
21015 space
21016 for
21017 these
21018 cases
21019 are
21020 preferred
21021 Structures
21022 that
21023 are
21024 efficient
21025 for
21026 a
21027 fairly
21028 large
21029 number
21030 of
21031 entries
21032 per
21033 bucket
21034 are
21035 not
21036 needed
21037 or
21038 desirable
21039 If
21040 these
21041 cases
21042 happen
21043 often
21044 the
21045 hashing
21046 is
21047 not
21048 working
21049 well
21050 and
21051 this
21052 needs
21053 to
21054 be
21055 fixed
21056 Separate
21057 chaining
21058 with
21059 linked
21060 lists
21061 Chained
21062 hash
21063 tables
21064 with
21065 linked
21066 lists
21067 are
21068 popular
21069 because
21070 they
21071 require
21072 only
21073 basic
21074 data
21075 structures
21076 with
21077 simple
21078 algorithms
21079 and
21080 can
21081 use
21082 simple
21083 hash
21084 functions
21085 that
21086 are
21087 unsuitable
21088 for
21089 other
21090 methods
21091 The
21092 cost
21093 of
21094 a
21095 table
21096 operation
21097 is
21098 that
21099 of
21100 scanning
21101 the
21102 entries
21103 of
21104 the
21105 selected
21106 bucket
21107 for
21108 the
21109 desired
21110 key
21111 If
21112 the
21113 distribution
21114 of
21115 keys
21116 is
21117 sufficiently
21118 uniform
21119 the
21120 average
21121 cost
21122 of
21123 a
21124 lookup
21125 depends
21126 only
21127 on
21128 the
21129 average
21130 number
21131 of
21132 keys
21133 per
21134 bucket
21135 that
21136 is
21137 on
21138 the
21139 load
21140 factor
21141 Chained
21142 hash
21143 tables
21144 remain
21145 effective
21146 even
21147 when
21148 the
21149 number
21150 of
21151 table
21152 entries
21153 n
21154 is
21155 much
21156 higher
21157 than
21158 the
21159 number
21160 of
21161 slots
21162 Their
21163 performance
21164 degrades
21165 more
21166 gracefully
21167 linearly
21168 with
21169 the
21170 load
21171 factor
21172 For
21173 example
21174 a
21175 chained
21176 hash
21177 table
21178 with
21179 1000
21180 slots
21181 and
21182 10
21183 000
21184 stored
21185 keys
21186 load
21187 factor
21188 10
21189 is
21190 five
21191 to
21192 ten
21193 times
21194 slower
21195 than
21196 a
21197 10
21198 000
21199 slot
21200 table
21201 load
21202 factor
21203 1
21204 but
21205 still
21206 1000
21207 times
21208 faster
21209 than
21210 a
21211 plain
21212 sequential
21213 list
21214 and
21215 possibly
21216 even
21217 faster
21218 than
21219 a
21220 balanced
21221 search
21222 tree
21223 For
21224 separate
21225 chaining
21226 the
21227 worst
21228 case
21229 scenario
21230 is
21231 when
21232 all
21233 entries
21234 are
21235 inserted
21236 into
21237 the
21238 same
21239 bucket
21240 in
21241 which
21242 case
21243 the
21244 hash
21245 table
21246 is
21247 ineffective
21248 and
21249 the
21250 cost
21251 is
21252 that
21253 of
21254 searching
21255 the
21256 bucket
21257 data
21258 structure
21259 If
21260 the
21261 latter
21262 is
21263 a
21264 linear
21265 list
21266 the
21267 lookup
21268 procedure
21269 may
21270 have
21271 to
21272 scan
21273 all
21274 its
21275 entries
21276 so
21277 the
21278 worst
21279 case
21280 cost
21281 is
21282 proportional
21283 to
21284 the
21285 number
21286 n
21287 of
21288 entries
21289 in
21290 the
21291 table
21292 The
21293 bucket
21294 chains
21295 are
21296 often
21297 implemented
21298 as
21299 ordered
21300 lists
21301 sorted
21302 by
21303 the
21304 key
21305 field
21306 this
21307 choice
21308 approximately
21309 halves
21310 the
21311 average
21312 cost
21313 of
21314 unsuccessful
21315 lookups
21316 compared
21317 to
21318 an
21319 unordered
21320 list
21321 However
21322 if
21323 some
21324 keys
21325 are
21326 much
21327 more
21328 likely
21329 to
21330 come
21331 up
21332 than
21333 others
21334 an
21335 unordered
21336 list
21337 with
21338 move
21339 to
21340 front
21341 heuristic
21342 may
21343 be
21344 more
21345 effective
21346 More
21347 sophisticated
21348 data
21349 structures
21350 such
21351 as
21352 balanced
21353 search
21354 trees
21355 are
21356 worth
21357 considering
21358 only
21359 if
21360 the
21361 load
21362 factor
21363 is
21364 large
21365 about
21366 10
21367 or
21368 more
21369 or
21370 if
21371 the
21372 hash
21373 distribution
21374 is
21375 likely
21376 to
21377 be
21378 very
21379 non
21380 uniform
21381 or
21382 if
21383 one
21384 must
21385 guarantee
21386 good
21387 performance
21388 even
21389 in
21390 a
21391 worst
21392 case
21393 scenario
21394 However
21395 using
21396 a
21397 larger
21398 table
21399 and
21400 or
21401 a
21402 better
21403 hash
21404 function
21405 may
21406 be
21407 even
21408 more
21409 effective
21410 in
21411 those
21412 cases
21413 Chained
21414 hash
21415 tables
21416 also
21417 inherit
21418 the
21419 disadvantages
21420 of
21421 linked
21422 lists
21423 When
21424 storing
21425 small
21426 keys
21427 and
21428 values
21429 the
21430 space
21431 overhead
21432 of
21433 the
21434 next
21435 pointer
21436 in
21437 each
21438 entry
21439 record
21440 can
21441 be
21442 significant
21443 An
21444 additional
21445 disadvantage
21446 is
21447 that
21448 traversing
21449 a
21450 linked
21451 list
21452 has
21453 poor
21454 cache
21455 performance
21456 making
21457 the
21458 processor
21459 cache
21460 ineffective
21461 Separate
21462 chaining
21463 with
21464 list
21465 head
21466 cells
21467 Hash
21468 collision
21469 by
21470 separate
21471 chaining
21472 with
21473 head
21474 records
21475 in
21476 the
21477 bucket
21478 array
21479 Some
21480 chaining
21481 implementations
21482 store
21483 the
21484 first
21485 record
21486 of
21487 each
21488 chain
21489 in
21490 the
21491 slot
21492 array
21493 itself4
21494 The
21495 number
21496 of
21497 pointer
21498 traversals
21499 is
21500 decreased
21501 by
21502 one
21503 for
21504 most
21505 cases
21506 The
21507 purpose
21508 is
21509 to
21510 increase
21511 cache
21512 efficiency
21513 of
21514 hash
21515 table
21516 access
21517 The
21518 disadvantage
21519 is
21520 that
21521 an
21522 empty
21523 bucket
21524 takes
21525 the
21526 same
21527 space
21528 as
21529 a
21530 bucket
21531 with
21532 one
21533 entry
21534 To
21535 save
21536 space
21537 such
21538 hash
21539 tables
21540 often
21541 have
21542 about
21543 as
21544 many
21545 slots
21546 as
21547 stored
21548 entries
21549 meaning
21550 that
21551 many
21552 slots
21553 have
21554 two
21555 or
21556 more
21557 entries
21558 Separate
21559 chaining
21560 with
21561 other
21562 structures
21563 Instead
21564 of
21565 a
21566 list
21567 one
21568 can
21569 use
21570 any
21571 other
21572 data
21573 structure
21574 that
21575 supports
21576 the
21577 required
21578 operations
21579 For
21580 example
21581 by
21582 using
21583 a
21584 self
21585 balancing
21586 tree
21587 the
21588 theoretical
21589 worst
21590 case
21591 time
21592 of
21593 common
21594 hash
21595 table
21596 operations
21597 insertion
21598 deletion
21599 lookup
21600 can
21601 be
21602 brought
21603 down
21604 to
21605 Olog
21606 n
21607 rather
21608 than
21609 On
21610 However
21611 this
21612 approach
21613 is
21614 only
21615 worth
21616 the
21617 trouble
21618 and
21619 extra
21620 memory
21621 cost
21622 if
21623 long
21624 delays
21625 must
21626 be
21627 avoided
21628 at
21629 all
21630 costs
21631 eg
21632 in
21633 a
21634 real
21635 time
21636 application
21637 or
21638 if
21639 one
21640 must
21641 guard
21642 against
21643 many
21644 entries
21645 hashed
21646 to
21647 the
21648 same
21649 slot
21650 eg
21651 if
21652 one
21653 expects
21654 extremely
21655 non
21656 uniform
21657 distributions
21658 or
21659 in
21660 the
21661 case
21662 of
21663 web
21664 sites
21665 or
21666 other
21667 publicly
21668 accessible
21669 services
21670 which
21671 are
21672 vulnerable
21673 to
21674 malicious
21675 key
21676 distributions
21677 in
21678 requests
21679 The
21680 variant
21681 called
21682 array
21683 hash
21684 table
21685 uses
21686 a
21687 dynamic
21688 array
21689 to
21690 store
21691 all
21692 the
21693 entries
21694 that
21695 hash
21696 to
21697 the
21698 same
21699 slot8910
21700 Each
21701 newly
21702 inserted
21703 entry
21704 gets
21705 appended
21706 to
21707 the
21708 end
21709 of
21710 the
21711 dynamic
21712 array
21713 that
21714 is
21715 assigned
21716 to
21717 the
21718 slot
21719 The
21720 dynamic
21721 array
21722 is
21723 resized
21724 in
21725 an
21726 exact
21727 fit
21728 manner
21729 meaning
21730 it
21731 is
21732 grown
21733 only
21734 by
21735 as
21736 many
21737 bytes
21738 as
21739 needed
21740 Alternative
21741 techniques
21742 such
21743 as
21744 growing
21745 the
21746 array
21747 by
21748 block
21749 sizes
21750 or
21751 pages
21752 were
21753 found
21754 to
21755 improve
21756 insertion
21757 performance
21758 but
21759 at
21760 a
21761 cost
21762 in
21763 space
21764 This
21765 variation
21766 makes
21767 more
21768 efficient
21769 use
21770 of
21771 CPU
21772 caching
21773 and
21774 the
21775 translation
21776 lookaside
21777 buffer
21778 TLB
21779 because
21780 slot
21781 entries
21782 are
21783 stored
21784 in
21785 sequential
21786 memory
21787 positions
21788 It
21789 also
21790 dispenses
21791 with
21792 the
21793 next
21794 pointers
21795 that
21796 are
21797 required
21798 by
21799 linked
21800 lists
21801 which
21802 saves
21803 space
21804 Despite
21805 frequent
21806 array
21807 resizing
21808 space
21809 overheads
21810 incurred
21811 by
21812 operating
21813 system
21814 such
21815 as
21816 memory
21817 fragmentation
21818 were
21819 found
21820 to
21821 be
21822 small
21823 An
21824 elaboration
21825 on
21826 this
21827 approach
21828 is
21829 the
21830 so
21831 called
21832 dynamic
21833 perfect
21834 hashing
21835 11
21836 where
21837 a
21838 bucket
21839 that
21840 contains
21841 k
21842 entries
21843 is
21844 organized
21845 as
21846 a
21847 perfect
21848 hash
21849 table
21850 with
21851 k2
21852 slots
21853 While
21854 it
21855 uses
21856 more
21857 memory
21858 n2
21859 slots
21860 for
21861 n
21862 entries
21863 in
21864 the
21865 worst
21866 case
21867 and
21868 n
21869 k
21870 slots
21871 in
21872 the
21873 average
21874 case
21875 this
21876 variant
21877 has
21878 guaranteed
21879 constant
21880 worst
21881 case
21882 lookup
21883 time
21884 and
21885 low
21886 amortized
21887 time
21888 for
21889 insertion
21890 Open
21891 addressing
21892 Hash
21893 collision
21894 resolved
21895 by
21896 open
21897 addressing
21898 with
21899 linear
21900 probing
21901 interval
21902 1
21903 Note
21904 that
21905 Ted
21906 Baker
21907 has
21908 a
21909 unique
21910 hash
21911 but
21912 nevertheless
21913 collided
21914 with
21915 Sandra
21916 Dee
21917 that
21918 had
21919 previously
21920 collided
21921 with
21922 John
21923 Smith
21924 In
21925 another
21926 strategy
21927 called
21928 open
21929 addressing
21930 all
21931 entry
21932 records
21933 are
21934 stored
21935 in
21936 the
21937 bucket
21938 array
21939 itself
21940 When
21941 a
21942 new
21943 entry
21944 has
21945 to
21946 be
21947 inserted
21948 the
21949 buckets
21950 are
21951 examined
21952 starting
21953 with
21954 the
21955 hashed
21956 to
21957 slot
21958 and
21959 proceeding
21960 in
21961 some
21962 probe
21963 sequence
21964 until
21965 an
21966 unoccupied
21967 slot
21968 is
21969 found
21970 When
21971 searching
21972 for
21973 an
21974 entry
21975 the
21976 buckets
21977 are
21978 scanned
21979 in
21980 the
21981 same
21982 sequence
21983 until
21984 either
21985 the
21986 target
21987 record
21988 is
21989 found
21990 or
21991 an
21992 unused
21993 array
21994 slot
21995 is
21996 found
21997 which
21998 indicates
21999 that
22000 there
22001 is
22002 no
22003 such
22004 key
22005 in
22006 the
22007 table12
22008 The
22009 name
22010 open
22011 addressing
22012 refers
22013 to
22014 the
22015 fact
22016 that
22017 the
22018 location
22019 address
22020 of
22021 the
22022 item
22023 is
22024 not
22025 determined
22026 by
22027 its
22028 hash
22029 value
22030 This
22031 method
22032 is
22033 also
22034 called
22035 closed
22036 hashing
22037 it
22038 should
22039 not
22040 be
22041 confused
22042 with
22043 open
22044 hashing
22045 or
22046 closed
22047 addressing
22048 that
22049 usually
22050 mean
22051 separate
22052 chaining
22053 Well
22054 known
22055 probe
22056 sequences
22057 include
22058 Linear
22059 probing
22060 in
22061 which
22062 the
22063 interval
22064 between
22065 probes
22066 is
22067 fixed
22068 usually
22069 1
22070 Quadratic
22071 probing
22072 in
22073 which
22074 the
22075 interval
22076 between
22077 probes
22078 is
22079 increased
22080 by
22081 adding
22082 the
22083 successive
22084 outputs
22085 of
22086 a
22087 quadratic
22088 polynomial
22089 to
22090 the
22091 starting
22092 value
22093 given
22094 by
22095 the
22096 original
22097 hash
22098 computation
22099 Double
22100 hashing
22101 in
22102 which
22103 the
22104 interval
22105 between
22106 probes
22107 is
22108 computed
22109 by
22110 another
22111 hash
22112 function
22113 A
22114 drawback
22115 of
22116 all
22117 these
22118 open
22119 addressing
22120 schemes
22121 is
22122 that
22123 the
22124 number
22125 of
22126 stored
22127 entries
22128 cannot
22129 exceed
22130 the
22131 number
22132 of
22133 slots
22134 in
22135 the
22136 bucket
22137 array
22138 In
22139 fact
22140 even
22141 with
22142 good
22143 hash
22144 functions
22145 their
22146 performance
22147 dramatically
22148 degrades
22149 when
22150 the
22151 load
22152 factor
22153 grows
22154 beyond
22155 07
22156 or
22157 so
22158 For
22159 many
22160 applications
22161 these
22162 restrictions
22163 mandate
22164 the
22165 use
22166 of
22167 dynamic
22168 resizing
22169 with
22170 its
22171 attendant
22172 costs
22173 Open
22174 addressing
22175 schemes
22176 also
22177 put
22178 more
22179 stringent
22180 requirements
22181 on
22182 the
22183 hash
22184 function
22185 besides
22186 distributing
22187 the
22188 keys
22189 more
22190 uniformly
22191 over
22192 the
22193 buckets
22194 the
22195 function
22196 must
22197 also
22198 minimize
22199 the
22200 clustering
22201 of
22202 hash
22203 values
22204 that
22205 are
22206 consecutive
22207 in
22208 the
22209 probe
22210 order
22211 Using
22212 separate
22213 chaining
22214 the
22215 only
22216 concern
22217 is
22218 that
22219 too
22220 many
22221 objects
22222 map
22223 to
22224 the
22225 same
22226 hash
22227 value
22228 whether
22229 they
22230 are
22231 adjacent
22232 or
22233 nearby
22234 is
22235 completely
22236 irrelevant
22237 Open
22238 addressing
22239 only
22240 saves
22241 memory
22242 if
22243 the
22244 entries
22245 are
22246 small
22247 less
22248 than
22249 four
22250 times
22251 the
22252 size
22253 of
22254 a
22255 pointer
22256 and
22257 the
22258 load
22259 factor
22260 is
22261 not
22262 too
22263 small
22264 If
22265 the
22266 load
22267 factor
22268 is
22269 close
22270 to
22271 zero
22272 that
22273 is
22274 there
22275 are
22276 far
22277 more
22278 buckets
22279 than
22280 stored
22281 entries
22282 open
22283 addressing
22284 is
22285 wasteful
22286 even
22287 if
22288 each
22289 entry
22290 is
22291 just
22292 two
22293 words
22294 This
22295 graph
22296 compares
22297 the
22298 average
22299 number
22300 of
22301 cache
22302 misses
22303 required
22304 to
22305 look
22306 up
22307 elements
22308 in
22309 tables
22310 with
22311 chaining
22312 and
22313 linear
22314 probing
22315 As
22316 the
22317 table
22318 passes
22319 the
22320 80
22321 full
22322 mark
22323 linear
22324 probings
22325 performance
22326 drastically
22327 degrades
22328 Open
22329 addressing
22330 avoids
22331 the
22332 time
22333 overhead
22334 of
22335 allocating
22336 each
22337 new
22338 entry
22339 record
22340 and
22341 can
22342 be
22343 implemented
22344 even
22345 in
22346 the
22347 absence
22348 of
22349 a
22350 memory
22351 allocator
22352 It
22353 also
22354 avoids
22355 the
22356 extra
22357 indirection
22358 required
22359 to
22360 access
22361 the
22362 first
22363 entry
22364 of
22365 each
22366 bucket
22367 that
22368 is
22369 usually
22370 the
22371 only
22372 one
22373 It
22374 also
22375 has
22376 better
22377 locality
22378 of
22379 reference
22380 particularly
22381 with
22382 linear
22383 probing
22384 With
22385 small
22386 record
22387 sizes
22388 these
22389 factors
22390 can
22391 yield
22392 better
22393 performance
22394 than
22395 chaining
22396 particularly
22397 for
22398 lookups
22399 Hash
22400 tables
22401 with
22402 open
22403 addressing
22404 are
22405 also
22406 easier
22407 to
22408 serialize
22409 because
22410 they
22411 do
22412 not
22413 use
22414 pointers
22415 On
22416 the
22417 other
22418 hand
22419 normal
22420 open
22421 addressing
22422 is
22423 a
22424 poor
22425 choice
22426 for
22427 large
22428 elements
22429 because
22430 these
22431 elements
22432 fill
22433 entire
22434 CPU
22435 cache
22436 lines
22437 negating
22438 the
22439 cache
22440 advantage
22441 and
22442 a
22443 large
22444 amount
22445 of
22446 space
22447 is
22448 wasted
22449 on
22450 large
22451 empty
22452 table
22453 slots
22454 If
22455 the
22456 open
22457 addressing
22458 table
22459 only
22460 stores
22461 references
22462 to
22463 elements
22464 external
22465 storage
22466 it
22467 uses
22468 space
22469 comparable
22470 to
22471 chaining
22472 even
22473 for
22474 large
22475 records
22476 but
22477 loses
22478 its
22479 speed
22480 advantage
22481 Generally
22482 speaking
22483 open
22484 addressing
22485 is
22486 better
22487 used
22488 for
22489 hash
22490 tables
22491 with
22492 small
22493 records
22494 that
22495 can
22496 be
22497 stored
22498 within
22499 the
22500 table
22501 internal
22502 storage
22503 and
22504 fit
22505 in
22506 a
22507 cache
22508 line
22509 They
22510 are
22511 particularly
22512 suitable
22513 for
22514 elements
22515 of
22516 one
22517 word
22518 or
22519 less
22520 If
22521 the
22522 table
22523 is
22524 expected
22525 to
22526 have
22527 a
22528 high
22529 load
22530 factor
22531 the
22532 records
22533 are
22534 large
22535 or
22536 the
22537 data
22538 is
22539 variable
22540 sized
22541 chained
22542 hash
22543 tables
22544 often
22545 perform
22546 as
22547 well
22548 or
22549 better
22550 Ultimately
22551 used
22552 sensibly
22553 any
22554 kind
22555 of
22556 hash
22557 table
22558 algorithm
22559 is
22560 usually
22561 fast
22562 enough
22563 and
22564 the
22565 percentage
22566 of
22567 a
22568 calculation
22569 spent
22570 in
22571 hash
22572 table
22573 code
22574 is
22575 low
22576 Memory
22577 usage
22578 is
22579 rarely
22580 considered
22581 excessive
22582 Therefore
22583 in
22584 most
22585 cases
22586 the
22587 differences
22588 between
22589 these
22590 algorithms
22591 are
22592 marginal
22593 and
22594 other
22595 considerations
22596 typically
22597 come
22598 into
22599 play
22600 Coalesced
22601 hashing
22602 A
22603 hybrid
22604 of
22605 chaining
22606 and
22607 open
22608 addressing
22609 coalesced
22610 hashing
22611 links
22612 together
22613 chains
22614 of
22615 nodes
22616 within
22617 the
22618 table
22619 itself12
22620 Like
22621 open
22622 addressing
22623 it
22624 achieves
22625 space
22626 usage
22627 and
22628 somewhat
22629 diminished
22630 cache
22631 advantages
22632 over
22633 chaining
22634 Like
22635 chaining
22636 it
22637 does
22638 not
22639 exhibit
22640 clustering
22641 effects
22642 in
22643 fact
22644 the
22645 table
22646 can
22647 be
22648 efficiently
22649 filled
22650 to
22651 a
22652 high
22653 density
22654 Unlike
22655 chaining
22656 it
22657 cannot
22658 have
22659 more
22660 elements
22661 than
22662 table
22663 slots
22664 Cuckoo
22665 hashing
22666 Another
22667 alternative
22668 open
22669 addressing
22670 solution
22671 is
22672 cuckoo
22673 hashing
22674 which
22675 ensures
22676 constant
22677 lookup
22678 time
22679 in
22680 the
22681 worst
22682 case
22683 and
22684 constant
22685 amortized
22686 time
22687 for
22688 insertions
22689 and
22690 deletions
22691 It
22692 uses
22693 two
22694 or
22695 more
22696 hash
22697 functions
22698 which
22699 means
22700 any
22701 key
22702 value
22703 pair
22704 could
22705 be
22706 in
22707 two
22708 or
22709 more
22710 locations
22711 For
22712 lookup
22713 the
22714 first
22715 hash
22716 function
22717 is
22718 used
22719 if
22720 the
22721 key
22722 value
22723 is
22724 not
22725 found
22726 then
22727 the
22728 second
22729 hash
22730 function
22731 is
22732 used
22733 and
22734 so
22735 on
22736 If
22737 a
22738 collision
22739 happens
22740 during
22741 insertion
22742 then
22743 the
22744 key
22745 is
22746 re
22747 hashed
22748 with
22749 the
22750 second
22751 hash
22752 function
22753 to
22754 map
22755 it
22756 to
22757 another
22758 bucket
22759 If
22760 all
22761 hash
22762 functions
22763 are
22764 used
22765 and
22766 there
22767 is
22768 still
22769 a
22770 collision
22771 then
22772 the
22773 key
22774 it
22775 collided
22776 with
22777 is
22778 removed
22779 to
22780 make
22781 space
22782 for
22783 the
22784 new
22785 key
22786 and
22787 the
22788 old
22789 key
22790 is
22791 re
22792 hashed
22793 with
22794 one
22795 of
22796 the
22797 other
22798 hash
22799 functions
22800 which
22801 maps
22802 it
22803 to
22804 another
22805 bucket
22806 If
22807 that
22808 location
22809 also
22810 results
22811 in
22812 a
22813 collision
22814 then
22815 the
22816 process
22817 repeats
22818 until
22819 there
22820 is
22821 no
22822 collision
22823 or
22824 the
22825 process
22826 traverses
22827 all
22828 the
22829 buckets
22830 at
22831 which
22832 point
22833 the
22834 table
22835 is
22836 resized
22837 By
22838 combining
22839 multiple
22840 hash
22841 functions
22842 with
22843 multiple
22844 cells
22845 per
22846 bucket
22847 very
22848 high
22849 space
22850 utilisation
22851 can
22852 be
22853 achieved
22854 Hopscotch
22855 hashing
22856 Another
22857 alternative
22858 open
22859 addressing
22860 solution
22861 is
22862 hopscotch
22863 hashing
22864 13
22865 which
22866 combines
22867 the
22868 approaches
22869 of
22870 cuckoo
22871 hashing
22872 and
22873 linear
22874 probing
22875 yet
22876 seems
22877 in
22878 general
22879 to
22880 avoid
22881 their
22882 limitations
22883 In
22884 particular
22885 it
22886 works
22887 well
22888 even
22889 when
22890 the
22891 load
22892 factor
22893 grows
22894 beyond
22895 09
22896 The
22897 algorithm
22898 is
22899 well
22900 suited
22901 for
22902 implementing
22903 a
22904 resizable
22905 concurrent
22906 hash
22907 table
22908 The
22909 hopscotch
22910 hashing
22911 algorithm
22912 works
22913 by
22914 defining
22915 a
22916 neighborhood
22917 of
22918 buckets
22919 near
22920 the
22921 original
22922 hashed
22923 bucket
22924 where
22925 a
22926 given
22927 entry
22928 is
22929 always
22930 found
22931 Thus
22932 search
22933 is
22934 limited
22935 to
22936 the
22937 number
22938 of
22939 entries
22940 in
22941 this
22942 neighborhood
22943 which
22944 is
22945 logarithmic
22946 in
22947 the
22948 worst
22949 case
22950 constant
22951 on
22952 average
22953 and
22954 with
22955 proper
22956 alignment
22957 of
22958 the
22959 neighborhood
22960 typically
22961 requires
22962 one
22963 cache
22964 miss
22965 When
22966 inserting
22967 an
22968 entry
22969 one
22970 first
22971 attempts
22972 to
22973 add
22974 it
22975 to
22976 a
22977 bucket
22978 in
22979 the
22980 neighborhood
22981 However
22982 if
22983 all
22984 buckets
22985 in
22986 this
22987 neighborhood
22988 are
22989 occupied
22990 the
22991 algorithm
22992 traverses
22993 buckets
22994 in
22995 sequence
22996 until
22997 an
22998 open
22999 slot
23000 an
23001 unoccupied
23002 bucket
23003 is
23004 found
23005 as
23006 in
23007 linear
23008 probing
23009 At
23010 that
23011 point
23012 since
23013 the
23014 empty
23015 bucket
23016 is
23017 outside
23018 the
23019 neighborhood
23020 items
23021 are
23022 repeatedly
23023 displaced
23024 in
23025 a
23026 sequence
23027 of
23028 hops
23029 This
23030 is
23031 similar
23032 to
23033 cuckoo
23034 hashing
23035 but
23036 with
23037 the
23038 difference
23039 that
23040 in
23041 this
23042 case
23043 the
23044 empty
23045 slot
23046 is
23047 being
23048 moved
23049 into
23050 the
23051 neighborhood
23052 instead
23053 of
23054 items
23055 being
23056 moved
23057 out
23058 with
23059 the
23060 hope
23061 of
23062 eventually
23063 finding
23064 an
23065 empty
23066 slot
23067 Each
23068 hop
23069 brings
23070 the
23071 open
23072 slot
23073 closer
23074 to
23075 the
23076 original
23077 neighborhood
23078 without
23079 invalidating
23080 the
23081 neighborhood
23082 property
23083 of
23084 any
23085 of
23086 the
23087 buckets
23088 along
23089 the
23090 way
23091 In
23092 the
23093 end
23094 the
23095 open
23096 slot
23097 has
23098 been
23099 moved
23100 into
23101 the
23102 neighborhood
23103 and
23104 the
23105 entry
23106 being
23107 inserted
23108 can
23109 be
23110 added
23111 to
23112 it
23113 Robin
23114 Hood
23115 hashing
23116 One
23117 interesting
23118 variation
23119 on
23120 double
23121 hashing
23122 collision
23123 resolution
23124 is
23125 Robin
23126 Hood
23127 hashing1415
23128 The
23129 idea
23130 is
23131 that
23132 a
23133 new
23134 key
23135 may
23136 displace
23137 a
23138 key
23139 already
23140 inserted
23141 if
23142 its
23143 probe
23144 count
23145 is
23146 larger
23147 than
23148 that
23149 of
23150 the
23151 key
23152 at
23153 the
23154 current
23155 position
23156 The
23157 net
23158 effect
23159 of
23160 this
23161 is
23162 that
23163 it
23164 reduces
23165 worst
23166 case
23167 search
23168 times
23169 in
23170 the
23171 table
23172 This
23173 is
23174 similar
23175 to
23176 ordered
23177 hash
23178 tables16
23179 except
23180 that
23181 the
23182 criterion
23183 for
23184 bumping
23185 a
23186 key
23187 does
23188 not
23189 depend
23190 on
23191 a
23192 direct
23193 relationship
23194 between
23195 the
23196 keys
23197 Since
23198 both
23199 the
23200 worst
23201 case
23202 and
23203 the
23204 variation
23205 in
23206 the
23207 number
23208 of
23209 probes
23210 is
23211 reduced
23212 dramatically
23213 an
23214 interesting
23215 variation
23216 is
23217 to
23218 probe
23219 the
23220 table
23221 starting
23222 at
23223 the
23224 expected
23225 successful
23226 probe
23227 value
23228 and
23229 then
23230 expand
23231 from
23232 that
23233 position
23234 in
23235 both
23236 directions17
23237 External
23238 Robin
23239 Hashing
23240 is
23241 an
23242 extension
23243 of
23244 this
23245 algorithm
23246 where
23247 the
23248 table
23249 is
23250 stored
23251 in
23252 an
23253 external
23254 file
23255 and
23256 each
23257 table
23258 position
23259 corresponds
23260 to
23261 a
23262 fixed
23263 sized
23264 page
23265 or
23266 bucket
23267 with
23268 B
23269 records18
23270 2
23271 choice
23272 hashing
23273 2
23274 choice
23275 hashing
23276 employs
23277 2
23278 different
23279 hash
23280 functions
23281 h1x
23282 and
23283 h2x
23284 for
23285 the
23286 hash
23287 table
23288 Both
23289 hash
23290 functions
23291 are
23292 used
23293 to
23294 compute
23295 two
23296 table
23297 locations
23298 When
23299 an
23300 object
23301 is
23302 inserted
23303 in
23304 the
23305 table
23306 then
23307 it
23308 is
23309 placed
23310 in
23311 the
23312 table
23313 location
23314 that
23315 contains
23316 fewer
23317 objects
23318 with
23319 the
23320 default
23321 being
23322 the
23323 h1x
23324 table
23325 location
23326 if
23327 there
23328 is
23329 equality
23330 in
23331 bucket
23332 size
23333 2
23334 choice
23335 hashing
23336 employs
23337 the
23338 principle
23339 of
23340 the
23341 power
23342 of
23343 two
23344 choices19
23345 Dynamic
23346 resizing
23347 The
23348 good
23349 functioning
23350 of
23351 a
23352 hash
23353 table
23354 depends
23355 on
23356 the
23357 fact
23358 that
23359 the
23360 table
23361 size
23362 is
23363 proportional
23364 to
23365 the
23366 number
23367 of
23368 entries
23369 With
23370 a
23371 fixed
23372 size
23373 and
23374 the
23375 common
23376 structures
23377 it
23378 is
23379 similar
23380 to
23381 linear
23382 search
23383 except
23384 with
23385 a
23386 better
23387 constant
23388 factor
23389 In
23390 some
23391 cases
23392 the
23393 number
23394 of
23395 entries
23396 may
23397 be
23398 definitely
23399 known
23400 in
23401 advance
23402 for
23403 example
23404 keywords
23405 in
23406 a
23407 language
23408 More
23409 commonly
23410 this
23411 is
23412 not
23413 known
23414 for
23415 sure
23416 if
23417 only
23418 due
23419 to
23420 later
23421 changes
23422 in
23423 code
23424 and
23425 data
23426 It
23427 is
23428 one
23429 serious
23430 although
23431 common
23432 mistake
23433 to
23434 not
23435 provide
23436 any
23437 way
23438 for
23439 the
23440 table
23441 to
23442 resize
23443 A
23444 general
23445 purpose
23446 hash
23447 table
23448 class
23449 will
23450 almost
23451 always
23452 have
23453 some
23454 way
23455 to
23456 resize
23457 and
23458 it
23459 is
23460 good
23461 practice
23462 even
23463 for
23464 simple
23465 custom
23466 tables
23467 An
23468 implementation
23469 should
23470 check
23471 the
23472 load
23473 factor
23474 and
23475 do
23476 something
23477 if
23478 it
23479 becomes
23480 too
23481 large
23482 this
23483 needs
23484 to
23485 be
23486 done
23487 only
23488 on
23489 inserts
23490 since
23491 that
23492 is
23493 the
23494 only
23495 thing
23496 that
23497 would
23498 increase
23499 it
23500 To
23501 keep
23502 the
23503 load
23504 factor
23505 under
23506 a
23507 certain
23508 limit
23509 eg
23510 under
23511 3
23512 4
23513 many
23514 table
23515 implementations
23516 expand
23517 the
23518 table
23519 when
23520 items
23521 are
23522 inserted
23523 For
23524 example
23525 in
23526 Javas
23527 HashMap
23528 class
23529 the
23530 default
23531 load
23532 factor
23533 threshold
23534 for
23535 table
23536 expansion
23537 is
23538 075
23539 and
23540 in
23541 Pythons
23542 dict
23543 table
23544 size
23545 is
23546 resized
23547 when
23548 load
23549 factor
23550 is
23551 greater
23552 than
23553 2
23554 3
23555 Since
23556 buckets
23557 are
23558 usually
23559 implemented
23560 on
23561 top
23562 of
23563 a
23564 dynamic
23565 array
23566 and
23567 any
23568 constant
23569 proportion
23570 for
23571 resizing
23572 greater
23573 than
23574 1
23575 will
23576 keep
23577 the
23578 load
23579 factor
23580 under
23581 the
23582 desired
23583 limit
23584 the
23585 exact
23586 choice
23587 of
23588 the
23589 constant
23590 is
23591 determined
23592 by
23593 the
23594 same
23595 space
23596 time
23597 tradeoff
23598 as
23599 for
23600 dynamic
23601 arrays
23602 Resizing
23603 is
23604 accompanied
23605 by
23606 a
23607 full
23608 or
23609 incremental
23610 table
23611 rehash
23612 whereby
23613 existing
23614 items
23615 are
23616 mapped
23617 to
23618 new
23619 bucket
23620 locations
23621 To
23622 limit
23623 the
23624 proportion
23625 of
23626 memory
23627 wasted
23628 due
23629 to
23630 empty
23631 buckets
23632 some
23633 implementations
23634 also
23635 shrink
23636 the
23637 size
23638 of
23639 the
23640 table
23641 followed
23642 by
23643 a
23644 rehash
23645 when
23646 items
23647 are
23648 deleted
23649 From
23650 the
23651 point
23652 of
23653 space
23654 time
23655 tradeoffs
23656 this
23657 operation
23658 is
23659 similar
23660 to
23661 the
23662 deallocation
23663 in
23664 dynamic
23665 arrays
23666 Resizing
23667 by
23668 copying
23669 all
23670 entries
23671 A
23672 common
23673 approach
23674 is
23675 to
23676 automatically
23677 trigger
23678 a
23679 complete
23680 resizing
23681 when
23682 the
23683 load
23684 factor
23685 exceeds
23686 some
23687 threshold
23688 rmax
23689 Then
23690 a
23691 new
23692 larger
23693 table
23694 is
23695 allocated
23696 all
23697 the
23698 entries
23699 of
23700 the
23701 old
23702 table
23703 are
23704 removed
23705 and
23706 inserted
23707 into
23708 this
23709 new
23710 table
23711 and
23712 the
23713 old
23714 table
23715 is
23716 returned
23717 to
23718 the
23719 free
23720 storage
23721 pool
23722 Symmetrically
23723 when
23724 the
23725 load
23726 factor
23727 falls
23728 below
23729 a
23730 second
23731 threshold
23732 rmin
23733 all
23734 entries
23735 are
23736 moved
23737 to
23738 a
23739 new
23740 smaller
23741 table
23742 If
23743 the
23744 table
23745 size
23746 increases
23747 or
23748 decreases
23749 by
23750 a
23751 fixed
23752 percentage
23753 at
23754 each
23755 expansion
23756 the
23757 total
23758 cost
23759 of
23760 these
23761 resizings
23762 amortized
23763 over
23764 all
23765 insert
23766 and
23767 delete
23768 operations
23769 is
23770 still
23771 a
23772 constant
23773 independent
23774 of
23775 the
23776 number
23777 of
23778 entries
23779 n
23780 and
23781 of
23782 the
23783 number
23784 m
23785 of
23786 operations
23787 performed
23788 For
23789 example
23790 consider
23791 a
23792 table
23793 that
23794 was
23795 created
23796 with
23797 the
23798 minimum
23799 possible
23800 size
23801 and
23802 is
23803 doubled
23804 each
23805 time
23806 the
23807 load
23808 ratio
23809 exceeds
23810 some
23811 threshold
23812 If
23813 m
23814 elements
23815 are
23816 inserted
23817 into
23818 that
23819 table
23820 the
23821 total
23822 number
23823 of
23824 extra
23825 re
23826 insertions
23827 that
23828 occur
23829 in
23830 all
23831 dynamic
23832 resizings
23833 of
23834 the
23835 table
23836 is
23837 at
23838 most
23839 m
23840 1
23841 In
23842 other
23843 words
23844 dynamic
23845 resizing
23846 roughly
23847 doubles
23848 the
23849 cost
23850 of
23851 each
23852 insert
23853 or
23854 delete
23855 operation
23856 Incremental
23857 resizing
23858 Some
23859 hash
23860 table
23861 implementations
23862 notably
23863 in
23864 real
23865 time
23866 systems
23867 cannot
23868 pay
23869 the
23870 price
23871 of
23872 enlarging
23873 the
23874 hash
23875 table
23876 all
23877 at
23878 once
23879 because
23880 it
23881 may
23882 interrupt
23883 time
23884 critical
23885 operations
23886 If
23887 one
23888 cannot
23889 avoid
23890 dynamic
23891 resizing
23892 a
23893 solution
23894 is
23895 to
23896 perform
23897 the
23898 resizing
23899 gradually
23900 During
23901 the
23902 resize
23903 allocate
23904 the
23905 new
23906 hash
23907 table
23908 but
23909 keep
23910 the
23911 old
23912 table
23913 unchanged
23914 In
23915 each
23916 lookup
23917 or
23918 delete
23919 operation
23920 check
23921 both
23922 tables
23923 Perform
23924 insertion
23925 operations
23926 only
23927 in
23928 the
23929 new
23930 table
23931 At
23932 each
23933 insertion
23934 also
23935 move
23936 r
23937 elements
23938 from
23939 the
23940 old
23941 table
23942 to
23943 the
23944 new
23945 table
23946 When
23947 all
23948 elements
23949 are
23950 removed
23951 from
23952 the
23953 old
23954 table
23955 deallocate
23956 it
23957 To
23958 ensure
23959 that
23960 the
23961 old
23962 table
23963 is
23964 completely
23965 copied
23966 over
23967 before
23968 the
23969 new
23970 table
23971 itself
23972 needs
23973 to
23974 be
23975 enlarged
23976 it
23977 is
23978 necessary
23979 to
23980 increase
23981 the
23982 size
23983 of
23984 the
23985 table
23986 by
23987 a
23988 factor
23989 of
23990 at
23991 least
23992 r
23993 1
23994 r
23995 during
23996 resizing
23997 Monotonic
23998 keys
23999 If
24000 it
24001 is
24002 known
24003 that
24004 key
24005 values
24006 will
24007 always
24008 increase
24009 or
24010 decrease
24011 monotonically
24012 then
24013 a
24014 variation
24015 of
24016 consistent
24017 hashing
24018 can
24019 be
24020 achieved
24021 by
24022 keeping
24023 a
24024 list
24025 of
24026 the
24027 single
24028 most
24029 recent
24030 key
24031 value
24032 at
24033 each
24034 hash
24035 table
24036 resize
24037 operation
24038 Upon
24039 lookup
24040 keys
24041 that
24042 fall
24043 in
24044 the
24045 ranges
24046 defined
24047 by
24048 these
24049 list
24050 entries
24051 are
24052 directed
24053 to
24054 the
24055 appropriate
24056 hash
24057 function
24058 and
24059 indeed
24060 hash
24061 table
24062 both
24063 of
24064 which
24065 can
24066 be
24067 different
24068 for
24069 each
24070 range
24071 Since
24072 it
24073 is
24074 common
24075 to
24076 grow
24077 the
24078 overall
24079 number
24080 of
24081 entries
24082 by
24083 doubling
24084 there
24085 will
24086 only
24087 be
24088 OlgN
24089 ranges
24090 to
24091 check
24092 and
24093 binary
24094 search
24095 time
24096 for
24097 the
24098 redirection
24099 would
24100 be
24101 OlglgN
24102 As
24103 with
24104 consistent
24105 hashing
24106 this
24107 approach
24108 guarantees
24109 that
24110 any
24111 keys
24112 hash
24113 once
24114 issued
24115 will
24116 never
24117 change
24118 even
24119 when
24120 the
24121 hash
24122 table
24123 is
24124 later
24125 grown
24126 Other
24127 solutions
24128 Linear
24129 hashing20
24130 is
24131 a
24132 hash
24133 table
24134 algorithm
24135 that
24136 permits
24137 incremental
24138 hash
24139 table
24140 expansion
24141 It
24142 is
24143 implemented
24144 using
24145 a
24146 single
24147 hash
24148 table
24149 but
24150 with
24151 two
24152 possible
24153 look
24154 up
24155 functions
24156 Another
24157 way
24158 to
24159 decrease
24160 the
24161 cost
24162 of
24163 table
24164 resizing
24165 is
24166 to
24167 choose
24168 a
24169 hash
24170 function
24171 in
24172 such
24173 a
24174 way
24175 that
24176 the
24177 hashes
24178 of
24179 most
24180 values
24181 do
24182 not
24183 change
24184 when
24185 the
24186 table
24187 is
24188 resized
24189 This
24190 approach
24191 called
24192 consistent
24193 hashing
24194 is
24195 prevalent
24196 in
24197 disk
24198 based
24199 and
24200 distributed
24201 hashes
24202 where
24203 rehashing
24204 is
24205 prohibitively
24206 costly
24207 Performance
24208 analysis
24209 In
24210 the
24211 simplest
24212 model
24213 the
24214 hash
24215 function
24216 is
24217 completely
24218 unspecified
24219 and
24220 the
24221 table
24222 does
24223 not
24224 resize
24225 For
24226 the
24227 best
24228 possible
24229 choice
24230 of
24231 hash
24232 function
24233 a
24234 table
24235 of
24236 size
24237 k
24238 with
24239 open
24240 addressing
24241 has
24242 no
24243 collisions
24244 and
24245 holds
24246 up
24247 to
24248 k
24249 elements
24250 with
24251 a
24252 single
24253 comparison
24254 for
24255 successful
24256 lookup
24257 and
24258 a
24259 table
24260 of
24261 size
24262 k
24263 with
24264 chaining
24265 and
24266 n
24267 keys
24268 has
24269 the
24270 minimum
24271 max0
24272 n
24273 k
24274 collisions
24275 and
24276 O1
24277 n
24278 k
24279 comparisons
24280 for
24281 lookup
24282 For
24283 the
24284 worst
24285 choice
24286 of
24287 hash
24288 function
24289 every
24290 insertion
24291 causes
24292 a
24293 collision
24294 and
24295 hash
24296 tables
24297 degenerate
24298 to
24299 linear
24300 search
24301 with
24302 Ωn
24303 amortized
24304 comparisons
24305 per
24306 insertion
24307 and
24308 up
24309 to
24310 n
24311 comparisons
24312 for
24313 a
24314 successful
24315 lookup
24316 Adding
24317 rehashing
24318 to
24319 this
24320 model
24321 is
24322 straightforward
24323 As
24324 in
24325 a
24326 dynamic
24327 array
24328 geometric
24329 resizing
24330 by
24331 a
24332 factor
24333 of
24334 b
24335 implies
24336 that
24337 only
24338 n
24339 bi
24340 keys
24341 are
24342 inserted
24343 i
24344 or
24345 more
24346 times
24347 so
24348 that
24349 the
24350 total
24351 number
24352 of
24353 insertions
24354 is
24355 bounded
24356 above
24357 by
24358 bn
24359 b
24360 1
24361 which
24362 is
24363 On
24364 By
24365 using
24366 rehashing
24367 to
24368 maintain
24369 n
24370 k
24371 tables
24372 using
24373 both
24374 chaining
24375 and
24376 open
24377 addressing
24378 can
24379 have
24380 unlimited
24381 elements
24382 and
24383 perform
24384 successful
24385 lookup
24386 in
24387 a
24388 single
24389 comparison
24390 for
24391 the
24392 best
24393 choice
24394 of
24395 hash
24396 function
24397 In
24398 more
24399 realistic
24400 models
24401 the
24402 hash
24403 function
24404 is
24405 a
24406 random
24407 variable
24408 over
24409 a
24410 probability
24411 distribution
24412 of
24413 hash
24414 functions
24415 and
24416 performance
24417 is
24418 computed
24419 on
24420 average
24421 over
24422 the
24423 choice
24424 of
24425 hash
24426 function
24427 When
24428 this
24429 distribution
24430 is
24431 uniform
24432 the
24433 assumption
24434 is
24435 called
24436 simple
24437 uniform
24438 hashing
24439 and
24440 it
24441 can
24442 be
24443 shown
24444 that
24445 hashing
24446 with
24447 chaining
24448 requires
24449 Θ1
24450 n
24451 k
24452 comparisons
24453 on
24454 average
24455 for
24456 an
24457 unsuccessful
24458 lookup
24459 and
24460 hashing
24461 with
24462 open
24463 addressing
24464 requires
24465 Θ1
24466 1
24467 n
24468 k21
24469 Both
24470 these
24471 bounds
24472 are
24473 constant
24474 if
24475 we
24476 maintain
24477 n
24478 k
24479 c
24480 using
24481 table
24482 resizing
24483 where
24484 c
24485 is
24486 a
24487 fixed
24488 constant
24489 less
24490 than
24491 1
24492 Features
24493 Advantages
24494 The
24495 main
24496 advantage
24497 of
24498 hash
24499 tables
24500 over
24501 other
24502 table
24503 data
24504 structures
24505 is
24506 speed
24507 This
24508 advantage
24509 is
24510 more
24511 apparent
24512 when
24513 the
24514 number
24515 of
24516 entries
24517 is
24518 large
24519 Hash
24520 tables
24521 are
24522 particularly
24523 efficient
24524 when
24525 the
24526 maximum
24527 number
24528 of
24529 entries
24530 can
24531 be
24532 predicted
24533 in
24534 advance
24535 so
24536 that
24537 the
24538 bucket
24539 array
24540 can
24541 be
24542 allocated
24543 once
24544 with
24545 the
24546 optimum
24547 size
24548 and
24549 never
24550 resized
24551 If
24552 the
24553 set
24554 of
24555 key
24556 value
24557 pairs
24558 is
24559 fixed
24560 and
24561 known
24562 ahead
24563 of
24564 time
24565 so
24566 insertions
24567 and
24568 deletions
24569 are
24570 not
24571 allowed
24572 one
24573 may
24574 reduce
24575 the
24576 average
24577 lookup
24578 cost
24579 by
24580 a
24581 careful
24582 choice
24583 of
24584 the
24585 hash
24586 function
24587 bucket
24588 table
24589 size
24590 and
24591 internal
24592 data
24593 structures
24594 In
24595 particular
24596 one
24597 may
24598 be
24599 able
24600 to
24601 devise
24602 a
24603 hash
24604 function
24605 that
24606 is
24607 collision
24608 free
24609 or
24610 even
24611 perfect
24612 see
24613 below
24614 In
24615 this
24616 case
24617 the
24618 keys
24619 need
24620 not
24621 be
24622 stored
24623 in
24624 the
24625 table
24626 Drawbacks
24627 Although
24628 operations
24629 on
24630 a
24631 hash
24632 table
24633 take
24634 constant
24635 time
24636 on
24637 average
24638 the
24639 cost
24640 of
24641 a
24642 good
24643 hash
24644 function
24645 can
24646 be
24647 significantly
24648 higher
24649 than
24650 the
24651 inner
24652 loop
24653 of
24654 the
24655 lookup
24656 algorithm
24657 for
24658 a
24659 sequential
24660 list
24661 or
24662 search
24663 tree
24664 Thus
24665 hash
24666 tables
24667 are
24668 not
24669 effective
24670 when
24671 the
24672 number
24673 of
24674 entries
24675 is
24676 very
24677 small
24678 However
24679 in
24680 some
24681 cases
24682 the
24683 high
24684 cost
24685 of
24686 computing
24687 the
24688 hash
24689 function
24690 can
24691 be
24692 mitigated
24693 by
24694 saving
24695 the
24696 hash
24697 value
24698 together
24699 with
24700 the
24701 key
24702 For
24703 certain
24704 string
24705 processing
24706 applications
24707 such
24708 as
24709 spell
24710 checking
24711 hash
24712 tables
24713 may
24714 be
24715 less
24716 efficient
24717 than
24718 tries
24719 finite
24720 automata
24721 or
24722 Judy
24723 arrays
24724 Also
24725 if
24726 each
24727 key
24728 is
24729 represented
24730 by
24731 a
24732 small
24733 enough
24734 number
24735 of
24736 bits
24737 then
24738 instead
24739 of
24740 a
24741 hash
24742 table
24743 one
24744 may
24745 use
24746 the
24747 key
24748 directly
24749 as
24750 the
24751 index
24752 into
24753 an
24754 array
24755 of
24756 values
24757 Note
24758 that
24759 there
24760 are
24761 no
24762 collisions
24763 in
24764 this
24765 case
24766 The
24767 entries
24768 stored
24769 in
24770 a
24771 hash
24772 table
24773 can
24774 be
24775 enumerated
24776 efficiently
24777 at
24778 constant
24779 cost
24780 per
24781 entry
24782 but
24783 only
24784 in
24785 some
24786 pseudo
24787 random
24788 order
24789 Therefore
24790 there
24791 is
24792 no
24793 efficient
24794 way
24795 to
24796 locate
24797 an
24798 entry
24799 whose
24800 key
24801 is
24802 nearest
24803 to
24804 a
24805 given
24806 key
24807 Listing
24808 all
24809 n
24810 entries
24811 in
24812 some
24813 specific
24814 order
24815 generally
24816 requires
24817 a
24818 separate
24819 sorting
24820 step
24821 whose
24822 cost
24823 is
24824 proportional
24825 to
24826 logn
24827 per
24828 entry
24829 In
24830 comparison
24831 ordered
24832 search
24833 trees
24834 have
24835 lookup
24836 and
24837 insertion
24838 cost
24839 proportional
24840 to
24841 logn
24842 but
24843 allow
24844 finding
24845 the
24846 nearest
24847 key
24848 at
24849 about
24850 the
24851 same
24852 cost
24853 and
24854 ordered
24855 enumeration
24856 of
24857 all
24858 entries
24859 at
24860 constant
24861 cost
24862 per
24863 entry
24864 If
24865 the
24866 keys
24867 are
24868 not
24869 stored
24870 because
24871 the
24872 hash
24873 function
24874 is
24875 collision
24876 free
24877 there
24878 may
24879 be
24880 no
24881 easy
24882 way
24883 to
24884 enumerate
24885 the
24886 keys
24887 that
24888 are
24889 present
24890 in
24891 the
24892 table
24893 at
24894 any
24895 given
24896 moment
24897 Although
24898 the
24899 average
24900 cost
24901 per
24902 operation
24903 is
24904 constant
24905 and
24906 fairly
24907 small
24908 the
24909 cost
24910 of
24911 a
24912 single
24913 operation
24914 may
24915 be
24916 quite
24917 high
24918 In
24919 particular
24920 if
24921 the
24922 hash
24923 table
24924 uses
24925 dynamic
24926 resizing
24927 an
24928 insertion
24929 or
24930 deletion
24931 operation
24932 may
24933 occasionally
24934 take
24935 time
24936 proportional
24937 to
24938 the
24939 number
24940 of
24941 entries
24942 This
24943 may
24944 be
24945 a
24946 serious
24947 drawback
24948 in
24949 real
24950 time
24951 or
24952 interactive
24953 applications
24954 Hash
24955 tables
24956 in
24957 general
24958 exhibit
24959 poor
24960 locality
24961 of
24962 reference
24963 that
24964 is
24965 the
24966 data
24967 to
24968 be
24969 accessed
24970 is
24971 distributed
24972 seemingly
24973 at
24974 random
24975 in
24976 memory
24977 Because
24978 hash
24979 tables
24980 cause
24981 access
24982 patterns
24983 that
24984 jump
24985 around
24986 this
24987 can
24988 trigger
24989 microprocessor
24990 cache
24991 misses
24992 that
24993 cause
24994 long
24995 delays
24996 Compact
24997 data
24998 structures
24999 such
25000 as
25001 arrays
25002 searched
25003 with
25004 linear
25005 search
25006 may
25007 be
25008 faster
25009 if
25010 the
25011 table
25012 is
25013 relatively
25014 small
25015 and
25016 keys
25017 are
25018 compact
25019 The
25020 optimal
25021 performance
25022 point
25023 varies
25024 from
25025 system
25026 to
25027 system
25028 Hash
25029 tables
25030 become
25031 quite
25032 inefficient
25033 when
25034 there
25035 are
25036 many
25037 collisions
25038 While
25039 extremely
25040 uneven
25041 hash
25042 distributions
25043 are
25044 extremely
25045 unlikely
25046 to
25047 arise
25048 by
25049 chance
25050 a
25051 malicious
25052 adversary
25053 with
25054 knowledge
25055 of
25056 the
25057 hash
25058 function
25059 may
25060 be
25061 able
25062 to
25063 supply
25064 information
25065 to
25066 a
25067 hash
25068 that
25069 creates
25070 worst
25071 case
25072 behavior
25073 by
25074 causing
25075 excessive
25076 collisions
25077 resulting
25078 in
25079 very
25080 poor
25081 performance
25082 eg
25083 a
25084 denial
25085 of
25086 service
25087 attack22
25088 In
25089 critical
25090 applications
25091 universal
25092 hashing
25093 can
25094 be
25095 used
25096 a
25097 data
25098 structure
25099 with
25100 better
25101 worst
25102 case
25103 guarantees
25104 may
25105 be
25106 preferable23
25107 Uses
25108 Question
25109 book
25110 newsvg
25111 This
25112 section
25113 does
25114 not
25115 cite
25116 any
25117 references
25118 or
25119 sources
25120 Please
25121 help
25122 improve
25123 this
25124 section
25125 by
25126 adding
25127 citations
25128 to
25129 reliable
25130 sources
25131 Unsourced
25132 material
25133 may
25134 be
25135 challenged
25136 and
25137 removed
25138 July
25139 2013
25140 Associative
25141 arrays
25142 Hash
25143 tables
25144 are
25145 commonly
25146 used
25147 to
25148 implement
25149 many
25150 types
25151 of
25152 in
25153 memory
25154 tables
25155 They
25156 are
25157 used
25158 to
25159 implement
25160 associative
25161 arrays
25162 arrays
25163 whose
25164 indices
25165 are
25166 arbitrary
25167 strings
25168 or
25169 other
25170 complicated
25171 objects
25172 especially
25173 in
25174 interpreted
25175 programming
25176 languages
25177 like
25178 Ruby
25179 Python
25180 and
25181 PHP
25182 When
25183 storing
25184 a
25185 new
25186 item
25187 into
25188 a
25189 multimap
25190 and
25191 a
25192 hash
25193 collision
25194 occurs
25195 the
25196 multimap
25197 unconditionally
25198 stores
25199 both
25200 items
25201 When
25202 storing
25203 a
25204 new
25205 item
25206 into
25207 a
25208 typical
25209 associative
25210 array
25211 and
25212 a
25213 hash
25214 collision
25215 occurs
25216 but
25217 the
25218 actual
25219 keys
25220 themselves
25221 are
25222 different
25223 the
25224 associative
25225 array
25226 likewise
25227 stores
25228 both
25229 items
25230 However
25231 if
25232 the
25233 key
25234 of
25235 the
25236 new
25237 item
25238 exactly
25239 matches
25240 the
25241 key
25242 of
25243 an
25244 old
25245 item
25246 the
25247 associative
25248 array
25249 typically
25250 erases
25251 the
25252 old
25253 item
25254 and
25255 overwrites
25256 it
25257 with
25258 the
25259 new
25260 item
25261 so
25262 every
25263 item
25264 in
25265 the
25266 table
25267 has
25268 a
25269 unique
25270 key
25271 Database
25272 indexing
25273 Hash
25274 tables
25275 may
25276 also
25277 be
25278 used
25279 as
25280 disk
25281 based
25282 data
25283 structures
25284 and
25285 database
25286 indices
25287 such
25288 as
25289 in
25290 dbm
25291 although
25292 B
25293 trees
25294 are
25295 more
25296 popular
25297 in
25298 these
25299 applications
25300 Caches
25301 Hash
25302 tables
25303 can
25304 be
25305 used
25306 to
25307 implement
25308 caches
25309 auxiliary
25310 data
25311 tables
25312 that
25313 are
25314 used
25315 to
25316 speed
25317 up
25318 the
25319 access
25320 to
25321 data
25322 that
25323 is
25324 primarily
25325 stored
25326 in
25327 slower
25328 media
25329 In
25330 this
25331 application
25332 hash
25333 collisions
25334 can
25335 be
25336 handled
25337 by
25338 discarding
25339 one
25340 of
25341 the
25342 two
25343 colliding
25344 entries
25345 usually
25346 erasing
25347 the
25348 old
25349 item
25350 that
25351 is
25352 currently
25353 stored
25354 in
25355 the
25356 table
25357 and
25358 overwriting
25359 it
25360 with
25361 the
25362 new
25363 item
25364 so
25365 every
25366 item
25367 in
25368 the
25369 table
25370 has
25371 a
25372 unique
25373 hash
25374 value
25375 Sets
25376 Besides
25377 recovering
25378 the
25379 entry
25380 that
25381 has
25382 a
25383 given
25384 key
25385 many
25386 hash
25387 table
25388 implementations
25389 can
25390 also
25391 tell
25392 whether
25393 such
25394 an
25395 entry
25396 exists
25397 or
25398 not
25399 Those
25400 structures
25401 can
25402 therefore
25403 be
25404 used
25405 to
25406 implement
25407 a
25408 set
25409 data
25410 structure
25411 which
25412 merely
25413 records
25414 whether
25415 a
25416 given
25417 key
25418 belongs
25419 to
25420 a
25421 specified
25422 set
25423 of
25424 keys
25425 In
25426 this
25427 case
25428 the
25429 structure
25430 can
25431 be
25432 simplified
25433 by
25434 eliminating
25435 all
25436 parts
25437 that
25438 have
25439 to
25440 do
25441 with
25442 the
25443 entry
25444 values
25445 Hashing
25446 can
25447 be
25448 used
25449 to
25450 implement
25451 both
25452 static
25453 and
25454 dynamic
25455 sets
25456 Object
25457 representation
25458 Several
25459 dynamic
25460 languages
25461 such
25462 as
25463 Perl
25464 Python
25465 JavaScript
25466 and
25467 Ruby
25468 use
25469 hash
25470 tables
25471 to
25472 implement
25473 objects
25474 In
25475 this
25476 representation
25477 the
25478 keys
25479 are
25480 the
25481 names
25482 of
25483 the
25484 members
25485 and
25486 methods
25487 of
25488 the
25489 object
25490 and
25491 the
25492 values
25493 are
25494 pointers
25495 to
25496 the
25497 corresponding
25498 member
25499 or
25500 method
25501 Unique
25502 data
25503 representation
25504 Hash
25505 tables
25506 can
25507 be
25508 used
25509 by
25510 some
25511 programs
25512 to
25513 avoid
25514 creating
25515 multiple
25516 character
25517 strings
25518 with
25519 the
25520 same
25521 contents
25522 For
25523 that
25524 purpose
25525 all
25526 strings
25527 in
25528 use
25529 by
25530 the
25531 program
25532 are
25533 stored
25534 in
25535 a
25536 single
25537 string
25538 pool
25539 implemented
25540 as
25541 a
25542 hash
25543 table
25544 which
25545 is
25546 checked
25547 whenever
25548 a
25549 new
25550 string
25551 has
25552 to
25553 be
25554 created
25555 This
25556 technique
25557 was
25558 introduced
25559 in
25560 Lisp
25561 interpreters
25562 under
25563 the
25564 name
25565 hash
25566 consing
25567 and
25568 can
25569 be
25570 used
25571 with
25572 many
25573 other
25574 kinds
25575 of
25576 data
25577 expression
25578 trees
25579 in
25580 a
25581 symbolic
25582 algebra
25583 system
25584 records
25585 in
25586 a
25587 database
25588 files
25589 in
25590 a
25591 file
25592 system
25593 binary
25594 decision
25595 diagrams
25596 etc
25597 String
25598 interning
25599 Main
25600 article
25601 String
25602 interning
25603 Implementations
25604 In
25605 programming
25606 languages
25607 Many
25608 programming
25609 languages
25610 provide
25611 hash
25612 table
25613 functionality
25614 either
25615 as
25616 built
25617 in
25618 associative
25619 arrays
25620 or
25621 as
25622 standard
25623 library
25624 modules
25625 In
25626 C
25627 11
25628 for
25629 example
25630 the
25631 unordered
25632 map
25633 class
25634 provides
25635 hash
25636 tables
25637 for
25638 keys
25639 and
25640 values
25641 of
25642 arbitrary
25643 type
25644 In
25645 PHP
25646 5
25647 the
25648 Zend
25649 2
25650 engine
25651 uses
25652 one
25653 of
25654 the
25655 hash
25656 functions
25657 from
25658 Daniel
25659 J
25660 Bernstein
25661 to
25662 generate
25663 the
25664 hash
25665 values
25666 used
25667 in
25668 managing
25669 the
25670 mappings
25671 of
25672 data
25673 pointers
25674 stored
25675 in
25676 a
25677 hash
25678 table
25679 In
25680 the
25681 PHP
25682 source
25683 code
25684 it
25685 is
25686 labelled
25687 as
25688 DJBX33A
25689 Daniel
25690 J
25691 Bernstein
25692 Times
25693 33
25694 with
25695 Addition
25696 Pythons
25697 built
25698 in
25699 hash
25700 table
25701 implementation
25702 in
25703 the
25704 form
25705 of
25706 the
25707 dict
25708 type
25709 as
25710 well
25711 as
25712 Perls
25713 hash
25714 type
25715 are
25716 used
25717 internally
25718 to
25719 implement
25720 namespaces
25721 and
25722 therefore
25723 need
25724 to
25725 pay
25726 more
25727 attention
25728 to
25729 security
25730 ie
25731 collision
25732 attacks
25733 In
25734 the
25735 NET
25736 Framework
25737 support
25738 for
25739 hash
25740 tables
25741 is
25742 provided
25743 via
25744 the
25745 non
25746 generic
25747 Hashtable
25748 and
25749 generic
25750 Dictionary
25751 classes
25752 which
25753 store
25754 key
25755 value
25756 pairs
25757 and
25758 the
25759 generic
25760 HashSet
25761 class
25762 which
25763 stores
25764 only
25765 values
25766 Independent
25767 packages
25768 SparseHash
25769 formerly
25770 Google
25771 SparseHash
25772 An
25773 extremely
25774 memory
25775 efficient
25776 hash
25777 map
25778 implementation
25779 with
25780 only
25781 2
25782 bits
25783 entry
25784 of
25785 overhead
25786 The
25787 SparseHash
25788 library
25789 has
25790 several
25791 C
25792 hash
25793 map
25794 implementations
25795 with
25796 different
25797 performance
25798 characteristics
25799 including
25800 one
25801 that
25802 optimizes
25803 for
25804 memory
25805 use
25806 and
25807 another
25808 that
25809 optimizes
25810 for
25811 speed
25812 Sunrise
25813 DD
25814 An
25815 open
25816 source
25817 C
25818 library
25819 for
25820 hash
25821 table
25822 storage
25823 of
25824 arbitrary
25825 data
25826 objects
25827 with
25828 lock
25829 free
25830 lookups
25831 built
25832 in
25833 reference
25834 counting
25835 and
25836 guaranteed
25837 order
25838 iteration
25839 The
25840 library
25841 can
25842 participate
25843 in
25844 external
25845 reference
25846 counting
25847 systems
25848 or
25849 use
25850 its
25851 own
25852 built
25853 in
25854 reference
25855 counting
25856 It
25857 comes
25858 with
25859 a
25860 variety
25861 of
25862 hash
25863 functions
25864 and
25865 allows
25866 the
25867 use
25868 of
25869 runtime
25870 supplied
25871 hash
25872 functions
25873 via
25874 callback
25875 mechanism
25876 Source
25877 code
25878 is
25879 well
25880 documented
25881 uthash
25882 This
25883 is
25884 an
25885 easy
25886 to
25887 use
25888 hash
25889 table
25890 for
25891 C
25892 structures
25893 History
25894 The
25895 idea
25896 of
25897 hashing
25898 arose
25899 independently
25900 in
25901 different
25902 places
25903 In
25904 January
25905 1953
25906 H
25907 P
25908 Luhn
25909 wrote
25910 an
25911 internal
25912 IBM
25913 memorandum
25914 that
25915 used
25916 hashing
25917 with
25918 chaining24
25919 G
25920 N
25921 Amdahl
25922 E
25923 M
25924 Boehme
25925 N
25926 Rochester
25927 and
25928 Arthur
25929 Samuel
25930 implemented
25931 a
25932 program
25933 using
25934 hashing
25935 at
25936 about
25937 the
25938 same
25939 time
25940 Open
25941 addressing
25942 with
25943 linear
25944 probing
25945 relatively
25946 prime
25947 stepping
25948 is
25949 cr
25950 ed
25951 to
25952 Amdahl
25953 but
25954 Ershov
25955 in
25956 Russia
25957 had
25958 the
25959 same
25960 idea24
25961 See
25962 also
25963 Rabin
25964 Karp
25965 string
25966 search
25967 algorithm
25968 Stable
25969 hashing
25970 Consistent
25971 hashing
25972 Extendible
25973 hashing
25974 Lazy
25975 deletion
25976 Pearson
25977 hashing
25978 Related
25979 data
25980 structures
25981 There
25982 are
25983 several
25984 data
25985 structures
25986 that
25987 use
25988 hash
25989 functions
25990 but
25991 cannot
25992 be
25993 considered
25994 special
25995 cases
25996 of
25997 hash
25998 tables
25999 Bloom
26000 filter
26001 memory
26002 efficient
26003 data
26004 structure
26005 designed
26006 for
26007 constant
26008 time
26009 approximate
26010 lookups
26011 uses
26012 hash
26013 functions
26014 and
26015 can
26016 be
26017 seen
26018 as
26019 an
26020 approximate
26021 hash
26022 table
26023 Distributed
26024 hash
26025 table
26026 DHT
26027 a
26028 resilient
26029 dynamic
26030 table
26031 spread
26032 over
26033 several
26034 nodes
26035 of
26036 a
26037 network
26038 Hash
26039 array
26040 mapped
26041 trie
26042 a
26043 trie
26044 structure
26045 similar
26046 to
26047 the
26048 array
26049 mapped
26050 trie
26051 but
26052 where
26053 each
26054 key
26055 is
26056 hashed
26057 first
26058 A
26059 red
26060 black
26061 tree
26062 is
26063 a
26064 data
26065 structure
26066 which
26067 is
26068 a
26069 type
26070 of
26071 self
26072 balancing
26073 binary
26074 search
26075 tree
26076 Balance
26077 is
26078 preserved
26079 by
26080 painting
26081 each
26082 node
26083 of
26084 the
26085 tree
26086 with
26087 one
26088 of
26089 two
26090 colors
26091 typically
26092 called
26093 red
26094 and
26095 black
26096 in
26097 a
26098 way
26099 that
26100 satisfies
26101 certain
26102 properties
26103 which
26104 collectively
26105 constrain
26106 how
26107 unbalanced
26108 the
26109 tree
26110 can
26111 become
26112 in
26113 the
26114 worst
26115 case
26116 When
26117 the
26118 tree
26119 is
26120 modified
26121 the
26122 new
26123 tree
26124 is
26125 subsequently
26126 rearranged
26127 and
26128 repainted
26129 to
26130 restore
26131 the
26132 coloring
26133 properties
26134 The
26135 properties
26136 are
26137 designed
26138 in
26139 such
26140 a
26141 way
26142 that
26143 this
26144 rearranging
26145 and
26146 recoloring
26147 can
26148 be
26149 performed
26150 efficiently
26151 The
26152 balancing
26153 of
26154 the
26155 tree
26156 is
26157 not
26158 perfect
26159 but
26160 it
26161 is
26162 good
26163 enough
26164 to
26165 allow
26166 it
26167 to
26168 guarantee
26169 searching
26170 in
26171 O
26172 log
26173 n
26174 time
26175 where
26176 n
26177 is
26178 the
26179 total
26180 number
26181 of
26182 elements
26183 in
26184 the
26185 tree
26186 The
26187 insertion
26188 and
26189 deletion
26190 operations
26191 along
26192 with
26193 the
26194 tree
26195 rearrangement
26196 and
26197 recoloring
26198 are
26199 also
26200 performed
26201 in
26202 O
26203 log
26204 n
26205 time
26206 1
26207 Tracking
26208 the
26209 color
26210 of
26211 each
26212 node
26213 requires
26214 only
26215 1
26216 bit
26217 of
26218 information
26219 per
26220 node
26221 because
26222 there
26223 are
26224 only
26225 two
26226 colors
26227 The
26228 tree
26229 does
26230 not
26231 contain
26232 any
26233 other
26234 data
26235 specific
26236 to
26237 its
26238 being
26239 a
26240 red
26241 black
26242 tree
26243 so
26244 its
26245 memory
26246 footprint
26247 is
26248 almost
26249 identical
26250 to
26251 a
26252 classic
26253 uncolored
26254 binary
26255 search
26256 tree
26257 In
26258 many
26259 cases
26260 the
26261 additional
26262 bit
26263 of
26264 information
26265 can
26266 be
26267 stored
26268 at
26269 no
26270 additional
26271 memory
26272 cost
26273 The
26274 original
26275 data
26276 structure
26277 was
26278 invented
26279 in
26280 1972
26281 by
26282 Rudolf
26283 Bayer
26284 2
26285 and
26286 named
26287 symmetric
26288 binary
26289 B
26290 tree
26291 but
26292 acquired
26293 its
26294 modern
26295 name
26296 in
26297 a
26298 paper
26299 in
26300 1978
26301 by
26302 Leonidas
26303 J
26304 Guibas
26305 and
26306 Robert
26307 Sedgewick
26308 entitled
26309 A
26310 Dichromatic
26311 Framework
26312 for
26313 Balanced
26314 Trees
26315 3
26316 The
26317 color
26318 red
26319 was
26320 chosen
26321 because
26322 it
26323 was
26324 the
26325 best
26326 looking
26327 color
26328 produced
26329 by
26330 the
26331 color
26332 laser
26333 printer
26334 available
26335 to
26336 the
26337 authors
26338 while
26339 working
26340 at
26341 Xerox
26342 PARC
26343 4
26344 Terminology
26345 A
26346 red
26347 black
26348 tree
26349 is
26350 a
26351 special
26352 type
26353 of
26354 binary
26355 tree
26356 used
26357 in
26358 computer
26359 science
26360 to
26361 organize
26362 pieces
26363 of
26364 comparable
26365 data
26366 such
26367 as
26368 text
26369 fragments
26370 or
26371 numbers
26372 The
26373 leaf
26374 nodes
26375 of
26376 red
26377 black
26378 trees
26379 do
26380 not
26381 contain
26382 data
26383 These
26384 leaves
26385 need
26386 not
26387 be
26388 explicit
26389 in
26390 computer
26391 memory—a
26392 null
26393 child
26394 pointer
26395 can
26396 encode
26397 the
26398 fact
26399 that
26400 this
26401 child
26402 is
26403 a
26404 leaf—but
26405 it
26406 simplifies
26407 some
26408 algorithms
26409 for
26410 operating
26411 on
26412 red
26413 black
26414 trees
26415 if
26416 the
26417 leaves
26418 really
26419 are
26420 explicit
26421 nodes
26422 To
26423 save
26424 memory
26425 sometimes
26426 a
26427 single
26428 sentinel
26429 node
26430 performs
26431 the
26432 role
26433 of
26434 all
26435 leaf
26436 nodes
26437 all
26438 references
26439 from
26440 internal
26441 nodes
26442 to
26443 leaf
26444 nodes
26445 then
26446 point
26447 to
26448 the
26449 sentinel
26450 node
26451 Red
26452 black
26453 trees
26454 like
26455 all
26456 binary
26457 search
26458 trees
26459 allow
26460 efficient
26461 in
26462 order
26463 traversal
26464 that
26465 is
26466 in
26467 the
26468 order
26469 Left
26470 Root
26471 Right
26472 of
26473 their
26474 elements
26475 The
26476 search
26477 time
26478 results
26479 from
26480 the
26481 traversal
26482 from
26483 root
26484 to
26485 leaf
26486 and
26487 therefore
26488 a
26489 balanced
26490 tree
26491 of
26492 n
26493 nodes
26494 having
26495 the
26496 least
26497 possible
26498 tree
26499 height
26500 results
26501 in
26502 O
26503 log
26504 n
26505 search
26506 time
26507 Properties
26508 Diagram
26509 of
26510 binary
26511 tree
26512 The
26513 black
26514 root
26515 node
26516 has
26517 two
26518 red
26519 children
26520 and
26521 four
26522 black
26523 grandchildren
26524 The
26525 child
26526 nodes
26527 of
26528 the
26529 grandchildren
26530 are
26531 black
26532 nil
26533 pointers
26534 or
26535 red
26536 nodes
26537 with
26538 black
26539 nil
26540 pointers
26541 An
26542 example
26543 of
26544 a
26545 red
26546 black
26547 tree
26548 In
26549 addition
26550 to
26551 the
26552 requirements
26553 imposed
26554 on
26555 a
26556 binary
26557 search
26558 tree
26559 the
26560 following
26561 must
26562 be
26563 satisfied
26564 by
26565 a
26566 red
26567 black
26568 tree
26569 5
26570 A
26571 node
26572 is
26573 either
26574 red
26575 or
26576 black
26577 The
26578 root
26579 is
26580 black
26581 This
26582 rule
26583 is
26584 sometimes
26585 omitted
26586 Since
26587 the
26588 root
26589 can
26590 always
26591 be
26592 changed
26593 from
26594 red
26595 to
26596 black
26597 but
26598 not
26599 necessarily
26600 vice
26601 versa
26602 this
26603 rule
26604 has
26605 little
26606 effect
26607 on
26608 analysis
26609 All
26610 leaves
26611 NIL
26612 are
26613 black
26614 All
26615 leaves
26616 are
26617 same
26618 color
26619 as
26620 the
26621 root
26622 Every
26623 red
26624 node
26625 must
26626 have
26627 two
26628 black
26629 child
26630 nodes
26631 Every
26632 path
26633 from
26634 a
26635 given
26636 node
26637 to
26638 any
26639 of
26640 its
26641 descendant
26642 leaves
26643 contains
26644 the
26645 same
26646 number
26647 of
26648 black
26649 nodes
26650 These
26651 constraints
26652 enforce
26653 a
26654 critical
26655 property
26656 of
26657 red
26658 black
26659 trees
26660 that
26661 the
26662 path
26663 from
26664 the
26665 root
26666 to
26667 the
26668 furthest
26669 leaf
26670 is
26671 no
26672 more
26673 than
26674 twice
26675 as
26676 long
26677 as
26678 the
26679 path
26680 from
26681 the
26682 root
26683 to
26684 the
26685 nearest
26686 leaf
26687 The
26688 result
26689 is
26690 that
26691 the
26692 tree
26693 is
26694 roughly
26695 height
26696 balanced
26697 Since
26698 operations
26699 such
26700 as
26701 inserting
26702 deleting
26703 and
26704 finding
26705 values
26706 require
26707 worst
26708 case
26709 time
26710 proportional
26711 to
26712 the
26713 height
26714 of
26715 the
26716 tree
26717 this
26718 theoretical
26719 upper
26720 bound
26721 on
26722 the
26723 height
26724 allows
26725 red
26726 black
26727 trees
26728 to
26729 be
26730 efficient
26731 in
26732 the
26733 worst
26734 case
26735 unlike
26736 ordinary
26737 binary
26738 search
26739 trees
26740 To
26741 see
26742 why
26743 this
26744 is
26745 guaranteed
26746 it
26747 suffices
26748 to
26749 consider
26750 the
26751 effect
26752 of
26753 properties
26754 4
26755 and
26756 5
26757 together
26758 For
26759 a
26760 red
26761 black
26762 tree
26763 T
26764 let
26765 B
26766 be
26767 the
26768 number
26769 of
26770 black
26771 nodes
26772 in
26773 property
26774 5
26775 Let
26776 the
26777 shortest
26778 possible
26779 path
26780 from
26781 the
26782 root
26783 of
26784 T
26785 to
26786 any
26787 leaf
26788 consist
26789 of
26790 B
26791 black
26792 nodes
26793 Longer
26794 possible
26795 paths
26796 may
26797 be
26798 constructed
26799 by
26800 inserting
26801 red
26802 nodes
26803 However
26804 property
26805 4
26806 makes
26807 it
26808 impossible
26809 to
26810 insert
26811 more
26812 than
26813 one
26814 consecutive
26815 red
26816 node
26817 Therefore
26818 the
26819 longest
26820 possible
26821 path
26822 consists
26823 of
26824 2B
26825 nodes
26826 alternating
26827 black
26828 and
26829 red
26830 The
26831 shortest
26832 possible
26833 path
26834 has
26835 all
26836 black
26837 nodes
26838 and
26839 the
26840 longest
26841 possible
26842 path
26843 alternates
26844 between
26845 red
26846 and
26847 black
26848 nodes
26849 Since
26850 all
26851 maximal
26852 paths
26853 have
26854 the
26855 same
26856 number
26857 of
26858 black
26859 nodes
26860 by
26861 property
26862 5
26863 this
26864 shows
26865 that
26866 no
26867 path
26868 is
26869 more
26870 than
26871 twice
26872 as
26873 long
26874 as
26875 any
26876 other
26877 path
26878 Analogy
26879 to
26880 B
26881 trees
26882 of
26883 order
26884 4
26885 The
26886 same
26887 red
26888 black
26889 tree
26890 as
26891 in
26892 the
26893 example
26894 above
26895 seen
26896 as
26897 a
26898 B
26899 tree
26900 A
26901 red
26902 black
26903 tree
26904 is
26905 similar
26906 in
26907 structure
26908 to
26909 a
26910 B
26911 tree
26912 of
26913 order
26914 note
26915 1
26916 4
26917 where
26918 each
26919 node
26920 can
26921 contain
26922 between
26923 1
26924 and
26925 3
26926 values
26927 and
26928 accordingly
26929 between
26930 2
26931 and
26932 4
26933 child
26934 pointers
26935 In
26936 such
26937 a
26938 B
26939 tree
26940 each
26941 node
26942 will
26943 contain
26944 only
26945 one
26946 value
26947 matching
26948 the
26949 value
26950 in
26951 a
26952 black
26953 node
26954 of
26955 the
26956 red
26957 black
26958 tree
26959 with
26960 an
26961 optional
26962 value
26963 before
26964 and
26965 or
26966 after
26967 it
26968 in
26969 the
26970 same
26971 node
26972 both
26973 matching
26974 an
26975 equivalent
26976 red
26977 node
26978 of
26979 the
26980 red
26981 black
26982 tree
26983 One
26984 way
26985 to
26986 see
26987 this
26988 equivalence
26989 is
26990 to
26991 move
26992 up
26993 the
26994 red
26995 nodes
26996 in
26997 a
26998 graphical
26999 representation
27000 of
27001 the
27002 red
27003 black
27004 tree
27005 so
27006 that
27007 they
27008 align
27009 horizontally
27010 with
27011 their
27012 parent
27013 black
27014 node
27015 by
27016 creating
27017 together
27018 a
27019 horizontal
27020 cluster
27021 In
27022 the
27023 B
27024 tree
27025 or
27026 in
27027 the
27028 modified
27029 graphical
27030 representation
27031 of
27032 the
27033 red
27034 black
27035 tree
27036 all
27037 leaf
27038 nodes
27039 are
27040 at
27041 the
27042 same
27043 depth
27044 The
27045 red
27046 black
27047 tree
27048 is
27049 then
27050 structurally
27051 equivalent
27052 to
27053 a
27054 B
27055 tree
27056 of
27057 order
27058 4
27059 with
27060 a
27061 minimum
27062 fill
27063 factor
27064 of
27065 33
27066 of
27067 values
27068 per
27069 cluster
27070 with
27071 a
27072 maximum
27073 capacity
27074 of
27075 3
27076 values
27077 This
27078 B
27079 tree
27080 type
27081 is
27082 still
27083 more
27084 general
27085 than
27086 a
27087 red
27088 black
27089 tree
27090 though
27091 as
27092 it
27093 allows
27094 ambiguity
27095 in
27096 a
27097 red
27098 black
27099 tree
27100 conversion—multiple
27101 red
27102 black
27103 trees
27104 can
27105 be
27106 produced
27107 from
27108 an
27109 equivalent
27110 B
27111 tree
27112 of
27113 order
27114 4
27115 If
27116 a
27117 B
27118 tree
27119 cluster
27120 contains
27121 only
27122 1
27123 value
27124 it
27125 is
27126 the
27127 minimum
27128 black
27129 and
27130 has
27131 two
27132 child
27133 pointers
27134 If
27135 a
27136 cluster
27137 contains
27138 3
27139 values
27140 then
27141 the
27142 central
27143 value
27144 will
27145 be
27146 black
27147 and
27148 each
27149 value
27150 stored
27151 on
27152 its
27153 sides
27154 will
27155 be
27156 red
27157 If
27158 the
27159 cluster
27160 contains
27161 two
27162 values
27163 however
27164 either
27165 one
27166 can
27167 become
27168 the
27169 black
27170 node
27171 in
27172 the
27173 red
27174 black
27175 tree
27176 and
27177 the
27178 other
27179 one
27180 will
27181 be
27182 red
27183 So
27184 the
27185 order
27186 4
27187 B
27188 tree
27189 does
27190 not
27191 maintain
27192 which
27193 of
27194 the
27195 values
27196 contained
27197 in
27198 each
27199 cluster
27200 is
27201 the
27202 root
27203 black
27204 tree
27205 for
27206 the
27207 whole
27208 cluster
27209 and
27210 the
27211 parent
27212 of
27213 the
27214 other
27215 values
27216 in
27217 the
27218 same
27219 cluster
27220 Despite
27221 this
27222 the
27223 operations
27224 on
27225 red
27226 black
27227 trees
27228 are
27229 more
27230 economical
27231 in
27232 time
27233 because
27234 you
27235 don
27236 t
27237 have
27238 to
27239 maintain
27240 the
27241 vector
27242 of
27243 values
27244 It
27245 may
27246 be
27247 costly
27248 if
27249 values
27250 are
27251 stored
27252 directly
27253 in
27254 each
27255 node
27256 rather
27257 than
27258 being
27259 stored
27260 by
27261 reference
27262 B
27263 tree
27264 nodes
27265 however
27266 are
27267 more
27268 economical
27269 in
27270 space
27271 because
27272 you
27273 don
27274 t
27275 need
27276 to
27277 store
27278 the
27279 color
27280 attribute
27281 for
27282 each
27283 node
27284 Instead
27285 you
27286 have
27287 to
27288 know
27289 which
27290 slot
27291 in
27292 the
27293 cluster
27294 vector
27295 is
27296 used
27297 If
27298 values
27299 are
27300 stored
27301 by
27302 reference
27303 e
27304 g
27305 objects
27306 null
27307 references
27308 can
27309 be
27310 used
27311 and
27312 so
27313 the
27314 cluster
27315 can
27316 be
27317 represented
27318 by
27319 a
27320 vector
27321 containing
27322 3
27323 slots
27324 for
27325 value
27326 pointers
27327 plus
27328 4
27329 slots
27330 for
27331 child
27332 references
27333 in
27334 the
27335 tree
27336 In
27337 that
27338 case
27339 the
27340 B
27341 tree
27342 can
27343 be
27344 more
27345 compact
27346 in
27347 memory
27348 improving
27349 data
27350 locality
27351 The
27352 same
27353 analogy
27354 can
27355 be
27356 made
27357 with
27358 B
27359 trees
27360 with
27361 larger
27362 orders
27363 that
27364 can
27365 be
27366 structurally
27367 equivalent
27368 to
27369 a
27370 colored
27371 binary
27372 tree
27373 you
27374 just
27375 need
27376 more
27377 colors
27378 Suppose
27379 that
27380 you
27381 add
27382 blue
27383 then
27384 the
27385 blue
27386 red
27387 black
27388 tree
27389 defined
27390 like
27391 red
27392 black
27393 trees
27394 but
27395 with
27396 the
27397 additional
27398 constraint
27399 that
27400 no
27401 two
27402 successive
27403 nodes
27404 in
27405 the
27406 hierarchy
27407 will
27408 be
27409 blue
27410 and
27411 all
27412 blue
27413 nodes
27414 will
27415 be
27416 children
27417 of
27418 a
27419 red
27420 node
27421 then
27422 it
27423 becomes
27424 equivalent
27425 to
27426 a
27427 B
27428 tree
27429 whose
27430 clusters
27431 will
27432 have
27433 at
27434 most
27435 7
27436 values
27437 in
27438 the
27439 following
27440 colors
27441 blue
27442 red
27443 blue
27444 black
27445 blue
27446 red
27447 blue
27448 For
27449 each
27450 cluster
27451 there
27452 will
27453 be
27454 at
27455 most
27456 1
27457 black
27458 node
27459 2
27460 red
27461 nodes
27462 and
27463 4
27464 blue
27465 nodes
27466 For
27467 moderate
27468 volumes
27469 of
27470 values
27471 insertions
27472 and
27473 deletions
27474 in
27475 a
27476 colored
27477 binary
27478 tree
27479 are
27480 faster
27481 compared
27482 to
27483 B
27484 trees
27485 because
27486 colored
27487 trees
27488 don
27489 t
27490 attempt
27491 to
27492 maximize
27493 the
27494 fill
27495 factor
27496 of
27497 each
27498 horizontal
27499 cluster
27500 of
27501 nodes
27502 only
27503 the
27504 minimum
27505 fill
27506 factor
27507 is
27508 guaranteed
27509 in
27510 colored
27511 binary
27512 trees
27513 limiting
27514 the
27515 number
27516 of
27517 splits
27518 or
27519 junctions
27520 of
27521 clusters
27522 B
27523 trees
27524 will
27525 be
27526 faster
27527 for
27528 performing
27529 rotations
27530 because
27531 rotations
27532 will
27533 frequently
27534 occur
27535 within
27536 the
27537 same
27538 cluster
27539 rather
27540 than
27541 with
27542 multiple
27543 separate
27544 nodes
27545 in
27546 a
27547 colored
27548 binary
27549 tree
27550 However
27551 for
27552 storing
27553 large
27554 volumes
27555 B
27556 trees
27557 will
27558 be
27559 much
27560 faster
27561 as
27562 they
27563 will
27564 be
27565 more
27566 compact
27567 by
27568 grouping
27569 several
27570 children
27571 in
27572 the
27573 same
27574 cluster
27575 where
27576 they
27577 can
27578 be
27579 accessed
27580 locally
27581 All
27582 optimizations
27583 possible
27584 in
27585 B
27586 trees
27587 to
27588 increase
27589 the
27590 average
27591 fill
27592 factors
27593 of
27594 clusters
27595 are
27596 possible
27597 in
27598 the
27599 equivalent
27600 multicolored
27601 binary
27602 tree
27603 Notably
27604 maximizing
27605 the
27606 average
27607 fill
27608 factor
27609 in
27610 a
27611 structurally
27612 equivalent
27613 B
27614 tree
27615 is
27616 the
27617 same
27618 as
27619 reducing
27620 the
27621 total
27622 height
27623 of
27624 the
27625 multicolored
27626 tree
27627 by
27628 increasing
27629 the
27630 number
27631 of
27632 non
27633 black
27634 nodes
27635 The
27636 worst
27637 case
27638 occurs
27639 when
27640 all
27641 nodes
27642 in
27643 a
27644 colored
27645 binary
27646 tree
27647 are
27648 black
27649 the
27650 best
27651 case
27652 occurs
27653 when
27654 only
27655 a
27656 third
27657 of
27658 them
27659 are
27660 black
27661 and
27662 the
27663 other
27664 two
27665 thirds
27666 are
27667 red
27668 nodes
27669 Notes
27670 Jump
27671 up
27672 Using
27673 Knuth
27674 s
27675 definition
27676 of
27677 order
27678 the
27679 maximum
27680 number
27681 of
27682 children
27683 Applications
27684 and
27685 related
27686 data
27687 structures
27688 Red
27689 black
27690 trees
27691 offer
27692 worst
27693 case
27694 guarantees
27695 for
27696 insertion
27697 time
27698 deletion
27699 time
27700 and
27701 search
27702 time
27703 Not
27704 only
27705 does
27706 this
27707 make
27708 them
27709 valuable
27710 in
27711 time
27712 sensitive
27713 applications
27714 such
27715 as
27716 real
27717 time
27718 applications
27719 but
27720 it
27721 makes
27722 them
27723 valuable
27724 building
27725 blocks
27726 in
27727 other
27728 data
27729 structures
27730 which
27731 provide
27732 worst
27733 case
27734 guarantees
27735 for
27736 example
27737 many
27738 data
27739 structures
27740 used
27741 in
27742 computational
27743 geometry
27744 can
27745 be
27746 based
27747 on
27748 red
27749 black
27750 trees
27751 and
27752 the
27753 Completely
27754 Fair
27755 Scheduler
27756 used
27757 in
27758 current
27759 Linux
27760 kernels
27761 uses
27762 red
27763 black
27764 trees
27765 The
27766 AVL
27767 tree
27768 is
27769 another
27770 structure
27771 supporting
27772 O
27773 log
27774 n
27775 search
27776 insertion
27777 and
27778 removal
27779 It
27780 is
27781 more
27782 rigidly
27783 balanced
27784 than
27785 red
27786 black
27787 trees
27788 leading
27789 to
27790 slower
27791 insertion
27792 and
27793 removal
27794 but
27795 faster
27796 retrieval
27797 This
27798 makes
27799 it
27800 attractive
27801 for
27802 data
27803 structures
27804 that
27805 may
27806 be
27807 built
27808 once
27809 and
27810 loaded
27811 without
27812 reconstruction
27813 such
27814 as
27815 language
27816 dictionaries
27817 or
27818 program
27819 dictionaries
27820 such
27821 as
27822 the
27823 opcodes
27824 of
27825 an
27826 assembler
27827 or
27828 interpreter
27829 Red
27830 black
27831 trees
27832 are
27833 also
27834 particularly
27835 valuable
27836 in
27837 functional
27838 programming
27839 where
27840 they
27841 are
27842 one
27843 of
27844 the
27845 most
27846 common
27847 persistent
27848 data
27849 structures
27850 used
27851 to
27852 construct
27853 associative
27854 arrays
27855 and
27856 sets
27857 which
27858 can
27859 retain
27860 previous
27861 versions
27862 after
27863 mutations
27864 The
27865 persistent
27866 version
27867 of
27868 red
27869 black
27870 trees
27871 requires
27872 O
27873 log
27874 n
27875 space
27876 for
27877 each
27878 insertion
27879 or
27880 deletion
27881 in
27882 addition
27883 to
27884 time
27885 For
27886 every
27887 2
27888 4
27889 tree
27890 there
27891 are
27892 corresponding
27893 red
27894 black
27895 trees
27896 with
27897 data
27898 elements
27899 in
27900 the
27901 same
27902 order
27903 The
27904 insertion
27905 and
27906 deletion
27907 operations
27908 on
27909 2
27910 4
27911 trees
27912 are
27913 also
27914 equivalent
27915 to
27916 color
27917 flipping
27918 and
27919 rotations
27920 in
27921 red
27922 black
27923 trees
27924 This
27925 makes
27926 2
27927 4
27928 trees
27929 an
27930 important
27931 tool
27932 for
27933 understanding
27934 the
27935 logic
27936 behind
27937 red
27938 black
27939 trees
27940 and
27941 this
27942 is
27943 why
27944 many
27945 introductory
27946 algorithm
27947 texts
27948 introduce
27949 2
27950 4
27951 trees
27952 just
27953 before
27954 red
27955 black
27956 trees
27957 even
27958 though
27959 2
27960 4
27961 trees
27962 are
27963 not
27964 often
27965 used
27966 in
27967 practice
27968 In
27969 2008
27970 Sedgewick
27971 introduced
27972 a
27973 simpler
27974 version
27975 of
27976 the
27977 red
27978 black
27979 tree
27980 called
27981 the
27982 left
27983 leaning
27984 red
27985 black
27986 tree
27987 6
27988 by
27989 eliminating
27990 a
27991 previously
27992 unspecified
27993 degree
27994 of
27995 freedom
27996 in
27997 the
27998 implementation
27999 The
28000 LLRB
28001 maintains
28002 an
28003 additional
28004 invariant
28005 that
28006 all
28007 red
28008 links
28009 must
28010 lean
28011 left
28012 except
28013 during
28014 inserts
28015 and
28016 deletes
28017 Red
28018 black
28019 trees
28020 can
28021 be
28022 made
28023 isometric
28024 to
28025 either
28026 2
28027 3
28028 trees
28029 7
28030 or
28031 2
28032 4
28033 trees
28034 6
28035 for
28036 any
28037 sequence
28038 of
28039 operations
28040 The
28041 2
28042 4
28043 tree
28044 isometry
28045 was
28046 described
28047 in
28048 1978
28049 by
28050 Sedgewick
28051 this
28052 quote
28053 needs
28054 a
28055 citation
28056 With
28057 2
28058 4
28059 trees
28060 the
28061 isometry
28062 is
28063 resolved
28064 by
28065 a
28066 color
28067 flip
28068 corresponding
28069 to
28070 a
28071 split
28072 in
28073 which
28074 the
28075 red
28076 color
28077 of
28078 two
28079 children
28080 nodes
28081 leaves
28082 the
28083 children
28084 and
28085 moves
28086 to
28087 the
28088 parent
28089 node
28090 The
28091 tango
28092 tree
28093 a
28094 type
28095 of
28096 tree
28097 optimized
28098 for
28099 fast
28100 searches
28101 usually
28102 when
28103 uses
28104 red
28105 black
28106 trees
28107 as
28108 part
28109 of
28110 its
28111 data
28112 structure
28113 Operations
28114 Read
28115 only
28116 operations
28117 on
28118 a
28119 red
28120 black
28121 tree
28122 require
28123 no
28124 modification
28125 from
28126 those
28127 used
28128 for
28129 binary
28130 search
28131 trees
28132 because
28133 every
28134 red
28135 black
28136 tree
28137 is
28138 a
28139 special
28140 case
28141 of
28142 a
28143 simple
28144 binary
28145 search
28146 tree
28147 However
28148 the
28149 immediate
28150 result
28151 of
28152 an
28153 insertion
28154 or
28155 removal
28156 may
28157 violate
28158 the
28159 properties
28160 of
28161 a
28162 red
28163 black
28164 tree
28165 Restoring
28166 the
28167 red
28168 black
28169 properties
28170 requires
28171 a
28172 small
28173 number
28174 O
28175 log
28176 n
28177 or
28178 amortized
28179 O
28180 1
28181 of
28182 color
28183 changes
28184 which
28185 are
28186 very
28187 quick
28188 in
28189 practice
28190 and
28191 no
28192 more
28193 than
28194 three
28195 tree
28196 rotations
28197 two
28198 for
28199 insertion
28200 Although
28201 insert
28202 and
28203 delete
28204 operations
28205 are
28206 complicated
28207 their
28208 times
28209 remain
28210 O
28211 log
28212 n
28213 Insertion
28214 Insertion
28215 begins
28216 by
28217 adding
28218 the
28219 node
28220 as
28221 any
28222 binary
28223 search
28224 tree
28225 insertion
28226 does
28227 and
28228 by
28229 coloring
28230 it
28231 red
28232 Whereas
28233 in
28234 the
28235 binary
28236 search
28237 tree
28238 we
28239 always
28240 add
28241 a
28242 leaf
28243 in
28244 the
28245 red
28246 black
28247 tree
28248 leaves
28249 contain
28250 no
28251 information
28252 so
28253 instead
28254 we
28255 add
28256 a
28257 red
28258 interior
28259 node
28260 with
28261 two
28262 black
28263 leaves
28264 in
28265 place
28266 of
28267 an
28268 existing
28269 black
28270 leaf
28271 What
28272 happens
28273 next
28274 depends
28275 on
28276 the
28277 color
28278 of
28279 other
28280 nearby
28281 nodes
28282 The
28283 term
28284 uncle
28285 node
28286 will
28287 be
28288 used
28289 to
28290 refer
28291 to
28292 the
28293 sibling
28294 of
28295 a
28296 node
28297 s
28298 parent
28299 as
28300 in
28301 human
28302 family
28303 trees
28304 Note
28305 that
28306 property
28307 3
28308 all
28309 leaves
28310 are
28311 black
28312 always
28313 holds
28314 property
28315 4
28316 both
28317 children
28318 of
28319 every
28320 red
28321 node
28322 are
28323 black
28324 is
28325 threatened
28326 only
28327 by
28328 adding
28329 a
28330 red
28331 node
28332 repainting
28333 a
28334 black
28335 node
28336 red
28337 or
28338 a
28339 rotation
28340 property
28341 5
28342 all
28343 paths
28344 from
28345 any
28346 given
28347 node
28348 to
28349 its
28350 leaf
28351 nodes
28352 contain
28353 the
28354 same
28355 number
28356 of
28357 black
28358 nodes
28359 is
28360 threatened
28361 only
28362 by
28363 adding
28364 a
28365 black
28366 node
28367 repainting
28368 a
28369 red
28370 node
28371 black
28372 or
28373 vice
28374 versa
28375 or
28376 a
28377 rotation
28378 Note
28379 The
28380 label
28381 N
28382 will
28383 be
28384 used
28385 to
28386 denote
28387 the
28388 current
28389 node
28390 colored
28391 red
28392 At
28393 the
28394 beginning
28395 this
28396 is
28397 the
28398 new
28399 node
28400 being
28401 inserted
28402 but
28403 the
28404 entire
28405 procedure
28406 may
28407 also
28408 be
28409 applied
28410 recursively
28411 to
28412 other
28413 nodes
28414 see
28415 case
28416 3
28417 P
28418 will
28419 denote
28420 N
28421 s
28422 parent
28423 node
28424 G
28425 will
28426 denote
28427 N
28428 s
28429 grandparent
28430 and
28431 U
28432 will
28433 denote
28434 N
28435 s
28436 uncle
28437 Note
28438 that
28439 in
28440 between
28441 some
28442 cases
28443 the
28444 roles
28445 and
28446 labels
28447 of
28448 the
28449 nodes
28450 are
28451 exchanged
28452 but
28453 in
28454 each
28455 case
28456 every
28457 label
28458 continues
28459 to
28460 represent
28461 the
28462 same
28463 node
28464 it
28465 represented
28466 at
28467 the
28468 beginning
28469 of
28470 the
28471 case
28472 Any
28473 color
28474 shown
28475 in
28476 the
28477 diagram
28478 is
28479 either
28480 assumed
28481 in
28482 its
28483 case
28484 or
28485 implied
28486 by
28487 those
28488 assumptions
28489 A
28490 numbered
28491 triangle
28492 represents
28493 a
28494 subtree
28495 of
28496 unspecified
28497 depth
28498 A
28499 black
28500 circle
28501 atop
28502 the
28503 triangle
28504 designates
28505 a
28506 black
28507 root
28508 node
28509 otherwise
28510 the
28511 root
28512 node
28513 s
28514 color
28515 is
28516 unspecified
28517 Each
28518 case
28519 will
28520 be
28521 demonstrated
28522 with
28523 example
28524 C
28525 code
28526 The
28527 uncle
28528 and
28529 grandparent
28530 nodes
28531 can
28532 be
28533 found
28534 by
28535 these
28536 functions
28537 In
28538 a
28539 regular
28540 binary
28541 search
28542 tree
28543 when
28544 deleting
28545 a
28546 node
28547 with
28548 two
28549 non
28550 leaf
28551 children
28552 we
28553 find
28554 either
28555 the
28556 maximum
28557 element
28558 in
28559 its
28560 left
28561 subtree
28562 which
28563 is
28564 the
28565 in
28566 order
28567 predecessor
28568 or
28569 the
28570 minimum
28571 element
28572 in
28573 its
28574 right
28575 subtree
28576 which
28577 is
28578 the
28579 in
28580 order
28581 successor
28582 and
28583 move
28584 its
28585 value
28586 into
28587 the
28588 node
28589 being
28590 deleted
28591 as
28592 shown
28593 here
28594 We
28595 then
28596 delete
28597 the
28598 node
28599 we
28600 copied
28601 the
28602 value
28603 from
28604 which
28605 must
28606 have
28607 fewer
28608 than
28609 two
28610 non
28611 leaf
28612 children
28613 Non
28614 leaf
28615 children
28616 rather
28617 than
28618 all
28619 children
28620 are
28621 specified
28622 here
28623 because
28624 unlike
28625 normal
28626 binary
28627 search
28628 trees
28629 red
28630 black
28631 trees
28632 can
28633 have
28634 leaf
28635 nodes
28636 anywhere
28637 so
28638 that
28639 all
28640 nodes
28641 are
28642 either
28643 internal
28644 nodes
28645 with
28646 two
28647 children
28648 or
28649 leaf
28650 nodes
28651 with
28652 by
28653 definition
28654 zero
28655 children
28656 In
28657 effect
28658 internal
28659 nodes
28660 having
28661 two
28662 leaf
28663 children
28664 in
28665 a
28666 red
28667 black
28668 tree
28669 are
28670 like
28671 the
28672 leaf
28673 nodes
28674 in
28675 a
28676 regular
28677 binary
28678 search
28679 tree
28680 Because
28681 merely
28682 copying
28683 a
28684 value
28685 does
28686 not
28687 violate
28688 any
28689 red
28690 black
28691 properties
28692 this
28693 reduces
28694 to
28695 the
28696 problem
28697 of
28698 deleting
28699 a
28700 node
28701 with
28702 at
28703 most
28704 one
28705 non
28706 leaf
28707 child
28708 Once
28709 we
28710 have
28711 solved
28712 that
28713 problem
28714 the
28715 solution
28716 applies
28717 equally
28718 to
28719 the
28720 case
28721 where
28722 the
28723 node
28724 we
28725 originally
28726 want
28727 to
28728 delete
28729 has
28730 at
28731 most
28732 one
28733 non
28734 leaf
28735 child
28736 as
28737 to
28738 the
28739 case
28740 just
28741 considered
28742 where
28743 it
28744 has
28745 two
28746 non
28747 leaf
28748 children
28749 Therefore
28750 for
28751 the
28752 remainder
28753 of
28754 this
28755 discussion
28756 we
28757 address
28758 the
28759 deletion
28760 of
28761 a
28762 node
28763 with
28764 at
28765 most
28766 one
28767 non
28768 leaf
28769 child
28770 We
28771 use
28772 the
28773 label
28774 M
28775 to
28776 denote
28777 the
28778 node
28779 to
28780 be
28781 deleted
28782 C
28783 will
28784 denote
28785 a
28786 selected
28787 child
28788 of
28789 M
28790 which
28791 we
28792 will
28793 also
28794 call
28795 its
28796 child
28797 If
28798 M
28799 does
28800 have
28801 a
28802 non
28803 leaf
28804 child
28805 call
28806 that
28807 its
28808 child
28809 C
28810 otherwise
28811 choose
28812 either
28813 leaf
28814 as
28815 its
28816 child
28817 C
28818 If
28819 M
28820 is
28821 a
28822 red
28823 node
28824 we
28825 simply
28826 replace
28827 it
28828 with
28829 its
28830 child
28831 C
28832 which
28833 must
28834 be
28835 black
28836 by
28837 property
28838 4
28839 This
28840 can
28841 only
28842 occur
28843 when
28844 M
28845 has
28846 two
28847 leaf
28848 children
28849 because
28850 if
28851 the
28852 red
28853 node
28854 M
28855 had
28856 a
28857 black
28858 non
28859 leaf
28860 child
28861 on
28862 one
28863 side
28864 but
28865 just
28866 a
28867 leaf
28868 child
28869 on
28870 the
28871 other
28872 side
28873 then
28874 the
28875 count
28876 of
28877 black
28878 nodes
28879 on
28880 both
28881 sides
28882 would
28883 be
28884 different
28885 thus
28886 the
28887 tree
28888 would
28889 violate
28890 property
28891 5
28892 All
28893 paths
28894 through
28895 the
28896 deleted
28897 node
28898 will
28899 simply
28900 pass
28901 through
28902 one
28903 fewer
28904 red
28905 node
28906 and
28907 both
28908 the
28909 deleted
28910 node
28911 s
28912 parent
28913 and
28914 child
28915 must
28916 be
28917 black
28918 so
28919 property
28920 3
28921 all
28922 leaves
28923 are
28924 black
28925 and
28926 property
28927 4
28928 both
28929 children
28930 of
28931 every
28932 red
28933 node
28934 are
28935 black
28936 still
28937 hold
28938 Another
28939 simple
28940 case
28941 is
28942 when
28943 M
28944 is
28945 black
28946 and
28947 C
28948 is
28949 red
28950 Simply
28951 removing
28952 a
28953 black
28954 node
28955 could
28956 break
28957 Properties
28958 4
28959 Both
28960 children
28961 of
28962 every
28963 red
28964 node
28965 are
28966 black
28967 and
28968 5
28969 All
28970 paths
28971 from
28972 any
28973 given
28974 node
28975 to
28976 its
28977 leaf
28978 nodes
28979 contain
28980 the
28981 same
28982 number
28983 of
28984 black
28985 nodes
28986 but
28987 if
28988 we
28989 repaint
28990 C
28991 black
28992 both
28993 of
28994 these
28995 properties
28996 are
28997 preserved
28998 The
28999 complex
29000 case
29001 is
29002 when
29003 both
29004 M
29005 and
29006 C
29007 are
29008 black
29009 This
29010 can
29011 only
29012 occur
29013 when
29014 deleting
29015 a
29016 black
29017 node
29018 which
29019 has
29020 two
29021 leaf
29022 children
29023 because
29024 if
29025 the
29026 black
29027 node
29028 M
29029 had
29030 a
29031 black
29032 non
29033 leaf
29034 child
29035 on
29036 one
29037 side
29038 but
29039 just
29040 a
29041 leaf
29042 child
29043 on
29044 the
29045 other
29046 side
29047 then
29048 the
29049 count
29050 of
29051 black
29052 nodes
29053 on
29054 both
29055 sides
29056 would
29057 be
29058 different
29059 thus
29060 the
29061 tree
29062 would
29063 have
29064 been
29065 an
29066 invalid
29067 red
29068 black
29069 tree
29070 by
29071 violation
29072 of
29073 property
29074 5
29075 We
29076 begin
29077 by
29078 replacing
29079 M
29080 with
29081 its
29082 child
29083 C
29084 We
29085 will
29086 call
29087 or
29088 is
29089 relabel
29090 this
29091 child
29092 in
29093 its
29094 new
29095 position
29096 N
29097 and
29098 its
29099 sibling
29100 its
29101 new
29102 parent
29103 s
29104 other
29105 child
29106 S
29107 S
29108 was
29109 previously
29110 the
29111 sibling
29112 of
29113 M
29114 In
29115 the
29116 diagrams
29117 below
29118 we
29119 will
29120 also
29121 use
29122 P
29123 for
29124 N
29125 s
29126 new
29127 parent
29128 M
29129 s
29130 old
29131 parent
29132 SL
29133 for
29134 S
29135 s
29136 left
29137 child
29138 and
29139 SR
29140 for
29141 S
29142 s
29143 right
29144 child
29145 S
29146 cannot
29147 be
29148 a
29149 leaf
29150 because
29151 if
29152 M
29153 and
29154 C
29155 were
29156 black
29157 then
29158 P
29159 s
29160 one
29161 subtree
29162 which
29163 included
29164 M
29165 counted
29166 two
29167 black
29168 height
29169 and
29170 thus
29171 P
29172 s
29173 other
29174 subtree
29175 which
29176 includes
29177 S
29178 must
29179 also
29180 count
29181 two
29182 black
29183 height
29184 which
29185 cannot
29186 be
29187 the
29188 case
29189 if
29190 S
29191 is
29192 a
29193 leaf
29194 node
29195 Note
29196 In
29197 between
29198 some
29199 cases
29200 we
29201 exchange
29202 the
29203 roles
29204 and
29205 labels
29206 of
29207 the
29208 nodes
29209 but
29210 in
29211 each
29212 case
29213 every
29214 label
29215 continues
29216 to
29217 represent
29218 the
29219 same
29220 node
29221 it
29222 represented
29223 at
29224 the
29225 beginning
29226 of
29227 the
29228 case
29229 Any
29230 color
29231 shown
29232 in
29233 the
29234 diagram
29235 is
29236 either
29237 assumed
29238 in
29239 its
29240 case
29241 or
29242 implied
29243 by
29244 those
29245 assumptions
29246 White
29247 represents
29248 an
29249 unknown
29250 color
29251 either
29252 red
29253 or
29254 black
29255 We
29256 will
29257 find
29258 the
29259 sibling
29260 using
29261 this
29262 function
29263 Hash
29264 table
29265 Not
29266 to
29267 be
29268 confused
29269 with
29270 Hash
29271 list
29272 or
29273 Hash
29274 tree
29275 Hash
29276 table
29277 Type
29278 Unordered
29279 associative
29280 array
29281 Invented
29282 1953
29283 A
29284 small
29285 phone
29286 book
29287 as
29288 a
29289 hash
29290 table
29291 In
29292 computing
29293 a
29294 hash
29295 table
29296 hash
29297 map
29298 is
29299 a
29300 data
29301 structure
29302 used
29303 to
29304 implement
29305 an
29306 associative
29307 array
29308 a
29309 structure
29310 that
29311 can
29312 map
29313 keys
29314 to
29315 values
29316 A
29317 hash
29318 table
29319 uses
29320 a
29321 hash
29322 function
29323 to
29324 compute
29325 an
29326 index
29327 into
29328 an
29329 array
29330 of
29331 buckets
29332 or
29333 slots
29334 from
29335 which
29336 the
29337 correct
29338 value
29339 can
29340 be
29341 found
29342 Ideally
29343 the
29344 hash
29345 function
29346 will
29347 assign
29348 each
29349 key
29350 to
29351 a
29352 unique
29353 bucket
29354 but
29355 this
29356 situation
29357 is
29358 rarely
29359 achievable
29360 in
29361 practice
29362 usually
29363 some
29364 keys
29365 will
29366 hash
29367 to
29368 the
29369 same
29370 bucket
29371 Instead
29372 most
29373 hash
29374 table
29375 designs
29376 assume
29377 that
29378 hash
29379 collisions
29380 different
29381 keys
29382 that
29383 are
29384 assigned
29385 by
29386 the
29387 hash
29388 function
29389 to
29390 the
29391 same
29392 bucket
29393 will
29394 occur
29395 and
29396 must
29397 be
29398 accommodated
29399 in
29400 some
29401 way
29402 In
29403 a
29404 well
29405 dimensioned
29406 hash
29407 table
29408 the
29409 average
29410 cost
29411 number
29412 of
29413 instructions
29414 for
29415 each
29416 lookup
29417 is
29418 independent
29419 of
29420 the
29421 number
29422 of
29423 elements
29424 stored
29425 in
29426 the
29427 table
29428 Many
29429 hash
29430 table
29431 designs
29432 also
29433 allow
29434 arbitrary
29435 insertions
29436 and
29437 deletions
29438 of
29439 key
29440 value
29441 pairs
29442 at
29443 amortized2
29444 constant
29445 average
29446 cost
29447 per
29448 operation34
29449 In
29450 many
29451 situations
29452 hash
29453 tables
29454 turn
29455 out
29456 to
29457 be
29458 more
29459 efficient
29460 than
29461 search
29462 trees
29463 or
29464 any
29465 other
29466 table
29467 lookup
29468 structure
29469 For
29470 this
29471 reason
29472 they
29473 are
29474 widely
29475 used
29476 in
29477 many
29478 kinds
29479 of
29480 computer
29481 software
29482 particularly
29483 for
29484 associative
29485 arrays
29486 database
29487 indexing
29488 caches
29489 and
29490 sets
29491 Hash
29492 function
29493 The
29494 idea
29495 of
29496 hashing
29497 is
29498 to
29499 distribute
29500 the
29501 entries
29502 key
29503 value
29504 pairs
29505 across
29506 an
29507 array
29508 of
29509 buckets
29510 Given
29511 a
29512 key
29513 the
29514 algorithm
29515 computes
29516 an
29517 index
29518 that
29519 suggests
29520 where
29521 the
29522 entry
29523 can
29524 be
29525 found
29526 index
29527 fkey
29528 array
29529 size
29530 Often
29531 this
29532 is
29533 done
29534 in
29535 two
29536 steps
29537 hash
29538 hashfunckey
29539 index
29540 hash
29541 array
29542 size
29543 In
29544 this
29545 method
29546 the
29547 hash
29548 is
29549 independent
29550 of
29551 the
29552 array
29553 size
29554 and
29555 it
29556 is
29557 then
29558 reduced
29559 to
29560 an
29561 index
29562 a
29563 number
29564 between
29565 0
29566 and
29567 array
29568 size
29569 1
29570 using
29571 the
29572 modulo
29573 operator
29574 In
29575 the
29576 case
29577 that
29578 the
29579 array
29580 size
29581 is
29582 a
29583 power
29584 of
29585 two
29586 the
29587 remainder
29588 operation
29589 is
29590 reduced
29591 to
29592 masking
29593 which
29594 improves
29595 speed
29596 but
29597 can
29598 increase
29599 problems
29600 with
29601 a
29602 poor
29603 hash
29604 function
29605 Choosing
29606 a
29607 good
29608 hash
29609 function
29610 A
29611 good
29612 hash
29613 function
29614 and
29615 implementation
29616 algorithm
29617 are
29618 essential
29619 for
29620 good
29621 hash
29622 table
29623 performance
29624 but
29625 may
29626 be
29627 difficult
29628 to
29629 achieve
29630 A
29631 basic
29632 requirement
29633 is
29634 that
29635 the
29636 function
29637 should
29638 provide
29639 a
29640 uniform
29641 distribution
29642 of
29643 hash
29644 values
29645 A
29646 non
29647 uniform
29648 distribution
29649 increases
29650 the
29651 number
29652 of
29653 collisions
29654 and
29655 the
29656 cost
29657 of
29658 resolving
29659 them
29660 Uniformity
29661 is
29662 sometimes
29663 difficult
29664 to
29665 ensure
29666 by
29667 design
29668 but
29669 may
29670 be
29671 evaluated
29672 empirically
29673 using
29674 statistical
29675 tests
29676 eg
29677 a
29678 Pearsons
29679 chi
29680 squared
29681 test
29682 for
29683 discrete
29684 uniform
29685 distributions56
29686 The
29687 distribution
29688 needs
29689 to
29690 be
29691 uniform
29692 only
29693 for
29694 table
29695 sizes
29696 that
29697 occur
29698 in
29699 the
29700 application
29701 In
29702 particular
29703 if
29704 one
29705 uses
29706 dynamic
29707 resizing
29708 with
29709 exact
29710 doubling
29711 and
29712 halving
29713 of
29714 the
29715 table
29716 size
29717 s
29718 then
29719 the
29720 hash
29721 function
29722 needs
29723 to
29724 be
29725 uniform
29726 only
29727 when
29728 s
29729 is
29730 a
29731 power
29732 of
29733 two
29734 On
29735 the
29736 other
29737 hand
29738 some
29739 hashing
29740 algorithms
29741 provide
29742 uniform
29743 hashes
29744 only
29745 when
29746 s
29747 is
29748 a
29749 prime
29750 number7
29751 For
29752 open
29753 addressing
29754 schemes
29755 the
29756 hash
29757 function
29758 should
29759 also
29760 avoid
29761 clustering
29762 the
29763 mapping
29764 of
29765 two
29766 or
29767 more
29768 keys
29769 to
29770 consecutive
29771 slots
29772 Such
29773 clustering
29774 may
29775 cause
29776 the
29777 lookup
29778 cost
29779 to
29780 skyrocket
29781 even
29782 if
29783 the
29784 load
29785 factor
29786 is
29787 low
29788 and
29789 collisions
29790 are
29791 infrequent
29792 The
29793 popular
29794 multiplicative
29795 hash3
29796 is
29797 claimed
29798 to
29799 have
29800 particularly
29801 poor
29802 clustering
29803 behavior7
29804 Cryptographic
29805 hash
29806 functions
29807 are
29808 believed
29809 to
29810 provide
29811 good
29812 hash
29813 functions
29814 for
29815 any
29816 table
29817 size
29818 s
29819 either
29820 by
29821 modulo
29822 reduction
29823 or
29824 by
29825 bit
29826 masking
29827 They
29828 may
29829 also
29830 be
29831 appropriate
29832 if
29833 there
29834 is
29835 a
29836 risk
29837 of
29838 malicious
29839 users
29840 trying
29841 to
29842 sabotage
29843 a
29844 network
29845 service
29846 by
29847 submitting
29848 requests
29849 designed
29850 to
29851 generate
29852 a
29853 large
29854 number
29855 of
29856 collisions
29857 in
29858 the
29859 servers
29860 hash
29861 tables
29862 However
29863 the
29864 risk
29865 of
29866 sabotage
29867 can
29868 also
29869 be
29870 avoided
29871 by
29872 cheaper
29873 methods
29874 such
29875 as
29876 applying
29877 Hash
29878 table
29879 Not
29880 to
29881 be
29882 confused
29883 with
29884 Hash
29885 list
29886 or
29887 Hash
29888 tree
29889 Hash
29890 table
29891 Type
29892 Unordered
29893 associative
29894 array
29895 Invented
29896 1953
29897 A
29898 small
29899 phone
29900 book
29901 as
29902 a
29903 hash
29904 table
29905 In
29906 computing
29907 a
29908 hash
29909 table
29910 hash
29911 map
29912 is
29913 a
29914 data
29915 structure
29916 used
29917 to
29918 implement
29919 an
29920 associative
29921 array
29922 a
29923 structure
29924 that
29925 can
29926 map
29927 keys
29928 to
29929 values
29930 A
29931 hash
29932 table
29933 uses
29934 a
29935 hash
29936 function
29937 to
29938 compute
29939 an
29940 index
29941 into
29942 an
29943 array
29944 of
29945 buckets
29946 or
29947 slots
29948 from
29949 which
29950 the
29951 correct
29952 value
29953 can
29954 be
29955 found
29956 Ideally
29957 the
29958 hash
29959 function
29960 will
29961 assign
29962 each
29963 key
29964 to
29965 a
29966 unique
29967 bucket
29968 but
29969 this
29970 situation
29971 is
29972 rarely
29973 achievable
29974 in
29975 practice
29976 usually
29977 some
29978 keys
29979 will
29980 hash
29981 to
29982 the
29983 same
29984 bucket
29985 Instead
29986 most
29987 hash
29988 table
29989 designs
29990 assume
29991 that
29992 hash
29993 collisions
29994 different
29995 keys
29996 that
29997 are
29998 assigned
29999 by
30000 the
30001 hash
30002 function
30003 to
30004 the
30005 same
30006 bucket
30007 will
30008 occur
30009 and
30010 must
30011 be
30012 accommodated
30013 in
30014 some
30015 way
30016 In
30017 a
30018 well
30019 dimensioned
30020 hash
30021 table
30022 the
30023 average
30024 cost
30025 number
30026 of
30027 instructions
30028 for
30029 each
30030 lookup
30031 is
30032 independent
30033 of
30034 the
30035 number
30036 of
30037 elements
30038 stored
30039 in
30040 the
30041 table
30042 Many
30043 hash
30044 table
30045 designs
30046 also
30047 allow
30048 arbitrary
30049 insertions
30050 and
30051 deletions
30052 of
30053 key
30054 value
30055 pairs
30056 at
30057 amortized2
30058 constant
30059 average
30060 cost
30061 per
30062 operation34
30063 In
30064 many
30065 situations
30066 hash
30067 tables
30068 turn
30069 out
30070 to
30071 be
30072 more
30073 efficient
30074 than
30075 search
30076 trees
30077 or
30078 any
30079 other
30080 table
30081 lookup
30082 structure
30083 For
30084 this
30085 reason
30086 they
30087 are
30088 widely
30089 used
30090 in
30091 many
30092 kinds
30093 of
30094 computer
30095 software
30096 particularly
30097 for
30098 associative
30099 arrays
30100 database
30101 indexing
30102 caches
30103 and
30104 sets
30105 Hash
30106 function
30107 The
30108 idea
30109 of
30110 hashing
30111 is
30112 to
30113 distribute
30114 the
30115 entries
30116 key
30117 value
30118 pairs
30119 across
30120 an
30121 array
30122 of
30123 buckets
30124 Given
30125 a
30126 key
30127 the
30128 algorithm
30129 computes
30130 an
30131 index
30132 that
30133 suggests
30134 where
30135 the
30136 entry
30137 can
30138 be
30139 found
30140 index
30141 fkey
30142 array
30143 size
30144 Often
30145 this
30146 is
30147 done
30148 in
30149 two
30150 steps
30151 hash
30152 hashfunckey
30153 index
30154 hash
30155 array
30156 size
30157 In
30158 this
30159 method
30160 the
30161 hash
30162 is
30163 independent
30164 of
30165 the
30166 array
30167 size
30168 and
30169 it
30170 is
30171 then
30172 reduced
30173 to
30174 an
30175 index
30176 a
30177 number
30178 between
30179 0
30180 and
30181 array
30182 size
30183 1
30184 using
30185 the
30186 modulo
30187 operator
30188 In
30189 the
30190 case
30191 that
30192 the
30193 array
30194 size
30195 is
30196 a
30197 power
30198 of
30199 two
30200 the
30201 remainder
30202 operation
30203 is
30204 reduced
30205 to
30206 masking
30207 which
30208 improves
30209 speed
30210 but
30211 can
30212 increase
30213 problems
30214 with
30215 a
30216 poor
30217 hash
30218 function
30219 Choosing
30220 a
30221 good
30222 hash
30223 function
30224 A
30225 good
30226 hash
30227 function
30228 and
30229 implementation
30230 algorithm
30231 are
30232 essential
30233 for
30234 good
30235 hash
30236 table
30237 performance
30238 but
30239 may
30240 be
30241 difficult
30242 to
30243 achieve
30244 A
30245 basic
30246 requirement
30247 is
30248 that
30249 the
30250 function
30251 should
30252 provide
30253 a
30254 uniform
30255 distribution
30256 of
30257 hash
30258 values
30259 A
30260 non
30261 uniform
30262 distribution
30263 increases
30264 the
30265 number
30266 of
30267 collisions
30268 and
30269 the
30270 cost
30271 of
30272 resolving
30273 them
30274 Uniformity
30275 is
30276 sometimes
30277 difficult
30278 to
30279 ensure
30280 by
30281 design
30282 but
30283 may
30284 be
30285 evaluated
30286 empirically
30287 using
30288 statistical
30289 tests
30290 eg
30291 a
30292 Pearsons
30293 chi
30294 squared
30295 test
30296 for
30297 discrete
30298 uniform
30299 distributions56
30300 The
30301 distribution
30302 needs
30303 to
30304 be
30305 uniform
30306 only
30307 for
30308 table
30309 sizes
30310 that
30311 occur
30312 in
30313 the
30314 application
30315 In
30316 particular
30317 if
30318 one
30319 uses
30320 dynamic
30321 resizing
30322 with
30323 exact
30324 doubling
30325 and
30326 halving
30327 of
30328 the
30329 table
30330 size
30331 s
30332 then
30333 the
30334 hash
30335 function
30336 needs
30337 to
30338 be
30339 uniform
30340 only
30341 when
30342 s
30343 is
30344 a
30345 power
30346 of
30347 two
30348 On
30349 the
30350 other
30351 hand
30352 some
30353 hashing
30354 algorithms
30355 provide
30356 uniform
30357 hashes
30358 only
30359 when
30360 s
30361 is
30362 a
30363 prime
30364 number7
30365 For
30366 open
30367 addressing
30368 schemes
30369 the
30370 hash
30371 function
30372 should
30373 also
30374 avoid
30375 clustering
30376 the
30377 mapping
30378 of
30379 two
30380 or
30381 more
30382 keys
30383 to
30384 consecutive
30385 slots
30386 Such
30387 clustering
30388 may
30389 cause
30390 the
30391 lookup
30392 cost
30393 to
30394 skyrocket
30395 even
30396 if
30397 the
30398 load
30399 factor
30400 is
30401 low
30402 and
30403 collisions
30404 are
30405 infrequent
30406 The
30407 popular
30408 multiplicative
30409 hash3
30410 is
30411 claimed
30412 to
30413 have
30414 particularly
30415 poor
30416 clustering
30417 behavior7
30418 Cryptographic
30419 hash
30420 functions
30421 are
30422 believed
30423 to
30424 provide
30425 good
30426 hash
30427 functions
30428 for
30429 any
30430 table
30431 size
30432 s
30433 either
30434 by
30435 modulo
30436 reduction
30437 or
30438 by
30439 bit
30440 masking
30441 They
30442 may
30443 also
30444 be
30445 appropriate
30446 if
30447 there
30448 is
30449 a
30450 risk
30451 of
30452 malicious
30453 users
30454 trying
30455 to
30456 sabotage
30457 a
30458 network
30459 service
30460 by
30461 submitting
30462 requests
30463 designed
30464 to
30465 generate
30466 a
30467 large
30468 number
30469 of
30470 collisions
30471 in
30472 the
30473 servers
30474 hash
30475 tables
30476 However
30477 the
30478 risk
30479 of
30480 sabotage
30481 can
30482 also
30483 be
30484 avoided
30485 by
30486 cheaper
30487 methods
30488 such
30489 as
30490 applying
30491 a
30492 secret
30493 salt
30494 to
30495 the
30496 data
30497 or
30498 using
30499 a
30500 universal
30501 hash
30502 function
30503 Perfect
30504 hash
30505 function
30506 If
30507 all
30508 keys
30509 are
30510 known
30511 ahead
30512 of
30513 time
30514 a
30515 perfect
30516 hash
30517 function
30518 can
30519 be
30520 used
30521 to
30522 create
30523 a
30524 perfect
30525 hash
30526 table
30527 that
30528 has
30529 no
30530 collisions
30531 If
30532 minimal
30533 perfect
30534 hashing
30535 is
30536 used
30537 every
30538 location
30539 in
30540 the
30541 hash
30542 table
30543 can
30544 be
30545 used
30546 as
30547 well
30548 Perfect
30549 hashing
30550 allows
30551 for
30552 constant
30553 time
30554 lookups
30555 in
30556 the
30557 worst
30558 case
30559 This
30560 is
30561 in
30562 contrast
30563 to
30564 most
30565 chaining
30566 and
30567 open
30568 addressing
30569 methods
30570 where
30571 the
30572 time
30573 for
30574 lookup
30575 is
30576 low
30577 on
30578 average
30579 but
30580 may
30581 be
30582 very
30583 large
30584 proportional
30585 to
30586 the
30587 number
30588 of
30589 entries
30590 for
30591 some
30592 sets
30593 of
30594 keys
30595 Key
30596 statistics
30597 A
30598 critical
30599 statistic
30600 for
30601 a
30602 hash
30603 table
30604 is
30605 called
30606 the
30607 load
30608 factor
30609 This
30610 is
30611 simply
30612 the
30613 number
30614 of
30615 entries
30616 divided
30617 by
30618 the
30619 number
30620 of
30621 buckets
30622 that
30623 is
30624 n
30625 k
30626 where
30627 n
30628 is
30629 the
30630 number
30631 of
30632 entries
30633 and
30634 k
30635 is
30636 the
30637 number
30638 of
30639 buckets
30640 If
30641 the
30642 load
30643 factor
30644 is
30645 kept
30646 reasonable
30647 the
30648 hash
30649 table
30650 should
30651 perform
30652 well
30653 provided
30654 the
30655 hashing
30656 is
30657 good
30658 If
30659 the
30660 load
30661 factor
30662 grows
30663 too
30664 large
30665 the
30666 hash
30667 table
30668 will
30669 become
30670 slow
30671 or
30672 it
30673 may
30674 fail
30675 to
30676 work
30677 depending
30678 on
30679 the
30680 method
30681 used
30682 The
30683 expected
30684 constant
30685 time
30686 property
30687 of
30688 a
30689 hash
30690 table
30691 assumes
30692 that
30693 the
30694 load
30695 factor
30696 is
30697 kept
30698 below
30699 some
30700 bound
30701 For
30702 a
30703 fixed
30704 number
30705 of
30706 buckets
30707 the
30708 time
30709 for
30710 a
30711 lookup
30712 grows
30713 with
30714 the
30715 number
30716 of
30717 entries
30718 and
30719 so
30720 does
30721 not
30722 achieve
30723 the
30724 desired
30725 constant
30726 time
30727 Second
30728 to
30729 that
30730 one
30731 can
30732 examine
30733 the
30734 variance
30735 of
30736 number
30737 of
30738 entries
30739 per
30740 bucket
30741 For
30742 example
30743 two
30744 tables
30745 both
30746 have
30747 1000
30748 entries
30749 and
30750 1000
30751 buckets
30752 one
30753 has
30754 exactly
30755 one
30756 entry
30757 in
30758 each
30759 bucket
30760 the
30761 other
30762 has
30763 all
30764 entries
30765 in
30766 the
30767 same
30768 bucket
30769 Clearly
30770 the
30771 hashing
30772 is
30773 not
30774 working
30775 in
30776 the
30777 second
30778 one
30779 A
30780 low
30781 load
30782 factor
30783 is
30784 not
30785 especially
30786 beneficial
30787 As
30788 the
30789 load
30790 factor
30791 approaches
30792 0
30793 the
30794 proportion
30795 of
30796 unused
30797 areas
30798 in
30799 the
30800 hash
30801 table
30802 increases
30803 but
30804 there
30805 is
30806 not
30807 necessarily
30808 any
30809 reduction
30810 in
30811 search
30812 cost
30813 This
30814 results
30815 in
30816 wasted
30817 memory
30818 Collision
30819 resolution
30820 Hash
30821 collisions
30822 are
30823 practically
30824 unavoidable
30825 when
30826 hashing
30827 a
30828 random
30829 subset
30830 of
30831 a
30832 large
30833 set
30834 of
30835 possible
30836 keys
30837 For
30838 example
30839 if
30840 2
30841 450
30842 keys
30843 are
30844 hashed
30845 into
30846 a
30847 million
30848 buckets
30849 even
30850 with
30851 a
30852 perfectly
30853 uniform
30854 random
30855 distribution
30856 according
30857 to
30858 the
30859 birthday
30860 problem
30861 there
30862 is
30863 approximately
30864 a
30865 95
30866 chance
30867 of
30868 at
30869 least
30870 two
30871 of
30872 the
30873 keys
30874 being
30875 hashed
30876 to
30877 the
30878 same
30879 slot
30880 Therefore
30881 most
30882 hash
30883 table
30884 implementations
30885 have
30886 some
30887 collision
30888 resolution
30889 strategy
30890 to
30891 handle
30892 such
30893 events
30894 Some
30895 common
30896 strategies
30897 are
30898 described
30899 below
30900 All
30901 these
30902 methods
30903 require
30904 that
30905 the
30906 keys
30907 or
30908 pointers
30909 to
30910 them
30911 be
30912 stored
30913 in
30914 the
30915 table
30916 together
30917 with
30918 the
30919 associated
30920 values
30921 Separate
30922 chaining
30923 Hash
30924 collision
30925 resolved
30926 by
30927 separate
30928 chaining
30929 In
30930 the
30931 method
30932 known
30933 as
30934 separate
30935 chaining
30936 each
30937 bucket
30938 is
30939 independent
30940 and
30941 has
30942 some
30943 sort
30944 of
30945 list
30946 of
30947 entries
30948 with
30949 the
30950 same
30951 index
30952 The
30953 time
30954 for
30955 hash
30956 table
30957 operations
30958 is
30959 the
30960 time
30961 to
30962 find
30963 the
30964 bucket
30965 which
30966 is
30967 constant
30968 plus
30969 the
30970 time
30971 for
30972 the
30973 list
30974 operation
30975 The
30976 technique
30977 is
30978 also
30979 called
30980 open
30981 hashing
30982 or
30983 closed
30984 addressing
30985 In
30986 a
30987 good
30988 hash
30989 table
30990 each
30991 bucket
30992 has
30993 zero
30994 or
30995 one
30996 entries
30997 and
30998 sometimes
30999 two
31000 or
31001 three
31002 but
31003 rarely
31004 more
31005 than
31006 that
31007 Therefore
31008 structures
31009 that
31010 are
31011 efficient
31012 in
31013 time
31014 and
31015 space
31016 for
31017 these
31018 cases
31019 are
31020 preferred
31021 Structures
31022 that
31023 are
31024 efficient
31025 for
31026 a
31027 fairly
31028 large
31029 number
31030 of
31031 entries
31032 per
31033 bucket
31034 are
31035 not
31036 needed
31037 or
31038 desirable
31039 If
31040 these
31041 cases
31042 happen
31043 often
31044 the
31045 hashing
31046 is
31047 not
31048 working
31049 well
31050 and
31051 this
31052 needs
31053 to
31054 be
31055 fixed
31056 Separate
31057 chaining
31058 with
31059 linked
31060 lists
31061 Chained
31062 hash
31063 tables
31064 with
31065 linked
31066 lists
31067 are
31068 popular
31069 because
31070 they
31071 require
31072 only
31073 basic
31074 data
31075 structures
31076 with
31077 simple
31078 algorithms
31079 and
31080 can
31081 use
31082 simple
31083 hash
31084 functions
31085 that
31086 are
31087 unsuitable
31088 for
31089 other
31090 methods
31091 The
31092 cost
31093 of
31094 a
31095 table
31096 operation
31097 is
31098 that
31099 of
31100 scanning
31101 the
31102 entries
31103 of
31104 the
31105 selected
31106 bucket
31107 for
31108 the
31109 desired
31110 key
31111 If
31112 the
31113 distribution
31114 of
31115 keys
31116 is
31117 sufficiently
31118 uniform
31119 the
31120 average
31121 cost
31122 of
31123 a
31124 lookup
31125 depends
31126 only
31127 on
31128 the
31129 average
31130 number
31131 of
31132 keys
31133 per
31134 bucket
31135 that
31136 is
31137 on
31138 the
31139 load
31140 factor
31141 Chained
31142 hash
31143 tables
31144 remain
31145 effective
31146 even
31147 when
31148 the
31149 number
31150 of
31151 table
31152 entries
31153 n
31154 is
31155 much
31156 higher
31157 than
31158 the
31159 number
31160 of
31161 slots
31162 Their
31163 performance
31164 degrades
31165 more
31166 gracefully
31167 linearly
31168 with
31169 the
31170 load
31171 factor
31172 For
31173 example
31174 a
31175 chained
31176 hash
31177 table
31178 with
31179 1000
31180 slots
31181 and
31182 10
31183 000
31184 stored
31185 keys
31186 load
31187 factor
31188 10
31189 is
31190 five
31191 to
31192 ten
31193 times
31194 slower
31195 than
31196 a
31197 10
31198 000
31199 slot
31200 table
31201 load
31202 factor
31203 1
31204 but
31205 still
31206 1000
31207 times
31208 faster
31209 than
31210 a
31211 plain
31212 sequential
31213 list
31214 and
31215 possibly
31216 even
31217 faster
31218 than
31219 a
31220 balanced
31221 search
31222 tree
31223 For
31224 separate
31225 chaining
31226 the
31227 worst
31228 case
31229 scenario
31230 is
31231 when
31232 all
31233 entries
31234 are
31235 inserted
31236 into
31237 the
31238 same
31239 bucket
31240 in
31241 which
31242 case
31243 the
31244 hash
31245 table
31246 is
31247 ineffective
31248 and
31249 the
31250 cost
31251 is
31252 that
31253 of
31254 searching
31255 the
31256 bucket
31257 data
31258 structure
31259 If
31260 the
31261 latter
31262 is
31263 a
31264 linear
31265 list
31266 the
31267 lookup
31268 procedure
31269 may
31270 have
31271 to
31272 scan
31273 all
31274 its
31275 entries
31276 so
31277 the
31278 worst
31279 case
31280 cost
31281 is
31282 proportional
31283 to
31284 the
31285 number
31286 n
31287 of
31288 entries
31289 in
31290 the
31291 table
31292 The
31293 bucket
31294 chains
31295 are
31296 often
31297 implemented
31298 as
31299 ordered
31300 lists
31301 sorted
31302 by
31303 the
31304 key
31305 field
31306 this
31307 choice
31308 approximately
31309 halves
31310 the
31311 average
31312 cost
31313 of
31314 unsuccessful
31315 lookups
31316 compared
31317 to
31318 an
31319 unordered
31320 list
31321 However
31322 if
31323 some
31324 keys
31325 are
31326 much
31327 more
31328 likely
31329 to
31330 come
31331 up
31332 than
31333 others
31334 an
31335 unordered
31336 list
31337 with
31338 move
31339 to
31340 front
31341 heuristic
31342 may
31343 be
31344 more
31345 effective
31346 More
31347 sophisticated
31348 data
31349 structures
31350 such
31351 as
31352 balanced
31353 search
31354 trees
31355 are
31356 worth
31357 considering
31358 only
31359 if
31360 the
31361 load
31362 factor
31363 is
31364 large
31365 about
31366 10
31367 or
31368 more
31369 or
31370 if
31371 the
31372 hash
31373 distribution
31374 is
31375 likely
31376 to
31377 be
31378 very
31379 non
31380 uniform
31381 or
31382 if
31383 one
31384 must
31385 guarantee
31386 good
31387 performance
31388 even
31389 in
31390 a
31391 worst
31392 case
31393 scenario
31394 However
31395 using
31396 a
31397 larger
31398 table
31399 and
31400 or
31401 a
31402 better
31403 hash
31404 function
31405 may
31406 be
31407 even
31408 more
31409 effective
31410 in
31411 those
31412 cases
31413 Chained
31414 hash
31415 tables
31416 also
31417 inherit
31418 the
31419 disadvantages
31420 of
31421 linked
31422 lists
31423 When
31424 storing
31425 small
31426 keys
31427 and
31428 values
31429 the
31430 space
31431 overhead
31432 of
31433 the
31434 next
31435 pointer
31436 in
31437 each
31438 entry
31439 record
31440 can
31441 be
31442 significant
31443 An
31444 additional
31445 disadvantage
31446 is
31447 that
31448 traversing
31449 a
31450 linked
31451 list
31452 has
31453 poor
31454 cache
31455 performance
31456 making
31457 the
31458 processor
31459 cache
31460 ineffective
31461 Separate
31462 chaining
31463 with
31464 list
31465 head
31466 cells
31467 Hash
31468 collision
31469 by
31470 separate
31471 chaining
31472 with
31473 head
31474 records
31475 in
31476 the
31477 bucket
31478 array
31479 Some
31480 chaining
31481 implementations
31482 store
31483 the
31484 first
31485 record
31486 of
31487 each
31488 chain
31489 in
31490 the
31491 slot
31492 array
31493 itself4
31494 The
31495 number
31496 of
31497 pointer
31498 traversals
31499 is
31500 decreased
31501 by
31502 one
31503 for
31504 most
31505 cases
31506 The
31507 purpose
31508 is
31509 to
31510 increase
31511 cache
31512 efficiency
31513 of
31514 hash
31515 table
31516 access
31517 The
31518 disadvantage
31519 is
31520 that
31521 an
31522 empty
31523 bucket
31524 takes
31525 the
31526 same
31527 space
31528 as
31529 a
31530 bucket
31531 with
31532 one
31533 entry
31534 To
31535 save
31536 space
31537 such
31538 hash
31539 tables
31540 often
31541 have
31542 about
31543 as
31544 many
31545 slots
31546 as
31547 stored
31548 entries
31549 meaning
31550 that
31551 many
31552 slots
31553 have
31554 two
31555 or
31556 more
31557 entries
31558 Separate
31559 chaining
31560 with
31561 other
31562 structures
31563 Instead
31564 of
31565 a
31566 list
31567 one
31568 can
31569 use
31570 any
31571 other
31572 data
31573 structure
31574 that
31575 supports
31576 the
31577 required
31578 operations
31579 For
31580 example
31581 by
31582 using
31583 a
31584 self
31585 balancing
31586 tree
31587 the
31588 theoretical
31589 worst
31590 case
31591 time
31592 of
31593 common
31594 hash
31595 table
31596 operations
31597 insertion
31598 deletion
31599 lookup
31600 can
31601 be
31602 brought
31603 down
31604 to
31605 Olog
31606 n
31607 rather
31608 than
31609 On
31610 However
31611 this
31612 approach
31613 is
31614 only
31615 worth
31616 the
31617 trouble
31618 and
31619 extra
31620 memory
31621 cost
31622 if
31623 long
31624 delays
31625 must
31626 be
31627 avoided
31628 at
31629 all
31630 costs
31631 eg
31632 in
31633 a
31634 real
31635 time
31636 application
31637 or
31638 if
31639 one
31640 must
31641 guard
31642 against
31643 many
31644 entries
31645 hashed
31646 to
31647 the
31648 same
31649 slot
31650 eg
31651 if
31652 one
31653 expects
31654 extremely
31655 non
31656 uniform
31657 distributions
31658 or
31659 in
31660 the
31661 case
31662 of
31663 web
31664 sites
31665 or
31666 other
31667 publicly
31668 accessible
31669 services
31670 which
31671 are
31672 vulnerable
31673 to
31674 malicious
31675 key
31676 distributions
31677 in
31678 requests
31679 The
31680 variant
31681 called
31682 array
31683 hash
31684 table
31685 uses
31686 a
31687 dynamic
31688 array
31689 to
31690 store
31691 all
31692 the
31693 entries
31694 that
31695 hash
31696 to
31697 the
31698 same
31699 slot8910
31700 Each
31701 newly
31702 inserted
31703 entry
31704 gets
31705 appended
31706 to
31707 the
31708 end
31709 of
31710 the
31711 dynamic
31712 array
31713 that
31714 is
31715 assigned
31716 to
31717 the
31718 slot
31719 The
31720 dynamic
31721 array
31722 is
31723 resized
31724 in
31725 an
31726 exact
31727 fit
31728 manner
31729 meaning
31730 it
31731 is
31732 grown
31733 only
31734 by
31735 as
31736 many
31737 bytes
31738 as
31739 needed
31740 Alternative
31741 techniques
31742 such
31743 as
31744 growing
31745 the
31746 array
31747 by
31748 block
31749 sizes
31750 or
31751 pages
31752 were
31753 found
31754 to
31755 improve
31756 insertion
31757 performance
31758 but
31759 at
31760 a
31761 cost
31762 in
31763 space
31764 This
31765 variation
31766 makes
31767 more
31768 efficient
31769 use
31770 of
31771 CPU
31772 caching
31773 and
31774 the
31775 translation
31776 lookaside
31777 buffer
31778 TLB
31779 because
31780 slot
31781 entries
31782 are
31783 stored
31784 in
31785 sequential
31786 memory
31787 positions
31788 It
31789 also
31790 dispenses
31791 with
31792 the
31793 next
31794 pointers
31795 that
31796 are
31797 required
31798 by
31799 linked
31800 lists
31801 which
31802 saves
31803 space
31804 Despite
31805 frequent
31806 array
31807 resizing
31808 space
31809 overheads
31810 incurred
31811 by
31812 operating
31813 system
31814 such
31815 as
31816 memory
31817 fragmentation
31818 were
31819 found
31820 to
31821 be
31822 small
31823 An
31824 elaboration
31825 on
31826 this
31827 approach
31828 is
31829 the
31830 so
31831 called
31832 dynamic
31833 perfect
31834 hashing
31835 11
31836 where
31837 a
31838 bucket
31839 that
31840 contains
31841 k
31842 entries
31843 is
31844 organized
31845 as
31846 a
31847 perfect
31848 hash
31849 table
31850 with
31851 k2
31852 slots
31853 While
31854 it
31855 uses
31856 more
31857 memory
31858 n2
31859 slots
31860 for
31861 n
31862 entries
31863 in
31864 the
31865 worst
31866 case
31867 and
31868 n
31869 k
31870 slots
31871 in
31872 the
31873 average
31874 case
31875 this
31876 variant
31877 has
31878 guaranteed
31879 constant
31880 worst
31881 case
31882 lookup
31883 time
31884 and
31885 low
31886 amortized
31887 time
31888 for
31889 insertion
31890 Open
31891 addressing
31892 Hash
31893 collision
31894 resolved
31895 by
31896 open
31897 addressing
31898 with
31899 linear
31900 probing
31901 interval
31902 1
31903 Note
31904 that
31905 Ted
31906 Baker
31907 has
31908 a
31909 unique
31910 hash
31911 but
31912 nevertheless
31913 collided
31914 with
31915 Sandra
31916 Dee
31917 that
31918 had
31919 previously
31920 collided
31921 with
31922 John
31923 Smith
31924 In
31925 another
31926 strategy
31927 called
31928 open
31929 addressing
31930 all
31931 entry
31932 records
31933 are
31934 stored
31935 in
31936 the
31937 bucket
31938 array
31939 itself
31940 When
31941 a
31942 new
31943 entry
31944 has
31945 to
31946 be
31947 inserted
31948 the
31949 buckets
31950 are
31951 examined
31952 starting
31953 with
31954 the
31955 hashed
31956 to
31957 slot
31958 and
31959 proceeding
31960 in
31961 some
31962 probe
31963 sequence
31964 until
31965 an
31966 unoccupied
31967 slot
31968 is
31969 found
31970 When
31971 searching
31972 for
31973 an
31974 entry
31975 the
31976 buckets
31977 are
31978 scanned
31979 in
31980 the
31981 same
31982 sequence
31983 until
31984 either
31985 the
31986 target
31987 record
31988 is
31989 found
31990 or
31991 an
31992 unused
31993 array
31994 slot
31995 is
31996 found
31997 which
31998 indicates
31999 that
32000 there
32001 is
32002 no
32003 such
32004 key
32005 in
32006 the
32007 table12
32008 The
32009 name
32010 open
32011 addressing
32012 refers
32013 to
32014 the
32015 fact
32016 that
32017 the
32018 location
32019 address
32020 of
32021 the
32022 item
32023 is
32024 not
32025 determined
32026 by
32027 its
32028 hash
32029 value
32030 This
32031 method
32032 is
32033 also
32034 called
32035 closed
32036 hashing
32037 it
32038 should
32039 not
32040 be
32041 confused
32042 with
32043 open
32044 hashing
32045 or
32046 closed
32047 addressing
32048 that
32049 usually
32050 mean
32051 separate
32052 chaining
32053 Well
32054 known
32055 probe
32056 sequences
32057 include
32058 Linear
32059 probing
32060 in
32061 which
32062 the
32063 interval
32064 between
32065 probes
32066 is
32067 fixed
32068 usually
32069 1
32070 Quadratic
32071 probing
32072 in
32073 which
32074 the
32075 interval
32076 between
32077 probes
32078 is
32079 increased
32080 by
32081 adding
32082 the
32083 successive
32084 outputs
32085 of
32086 a
32087 quadratic
32088 polynomial
32089 to
32090 the
32091 starting
32092 value
32093 given
32094 by
32095 the
32096 original
32097 hash
32098 computation
32099 Double
32100 hashing
32101 in
32102 which
32103 the
32104 interval
32105 between
32106 probes
32107 is
32108 computed
32109 by
32110 another
32111 hash
32112 function
32113 A
32114 drawback
32115 of
32116 all
32117 these
32118 open
32119 addressing
32120 schemes
32121 is
32122 that
32123 the
32124 number
32125 of
32126 stored
32127 entries
32128 cannot
32129 exceed
32130 the
32131 number
32132 of
32133 slots
32134 in
32135 the
32136 bucket
32137 array
32138 In
32139 fact
32140 even
32141 with
32142 good
32143 hash
32144 functions
32145 their
32146 performance
32147 dramatically
32148 degrades
32149 when
32150 the
32151 load
32152 factor
32153 grows
32154 beyond
32155 07
32156 or
32157 so
32158 For
32159 many
32160 applications
32161 these
32162 restrictions
32163 mandate
32164 the
32165 use
32166 of
32167 dynamic
32168 resizing
32169 with
32170 its
32171 attendant
32172 costs
32173 Open
32174 addressing
32175 schemes
32176 also
32177 put
32178 more
32179 stringent
32180 requirements
32181 on
32182 the
32183 hash
32184 function
32185 besides
32186 distributing
32187 the
32188 keys
32189 more
32190 uniformly
32191 over
32192 the
32193 buckets
32194 the
32195 function
32196 must
32197 also
32198 minimize
32199 the
32200 clustering
32201 of
32202 hash
32203 values
32204 that
32205 are
32206 consecutive
32207 in
32208 the
32209 probe
32210 order
32211 Using
32212 separate
32213 chaining
32214 the
32215 only
32216 concern
32217 is
32218 that
32219 too
32220 many
32221 objects
32222 map
32223 to
32224 the
32225 same
32226 hash
32227 value
32228 whether
32229 they
32230 are
32231 adjacent
32232 or
32233 nearby
32234 is
32235 completely
32236 irrelevant
32237 Open
32238 addressing
32239 only
32240 saves
32241 memory
32242 if
32243 the
32244 entries
32245 are
32246 small
32247 less
32248 than
32249 four
32250 times
32251 the
32252 size
32253 of
32254 a
32255 pointer
32256 and
32257 the
32258 load
32259 factor
32260 is
32261 not
32262 too
32263 small
32264 If
32265 the
32266 load
32267 factor
32268 is
32269 close
32270 to
32271 zero
32272 that
32273 is
32274 there
32275 are
32276 far
32277 more
32278 buckets
32279 than
32280 stored
32281 entries
32282 open
32283 addressing
32284 is
32285 wasteful
32286 even
32287 if
32288 each
32289 entry
32290 is
32291 just
32292 two
32293 words
32294 This
32295 graph
32296 compares
32297 the
32298 average
32299 number
32300 of
32301 cache
32302 misses
32303 required
32304 to
32305 look
32306 up
32307 elements
32308 in
32309 tables
32310 with
32311 chaining
32312 and
32313 linear
32314 probing
32315 As
32316 the
32317 table
32318 passes
32319 the
32320 80
32321 full
32322 mark
32323 linear
32324 probings
32325 performance
32326 drastically
32327 degrades
32328 Open
32329 addressing
32330 avoids
32331 the
32332 time
32333 overhead
32334 of
32335 allocating
32336 each
32337 new
32338 entry
32339 record
32340 and
32341 can
32342 be
32343 implemented
32344 even
32345 in
32346 the
32347 absence
32348 of
32349 a
32350 memory
32351 allocator
32352 It
32353 also
32354 avoids
32355 the
32356 extra
32357 indirection
32358 required
32359 to
32360 access
32361 the
32362 first
32363 entry
32364 of
32365 each
32366 bucket
32367 that
32368 is
32369 usually
32370 the
32371 only
32372 one
32373 It
32374 also
32375 has
32376 better
32377 locality
32378 of
32379 reference
32380 particularly
32381 with
32382 linear
32383 probing
32384 With
32385 small
32386 record
32387 sizes
32388 these
32389 factors
32390 can
32391 yield
32392 better
32393 performance
32394 than
32395 chaining
32396 particularly
32397 for
32398 lookups
32399 Hash
32400 tables
32401 with
32402 open
32403 addressing
32404 are
32405 also
32406 easier
32407 to
32408 serialize
32409 because
32410 they
32411 do
32412 not
32413 use
32414 pointers
32415 On
32416 the
32417 other
32418 hand
32419 normal
32420 open
32421 addressing
32422 is
32423 a
32424 poor
32425 choice
32426 for
32427 large
32428 elements
32429 because
32430 these
32431 elements
32432 fill
32433 entire
32434 CPU
32435 cache
32436 lines
32437 negating
32438 the
32439 cache
32440 advantage
32441 and
32442 a
32443 large
32444 amount
32445 of
32446 space
32447 is
32448 wasted
32449 on
32450 large
32451 empty
32452 table
32453 slots
32454 If
32455 the
32456 open
32457 addressing
32458 table
32459 only
32460 stores
32461 references
32462 to
32463 elements
32464 external
32465 storage
32466 it
32467 uses
32468 space
32469 comparable
32470 to
32471 chaining
32472 even
32473 for
32474 large
32475 records
32476 but
32477 loses
32478 its
32479 speed
32480 advantage
32481 Generally
32482 speaking
32483 open
32484 addressing
32485 is
32486 better
32487 used
32488 for
32489 hash
32490 tables
32491 with
32492 small
32493 records
32494 that
32495 can
32496 be
32497 stored
32498 within
32499 the
32500 table
32501 internal
32502 storage
32503 and
32504 fit
32505 in
32506 a
32507 cache
32508 line
32509 They
32510 are
32511 particularly
32512 suitable
32513 for
32514 elements
32515 of
32516 one
32517 word
32518 or
32519 less
32520 If
32521 the
32522 table
32523 is
32524 expected
32525 to
32526 have
32527 a
32528 high
32529 load
32530 factor
32531 the
32532 records
32533 are
32534 large
32535 or
32536 the
32537 data
32538 is
32539 variable
32540 sized
32541 chained
32542 hash
32543 tables
32544 often
32545 perform
32546 as
32547 well
32548 or
32549 better
32550 Ultimately
32551 used
32552 sensibly
32553 any
32554 kind
32555 of
32556 hash
32557 table
32558 algorithm
32559 is
32560 usually
32561 fast
32562 enough
32563 and
32564 the
32565 percentage
32566 of
32567 a
32568 calculation
32569 spent
32570 in
32571 hash
32572 table
32573 code
32574 is
32575 low
32576 Memory
32577 usage
32578 is
32579 rarely
32580 considered
32581 excessive
32582 Therefore
32583 in
32584 most
32585 cases
32586 the
32587 differences
32588 between
32589 these
32590 algorithms
32591 are
32592 marginal
32593 and
32594 other
32595 considerations
32596 typically
32597 come
32598 into
32599 play
32600 Coalesced
32601 hashing
32602 A
32603 hybrid
32604 of
32605 chaining
32606 and
32607 open
32608 addressing
32609 coalesced
32610 hashing
32611 links
32612 together
32613 chains
32614 of
32615 nodes
32616 within
32617 the
32618 table
32619 itself12
32620 Like
32621 open
32622 addressing
32623 it
32624 achieves
32625 space
32626 usage
32627 and
32628 somewhat
32629 diminished
32630 cache
32631 advantages
32632 over
32633 chaining
32634 Like
32635 chaining
32636 it
32637 does
32638 not
32639 exhibit
32640 clustering
32641 effects
32642 in
32643 fact
32644 the
32645 table
32646 can
32647 be
32648 efficiently
32649 filled
32650 to
32651 a
32652 high
32653 density
32654 Unlike
32655 chaining
32656 it
32657 cannot
32658 have
32659 more
32660 elements
32661 than
32662 table
32663 slots
32664 Cuckoo
32665 hashing
32666 Another
32667 alternative
32668 open
32669 addressing
32670 solution
32671 is
32672 cuckoo
32673 hashing
32674 which
32675 ensures
32676 constant
32677 lookup
32678 time
32679 in
32680 the
32681 worst
32682 case
32683 and
32684 constant
32685 amortized
32686 time
32687 for
32688 insertions
32689 and
32690 deletions
32691 It
32692 uses
32693 two
32694 or
32695 more
32696 hash
32697 functions
32698 which
32699 means
32700 any
32701 key
32702 value
32703 pair
32704 could
32705 be
32706 in
32707 two
32708 or
32709 more
32710 locations
32711 For
32712 lookup
32713 the
32714 first
32715 hash
32716 function
32717 is
32718 used
32719 if
32720 the
32721 key
32722 value
32723 is
32724 not
32725 found
32726 then
32727 the
32728 second
32729 hash
32730 function
32731 is
32732 used
32733 and
32734 so
32735 on
32736 If
32737 a
32738 collision
32739 happens
32740 during
32741 insertion
32742 then
32743 the
32744 key
32745 is
32746 re
32747 hashed
32748 with
32749 the
32750 second
32751 hash
32752 function
32753 to
32754 map
32755 it
32756 to
32757 another
32758 bucket
32759 If
32760 all
32761 hash
32762 functions
32763 are
32764 used
32765 and
32766 there
32767 is
32768 still
32769 a
32770 collision
32771 then
32772 the
32773 key
32774 it
32775 collided
32776 with
32777 is
32778 removed
32779 to
32780 make
32781 space
32782 for
32783 the
32784 new
32785 key
32786 and
32787 the
32788 old
32789 key
32790 is
32791 re
32792 hashed
32793 with
32794 one
32795 of
32796 the
32797 other
32798 hash
32799 functions
32800 which
32801 maps
32802 it
32803 to
32804 another
32805 bucket
32806 If
32807 that
32808 location
32809 also
32810 results
32811 in
32812 a
32813 collision
32814 then
32815 the
32816 process
32817 repeats
32818 until
32819 there
32820 is
32821 no
32822 collision
32823 or
32824 the
32825 process
32826 traverses
32827 all
32828 the
32829 buckets
32830 at
32831 which
32832 point
32833 the
32834 table
32835 is
32836 resized
32837 By
32838 combining
32839 multiple
32840 hash
32841 functions
32842 with
32843 multiple
32844 cells
32845 per
32846 bucket
32847 very
32848 high
32849 space
32850 utilisation
32851 can
32852 be
32853 achieved
32854 Hopscotch
32855 hashing
32856 Another
32857 alternative
32858 open
32859 addressing
32860 solution
32861 is
32862 hopscotch
32863 hashing
32864 13
32865 which
32866 combines
32867 the
32868 approaches
32869 of
32870 cuckoo
32871 hashing
32872 and
32873 linear
32874 probing
32875 yet
32876 seems
32877 in
32878 general
32879 to
32880 avoid
32881 their
32882 limitations
32883 In
32884 particular
32885 it
32886 works
32887 well
32888 even
32889 when
32890 the
32891 load
32892 factor
32893 grows
32894 beyond
32895 09
32896 The
32897 algorithm
32898 is
32899 well
32900 suited
32901 for
32902 implementing
32903 a
32904 resizable
32905 concurrent
32906 hash
32907 table
32908 The
32909 hopscotch
32910 hashing
32911 algorithm
32912 works
32913 by
32914 defining
32915 a
32916 neighborhood
32917 of
32918 buckets
32919 near
32920 the
32921 original
32922 hashed
32923 bucket
32924 where
32925 a
32926 given
32927 entry
32928 is
32929 always
32930 found
32931 Thus
32932 search
32933 is
32934 limited
32935 to
32936 the
32937 number
32938 of
32939 entries
32940 in
32941 this
32942 neighborhood
32943 which
32944 is
32945 logarithmic
32946 in
32947 the
32948 worst
32949 case
32950 constant
32951 on
32952 average
32953 and
32954 with
32955 proper
32956 alignment
32957 of
32958 the
32959 neighborhood
32960 typically
32961 requires
32962 one
32963 cache
32964 miss
32965 When
32966 inserting
32967 an
32968 entry
32969 one
32970 first
32971 attempts
32972 to
32973 add
32974 it
32975 to
32976 a
32977 bucket
32978 in
32979 the
32980 neighborhood
32981 However
32982 if
32983 all
32984 buckets
32985 in
32986 this
32987 neighborhood
32988 are
32989 occupied
32990 the
32991 algorithm
32992 traverses
32993 buckets
32994 in
32995 sequence
32996 until
32997 an
32998 open
32999 slot
33000 an
33001 unoccupied
33002 bucket
33003 is
33004 found
33005 as
33006 in
33007 linear
33008 probing
33009 At
33010 that
33011 point
33012 since
33013 the
33014 empty
33015 bucket
33016 is
33017 outside
33018 the
33019 neighborhood
33020 items
33021 are
33022 repeatedly
33023 displaced
33024 in
33025 a
33026 sequence
33027 of
33028 hops
33029 This
33030 is
33031 similar
33032 to
33033 cuckoo
33034 hashing
33035 but
33036 with
33037 the
33038 difference
33039 that
33040 in
33041 this
33042 case
33043 the
33044 empty
33045 slot
33046 is
33047 being
33048 moved
33049 into
33050 the
33051 neighborhood
33052 instead
33053 of
33054 items
33055 being
33056 moved
33057 out
33058 with
33059 the
33060 hope
33061 of
33062 eventually
33063 finding
33064 an
33065 empty
33066 slot
33067 Each
33068 hop
33069 brings
33070 the
33071 open
33072 slot
33073 closer
33074 to
33075 the
33076 original
33077 neighborhood
33078 without
33079 invalidating
33080 the
33081 neighborhood
33082 property
33083 of
33084 any
33085 of
33086 the
33087 buckets
33088 along
33089 the
33090 way
33091 In
33092 the
33093 end
33094 the
33095 open
33096 slot
33097 has
33098 been
33099 moved
33100 into
33101 the
33102 neighborhood
33103 and
33104 the
33105 entry
33106 being
33107 inserted
33108 can
33109 be
33110 added
33111 to
33112 it
33113 Robin
33114 Hood
33115 hashing
33116 One
33117 interesting
33118 variation
33119 on
33120 double
33121 hashing
33122 collision
33123 resolution
33124 is
33125 Robin
33126 Hood
33127 hashing1415
33128 The
33129 idea
33130 is
33131 that
33132 a
33133 new
33134 key
33135 may
33136 displace
33137 a
33138 key
33139 already
33140 inserted
33141 if
33142 its
33143 probe
33144 count
33145 is
33146 larger
33147 than
33148 that
33149 of
33150 the
33151 key
33152 at
33153 the
33154 current
33155 position
33156 The
33157 net
33158 effect
33159 of
33160 this
33161 is
33162 that
33163 it
33164 reduces
33165 worst
33166 case
33167 search
33168 times
33169 in
33170 the
33171 table
33172 This
33173 is
33174 similar
33175 to
33176 ordered
33177 hash
33178 tables16
33179 except
33180 that
33181 the
33182 criterion
33183 for
33184 bumping
33185 a
33186 key
33187 does
33188 not
33189 depend
33190 on
33191 a
33192 direct
33193 relationship
33194 between
33195 the
33196 keys
33197 Since
33198 both
33199 the
33200 worst
33201 case
33202 and
33203 the
33204 variation
33205 in
33206 the
33207 number
33208 of
33209 probes
33210 is
33211 reduced
33212 dramatically
33213 an
33214 interesting
33215 variation
33216 is
33217 to
33218 probe
33219 the
33220 table
33221 starting
33222 at
33223 the
33224 expected
33225 successful
33226 probe
33227 value
33228 and
33229 then
33230 expand
33231 from
33232 that
33233 position
33234 in
33235 both
33236 directions17
33237 External
33238 Robin
33239 Hashing
33240 is
33241 an
33242 extension
33243 of
33244 this
33245 algorithm
33246 where
33247 the
33248 table
33249 is
33250 stored
33251 in
33252 an
33253 external
33254 file
33255 and
33256 each
33257 table
33258 position
33259 corresponds
33260 to
33261 a
33262 fixed
33263 sized
33264 page
33265 or
33266 bucket
33267 with
33268 B
33269 records18
33270 2
33271 choice
33272 hashing
33273 2
33274 choice
33275 hashing
33276 employs
33277 2
33278 different
33279 hash
33280 functions
33281 h1x
33282 and
33283 h2x
33284 for
33285 the
33286 hash
33287 table
33288 Both
33289 hash
33290 functions
33291 are
33292 used
33293 to
33294 compute
33295 two
33296 table
33297 locations
33298 When
33299 an
33300 object
33301 is
33302 inserted
33303 in
33304 the
33305 table
33306 then
33307 it
33308 is
33309 placed
33310 in
33311 the
33312 table
33313 location
33314 that
33315 contains
33316 fewer
33317 objects
33318 with
33319 the
33320 default
33321 being
33322 the
33323 h1x
33324 table
33325 location
33326 if
33327 there
33328 is
33329 equality
33330 in
33331 bucket
33332 size
33333 2
33334 choice
33335 hashing
33336 employs
33337 the
33338 principle
33339 of
33340 the
33341 power
33342 of
33343 two
33344 choices19
33345 Dynamic
33346 resizing
33347 The
33348 good
33349 functioning
33350 of
33351 a
33352 hash
33353 table
33354 depends
33355 on
33356 the
33357 fact
33358 that
33359 the
33360 table
33361 size
33362 is
33363 proportional
33364 to
33365 the
33366 number
33367 of
33368 entries
33369 With
33370 a
33371 fixed
33372 size
33373 and
33374 the
33375 common
33376 structures
33377 it
33378 is
33379 similar
33380 to
33381 linear
33382 search
33383 except
33384 with
33385 a
33386 better
33387 constant
33388 factor
33389 In
33390 some
33391 cases
33392 the
33393 number
33394 of
33395 entries
33396 may
33397 be
33398 definitely
33399 known
33400 in
33401 advance
33402 for
33403 example
33404 keywords
33405 in
33406 a
33407 language
33408 More
33409 commonly
33410 this
33411 is
33412 not
33413 known
33414 for
33415 sure
33416 if
33417 only
33418 due
33419 to
33420 later
33421 changes
33422 in
33423 code
33424 and
33425 data
33426 It
33427 is
33428 one
33429 serious
33430 although
33431 common
33432 mistake
33433 to
33434 not
33435 provide
33436 any
33437 way
33438 for
33439 the
33440 table
33441 to
33442 resize
33443 A
33444 general
33445 purpose
33446 hash
33447 table
33448 class
33449 will
33450 almost
33451 always
33452 have
33453 some
33454 way
33455 to
33456 resize
33457 and
33458 it
33459 is
33460 good
33461 practice
33462 even
33463 for
33464 simple
33465 custom
33466 tables
33467 An
33468 implementation
33469 should
33470 check
33471 the
33472 load
33473 factor
33474 and
33475 do
33476 something
33477 if
33478 it
33479 becomes
33480 too
33481 large
33482 this
33483 needs
33484 to
33485 be
33486 done
33487 only
33488 on
33489 inserts
33490 since
33491 that
33492 is
33493 the
33494 only
33495 thing
33496 that
33497 would
33498 increase
33499 it
33500 To
33501 keep
33502 the
33503 load
33504 factor
33505 under
33506 a
33507 certain
33508 limit
33509 eg
33510 under
33511 3
33512 4
33513 many
33514 table
33515 implementations
33516 expand
33517 the
33518 table
33519 when
33520 items
33521 are
33522 inserted
33523 For
33524 example
33525 in
33526 Javas
33527 HashMap
33528 class
33529 the
33530 default
33531 load
33532 factor
33533 threshold
33534 for
33535 table
33536 expansion
33537 is
33538 075
33539 and
33540 in
33541 Pythons
33542 dict
33543 table
33544 size
33545 is
33546 resized
33547 when
33548 load
33549 factor
33550 is
33551 greater
33552 than
33553 2
33554 3
33555 Since
33556 buckets
33557 are
33558 usually
33559 implemented
33560 on
33561 top
33562 of
33563 a
33564 dynamic
33565 array
33566 and
33567 any
33568 constant
33569 proportion
33570 for
33571 resizing
33572 greater
33573 than
33574 1
33575 will
33576 keep
33577 the
33578 load
33579 factor
33580 under
33581 the
33582 desired
33583 limit
33584 the
33585 exact
33586 choice
33587 of
33588 the
33589 constant
33590 is
33591 determined
33592 by
33593 the
33594 same
33595 space
33596 time
33597 tradeoff
33598 as
33599 for
33600 dynamic
33601 arrays
33602 Resizing
33603 is
33604 accompanied
33605 by
33606 a
33607 full
33608 or
33609 incremental
33610 table
33611 rehash
33612 whereby
33613 existing
33614 items
33615 are
33616 mapped
33617 to
33618 new
33619 bucket
33620 locations
33621 To
33622 limit
33623 the
33624 proportion
33625 of
33626 memory
33627 wasted
33628 due
33629 to
33630 empty
33631 buckets
33632 some
33633 implementations
33634 also
33635 shrink
33636 the
33637 size
33638 of
33639 the
33640 table
33641 followed
33642 by
33643 a
33644 rehash
33645 when
33646 items
33647 are
33648 deleted
33649 From
33650 the
33651 point
33652 of
33653 space
33654 time
33655 tradeoffs
33656 this
33657 operation
33658 is
33659 similar
33660 to
33661 the
33662 deallocation
33663 in
33664 dynamic
33665 arrays
33666 Resizing
33667 by
33668 copying
33669 all
33670 entries
33671 A
33672 common
33673 approach
33674 is
33675 to
33676 automatically
33677 trigger
33678 a
33679 complete
33680 resizing
33681 when
33682 the
33683 load
33684 factor
33685 exceeds
33686 some
33687 threshold
33688 rmax
33689 Then
33690 a
33691 new
33692 larger
33693 table
33694 is
33695 allocated
33696 all
33697 the
33698 entries
33699 of
33700 the
33701 old
33702 table
33703 are
33704 removed
33705 and
33706 inserted
33707 into
33708 this
33709 new
33710 table
33711 and
33712 the
33713 old
33714 table
33715 is
33716 returned
33717 to
33718 the
33719 free
33720 storage
33721 pool
33722 Symmetrically
33723 when
33724 the
33725 load
33726 factor
33727 falls
33728 below
33729 a
33730 second
33731 threshold
33732 rmin
33733 all
33734 entries
33735 are
33736 moved
33737 to
33738 a
33739 new
33740 smaller
33741 table
33742 If
33743 the
33744 table
33745 size
33746 increases
33747 or
33748 decreases
33749 by
33750 a
33751 fixed
33752 percentage
33753 at
33754 each
33755 expansion
33756 the
33757 total
33758 cost
33759 of
33760 these
33761 resizings
33762 amortized
33763 over
33764 all
33765 insert
33766 and
33767 delete
33768 operations
33769 is
33770 still
33771 a
33772 constant
33773 independent
33774 of
33775 the
33776 number
33777 of
33778 entries
33779 n
33780 and
33781 of
33782 the
33783 number
33784 m
33785 of
33786 operations
33787 performed
33788 For
33789 example
33790 consider
33791 a
33792 table
33793 that
33794 was
33795 created
33796 with
33797 the
33798 minimum
33799 possible
33800 size
33801 and
33802 is
33803 doubled
33804 each
33805 time
33806 the
33807 load
33808 ratio
33809 exceeds
33810 some
33811 threshold
33812 If
33813 m
33814 elements
33815 are
33816 inserted
33817 into
33818 that
33819 table
33820 the
33821 total
33822 number
33823 of
33824 extra
33825 re
33826 insertions
33827 that
33828 occur
33829 in
33830 all
33831 dynamic
33832 resizings
33833 of
33834 the
33835 table
33836 is
33837 at
33838 most
33839 m
33840 1
33841 In
33842 other
33843 words
33844 dynamic
33845 resizing
33846 roughly
33847 doubles
33848 the
33849 cost
33850 of
33851 each
33852 insert
33853 or
33854 delete
33855 operation
33856 Incremental
33857 resizing
33858 Some
33859 hash
33860 table
33861 implementations
33862 notably
33863 in
33864 real
33865 time
33866 systems
33867 cannot
33868 pay
33869 the
33870 price
33871 of
33872 enlarging
33873 the
33874 hash
33875 table
33876 all
33877 at
33878 once
33879 because
33880 it
33881 may
33882 interrupt
33883 time
33884 critical
33885 operations
33886 If
33887 one
33888 cannot
33889 avoid
33890 dynamic
33891 resizing
33892 a
33893 solution
33894 is
33895 to
33896 perform
33897 the
33898 resizing
33899 gradually
33900 During
33901 the
33902 resize
33903 allocate
33904 the
33905 new
33906 hash
33907 table
33908 but
33909 keep
33910 the
33911 old
33912 table
33913 unchanged
33914 In
33915 each
33916 lookup
33917 or
33918 delete
33919 operation
33920 check
33921 both
33922 tables
33923 Perform
33924 insertion
33925 operations
33926 only
33927 in
33928 the
33929 new
33930 table
33931 At
33932 each
33933 insertion
33934 also
33935 move
33936 r
33937 elements
33938 from
33939 the
33940 old
33941 table
33942 to
33943 the
33944 new
33945 table
33946 When
33947 all
33948 elements
33949 are
33950 removed
33951 from
33952 the
33953 old
33954 table
33955 deallocate
33956 it
33957 To
33958 ensure
33959 that
33960 the
33961 old
33962 table
33963 is
33964 completely
33965 copied
33966 over
33967 before
33968 the
33969 new
33970 table
33971 itself
33972 needs
33973 to
33974 be
33975 enlarged
33976 it
33977 is
33978 necessary
33979 to
33980 increase
33981 the
33982 size
33983 of
33984 the
33985 table
33986 by
33987 a
33988 factor
33989 of
33990 at
33991 least
33992 r
33993 1
33994 r
33995 during
33996 resizing
33997 Monotonic
33998 keys
33999 If
34000 it
34001 is
34002 known
34003 that
34004 key
34005 values
34006 will
34007 always
34008 increase
34009 or
34010 decrease
34011 monotonically
34012 then
34013 a
34014 variation
34015 of
34016 consistent
34017 hashing
34018 can
34019 be
34020 achieved
34021 by
34022 keeping
34023 a
34024 list
34025 of
34026 the
34027 single
34028 most
34029 recent
34030 key
34031 value
34032 at
34033 each
34034 hash
34035 table
34036 resize
34037 operation
34038 Upon
34039 lookup
34040 keys
34041 that
34042 fall
34043 in
34044 the
34045 ranges
34046 defined
34047 by
34048 these
34049 list
34050 entries
34051 are
34052 directed
34053 to
34054 the
34055 appropriate
34056 hash
34057 function
34058 and
34059 indeed
34060 hash
34061 table
34062 both
34063 of
34064 which
34065 can
34066 be
34067 different
34068 for
34069 each
34070 range
34071 Since
34072 it
34073 is
34074 common
34075 to
34076 grow
34077 the
34078 overall
34079 number
34080 of
34081 entries
34082 by
34083 doubling
34084 there
34085 will
34086 only
34087 be
34088 OlgN
34089 ranges
34090 to
34091 check
34092 and
34093 binary
34094 search
34095 time
34096 for
34097 the
34098 redirection
34099 would
34100 be
34101 OlglgN
34102 As
34103 with
34104 consistent
34105 hashing
34106 this
34107 approach
34108 guarantees
34109 that
34110 any
34111 keys
34112 hash
34113 once
34114 issued
34115 will
34116 never
34117 change
34118 even
34119 when
34120 the
34121 hash
34122 table
34123 is
34124 later
34125 grown
34126 Other
34127 solutions
34128 Linear
34129 hashing20
34130 is
34131 a
34132 hash
34133 table
34134 algorithm
34135 that
34136 permits
34137 incremental
34138 hash
34139 table
34140 expansion
34141 It
34142 is
34143 implemented
34144 using
34145 a
34146 single
34147 hash
34148 table
34149 but
34150 with
34151 two
34152 possible
34153 look
34154 up
34155 functions
34156 Another
34157 way
34158 to
34159 decrease
34160 the
34161 cost
34162 of
34163 table
34164 resizing
34165 is
34166 to
34167 choose
34168 a
34169 hash
34170 function
34171 in
34172 such
34173 a
34174 way
34175 that
34176 the
34177 hashes
34178 of
34179 most
34180 values
34181 do
34182 not
34183 change
34184 when
34185 the
34186 table
34187 is
34188 resized
34189 This
34190 approach
34191 called
34192 consistent
34193 hashing
34194 is
34195 prevalent
34196 in
34197 disk
34198 based
34199 and
34200 distributed
34201 hashes
34202 where
34203 rehashing
34204 is
34205 prohibitively
34206 costly
34207 Performance
34208 analysis
34209 In
34210 the
34211 simplest
34212 model
34213 the
34214 hash
34215 function
34216 is
34217 completely
34218 unspecified
34219 and
34220 the
34221 table
34222 does
34223 not
34224 resize
34225 For
34226 the
34227 best
34228 possible
34229 choice
34230 of
34231 hash
34232 function
34233 a
34234 table
34235 of
34236 size
34237 k
34238 with
34239 open
34240 addressing
34241 has
34242 no
34243 collisions
34244 and
34245 holds
34246 up
34247 to
34248 k
34249 elements
34250 with
34251 a
34252 single
34253 comparison
34254 for
34255 successful
34256 lookup
34257 and
34258 a
34259 table
34260 of
34261 size
34262 k
34263 with
34264 chaining
34265 and
34266 n
34267 keys
34268 has
34269 the
34270 minimum
34271 max0
34272 n
34273 k
34274 collisions
34275 and
34276 O1
34277 n
34278 k
34279 comparisons
34280 for
34281 lookup
34282 For
34283 the
34284 worst
34285 choice
34286 of
34287 hash
34288 function
34289 every
34290 insertion
34291 causes
34292 a
34293 collision
34294 and
34295 hash
34296 tables
34297 degenerate
34298 to
34299 linear
34300 search
34301 with
34302 Ωn
34303 amortized
34304 comparisons
34305 per
34306 insertion
34307 and
34308 up
34309 to
34310 n
34311 comparisons
34312 for
34313 a
34314 successful
34315 lookup
34316 Adding
34317 rehashing
34318 to
34319 this
34320 model
34321 is
34322 straightforward
34323 As
34324 in
34325 a
34326 dynamic
34327 array
34328 geometric
34329 resizing
34330 by
34331 a
34332 factor
34333 of
34334 b
34335 implies
34336 that
34337 only
34338 n
34339 bi
34340 keys
34341 are
34342 inserted
34343 i
34344 or
34345 more
34346 times
34347 so
34348 that
34349 the
34350 total
34351 number
34352 of
34353 insertions
34354 is
34355 bounded
34356 above
34357 by
34358 bn
34359 b
34360 1
34361 which
34362 is
34363 On
34364 By
34365 using
34366 rehashing
34367 to
34368 maintain
34369 n
34370 k
34371 tables
34372 using
34373 both
34374 chaining
34375 and
34376 open
34377 addressing
34378 can
34379 have
34380 unlimited
34381 elements
34382 and
34383 perform
34384 successful
34385 lookup
34386 in
34387 a
34388 single
34389 comparison
34390 for
34391 the
34392 best
34393 choice
34394 of
34395 hash
34396 function
34397 In
34398 more
34399 realistic
34400 models
34401 the
34402 hash
34403 function
34404 is
34405 a
34406 random
34407 variable
34408 over
34409 a
34410 probability
34411 distribution
34412 of
34413 hash
34414 functions
34415 and
34416 performance
34417 is
34418 computed
34419 on
34420 average
34421 over
34422 the
34423 choice
34424 of
34425 hash
34426 function
34427 When
34428 this
34429 distribution
34430 is
34431 uniform
34432 the
34433 assumption
34434 is
34435 called
34436 simple
34437 uniform
34438 hashing
34439 and
34440 it
34441 can
34442 be
34443 shown
34444 that
34445 hashing
34446 with
34447 chaining
34448 requires
34449 Θ1
34450 n
34451 k
34452 comparisons
34453 on
34454 average
34455 for
34456 an
34457 unsuccessful
34458 lookup
34459 and
34460 hashing
34461 with
34462 open
34463 addressing
34464 requires
34465 Θ1
34466 1
34467 n
34468 k21
34469 Both
34470 these
34471 bounds
34472 are
34473 constant
34474 if
34475 we
34476 maintain
34477 n
34478 k
34479 c
34480 using
34481 table
34482 resizing
34483 where
34484 c
34485 is
34486 a
34487 fixed
34488 constant
34489 less
34490 than
34491 1
34492 Features
34493 Advantages
34494 The
34495 main
34496 advantage
34497 of
34498 hash
34499 tables
34500 over
34501 other
34502 table
34503 data
34504 structures
34505 is
34506 speed
34507 This
34508 advantage
34509 is
34510 more
34511 apparent
34512 when
34513 the
34514 number
34515 of
34516 entries
34517 is
34518 large
34519 Hash
34520 tables
34521 are
34522 particularly
34523 efficient
34524 when
34525 the
34526 maximum
34527 number
34528 of
34529 entries
34530 can
34531 be
34532 predicted
34533 in
34534 advance
34535 so
34536 that
34537 the
34538 bucket
34539 array
34540 can
34541 be
34542 allocated
34543 once
34544 with
34545 the
34546 optimum
34547 size
34548 and
34549 never
34550 resized
34551 If
34552 the
34553 set
34554 of
34555 key
34556 value
34557 pairs
34558 is
34559 fixed
34560 and
34561 known
34562 ahead
34563 of
34564 time
34565 so
34566 insertions
34567 and
34568 deletions
34569 are
34570 not
34571 allowed
34572 one
34573 may
34574 reduce
34575 the
34576 average
34577 lookup
34578 cost
34579 by
34580 a
34581 careful
34582 choice
34583 of
34584 the
34585 hash
34586 function
34587 bucket
34588 table
34589 size
34590 and
34591 internal
34592 data
34593 structures
34594 In
34595 particular
34596 one
34597 may
34598 be
34599 able
34600 to
34601 devise
34602 a
34603 hash
34604 function
34605 that
34606 is
34607 collision
34608 free
34609 or
34610 even
34611 perfect
34612 see
34613 below
34614 In
34615 this
34616 case
34617 the
34618 keys
34619 need
34620 not
34621 be
34622 stored
34623 in
34624 the
34625 table
34626 Drawbacks
34627 Although
34628 operations
34629 on
34630 a
34631 hash
34632 table
34633 take
34634 constant
34635 time
34636 on
34637 average
34638 the
34639 cost
34640 of
34641 a
34642 good
34643 hash
34644 function
34645 can
34646 be
34647 significantly
34648 higher
34649 than
34650 the
34651 inner
34652 loop
34653 of
34654 the
34655 lookup
34656 algorithm
34657 for
34658 a
34659 sequential
34660 list
34661 or
34662 search
34663 tree
34664 Thus
34665 hash
34666 tables
34667 are
34668 not
34669 effective
34670 when
34671 the
34672 number
34673 of
34674 entries
34675 is
34676 very
34677 small
34678 However
34679 in
34680 some
34681 cases
34682 the
34683 high
34684 cost
34685 of
34686 computing
34687 the
34688 hash
34689 function
34690 can
34691 be
34692 mitigated
34693 by
34694 saving
34695 the
34696 hash
34697 value
34698 together
34699 with
34700 the
34701 key
34702 For
34703 certain
34704 string
34705 processing
34706 applications
34707 such
34708 as
34709 spell
34710 checking
34711 hash
34712 tables
34713 may
34714 be
34715 less
34716 efficient
34717 than
34718 tries
34719 finite
34720 automata
34721 or
34722 Judy
34723 arrays
34724 Also
34725 if
34726 each
34727 key
34728 is
34729 represented
34730 by
34731 a
34732 small
34733 enough
34734 number
34735 of
34736 bits
34737 then
34738 instead
34739 of
34740 a
34741 hash
34742 table
34743 one
34744 may
34745 use
34746 the
34747 key
34748 directly
34749 as
34750 the
34751 index
34752 into
34753 an
34754 array
34755 of
34756 values
34757 Note
34758 that
34759 there
34760 are
34761 no
34762 collisions
34763 in
34764 this
34765 case
34766 The
34767 entries
34768 stored
34769 in
34770 a
34771 hash
34772 table
34773 can
34774 be
34775 enumerated
34776 efficiently
34777 at
34778 constant
34779 cost
34780 per
34781 entry
34782 but
34783 only
34784 in
34785 some
34786 pseudo
34787 random
34788 order
34789 Therefore
34790 there
34791 is
34792 no
34793 efficient
34794 way
34795 to
34796 locate
34797 an
34798 entry
34799 whose
34800 key
34801 is
34802 nearest
34803 to
34804 a
34805 given
34806 key
34807 Listing
34808 all
34809 n
34810 entries
34811 in
34812 some
34813 specific
34814 order
34815 generally
34816 requires
34817 a
34818 separate
34819 sorting
34820 step
34821 whose
34822 cost
34823 is
34824 proportional
34825 to
34826 logn
34827 per
34828 entry
34829 In
34830 comparison
34831 ordered
34832 search
34833 trees
34834 have
34835 lookup
34836 and
34837 insertion
34838 cost
34839 proportional
34840 to
34841 logn
34842 but
34843 allow
34844 finding
34845 the
34846 nearest
34847 key
34848 at
34849 about
34850 the
34851 same
34852 cost
34853 and
34854 ordered
34855 enumeration
34856 of
34857 all
34858 entries
34859 at
34860 constant
34861 cost
34862 per
34863 entry
34864 If
34865 the
34866 keys
34867 are
34868 not
34869 stored
34870 because
34871 the
34872 hash
34873 function
34874 is
34875 collision
34876 free
34877 there
34878 may
34879 be
34880 no
34881 easy
34882 way
34883 to
34884 enumerate
34885 the
34886 keys
34887 that
34888 are
34889 present
34890 in
34891 the
34892 table
34893 at
34894 any
34895 given
34896 moment
34897 Although
34898 the
34899 average
34900 cost
34901 per
34902 operation
34903 is
34904 constant
34905 and
34906 fairly
34907 small
34908 the
34909 cost
34910 of
34911 a
34912 single
34913 operation
34914 may
34915 be
34916 quite
34917 high
34918 In
34919 particular
34920 if
34921 the
34922 hash
34923 table
34924 uses
34925 dynamic
34926 resizing
34927 an
34928 insertion
34929 or
34930 deletion
34931 operation
34932 may
34933 occasionally
34934 take
34935 time
34936 proportional
34937 to
34938 the
34939 number
34940 of
34941 entries
34942 This
34943 may
34944 be
34945 a
34946 serious
34947 drawback
34948 in
34949 real
34950 time
34951 or
34952 interactive
34953 applications
34954 Hash
34955 tables
34956 in
34957 general
34958 exhibit
34959 poor
34960 locality
34961 of
34962 reference
34963 that
34964 is
34965 the
34966 data
34967 to
34968 be
34969 accessed
34970 is
34971 distributed
34972 seemingly
34973 at
34974 random
34975 in
34976 memory
34977 Because
34978 hash
34979 tables
34980 cause
34981 access
34982 patterns
34983 that
34984 jump
34985 around
34986 this
34987 can
34988 trigger
34989 microprocessor
34990 cache
34991 misses
34992 that
34993 cause
34994 long
34995 delays
34996 Compact
34997 data
34998 structures
34999 such
35000 as
35001 arrays
35002 searched
35003 with
35004 linear
35005 search
35006 may
35007 be
35008 faster
35009 if
35010 the
35011 table
35012 is
35013 relatively
35014 small
35015 and
35016 keys
35017 are
35018 compact
35019 The
35020 optimal
35021 performance
35022 point
35023 varies
35024 from
35025 system
35026 to
35027 system
35028 Hash
35029 tables
35030 become
35031 quite
35032 inefficient
35033 when
35034 there
35035 are
35036 many
35037 collisions
35038 While
35039 extremely
35040 uneven
35041 hash
35042 distributions
35043 are
35044 extremely
35045 unlikely
35046 to
35047 arise
35048 by
35049 chance
35050 a
35051 malicious
35052 adversary
35053 with
35054 knowledge
35055 of
35056 the
35057 hash
35058 function
35059 may
35060 be
35061 able
35062 to
35063 supply
35064 information
35065 to
35066 a
35067 hash
35068 that
35069 creates
35070 worst
35071 case
35072 behavior
35073 by
35074 causing
35075 excessive
35076 collisions
35077 resulting
35078 in
35079 very
35080 poor
35081 performance
35082 eg
35083 a
35084 denial
35085 of
35086 service
35087 attack22
35088 In
35089 critical
35090 applications
35091 universal
35092 hashing
35093 can
35094 be
35095 used
35096 a
35097 data
35098 structure
35099 with
35100 better
35101 worst
35102 case
35103 guarantees
35104 may
35105 be
35106 preferable23
35107 Uses
35108 Question
35109 book
35110 newsvg
35111 This
35112 section
35113 does
35114 not
35115 cite
35116 any
35117 references
35118 or
35119 sources
35120 Please
35121 help
35122 improve
35123 this
35124 section
35125 by
35126 adding
35127 citations
35128 to
35129 reliable
35130 sources
35131 Unsourced
35132 material
35133 may
35134 be
35135 challenged
35136 and
35137 removed
35138 July
35139 2013
35140 Associative
35141 arrays
35142 Hash
35143 tables
35144 are
35145 commonly
35146 used
35147 to
35148 implement
35149 many
35150 types
35151 of
35152 in
35153 memory
35154 tables
35155 They
35156 are
35157 used
35158 to
35159 implement
35160 associative
35161 arrays
35162 arrays
35163 whose
35164 indices
35165 are
35166 arbitrary
35167 strings
35168 or
35169 other
35170 complicated
35171 objects
35172 especially
35173 in
35174 interpreted
35175 programming
35176 languages
35177 like
35178 Ruby
35179 Python
35180 and
35181 PHP
35182 When
35183 storing
35184 a
35185 new
35186 item
35187 into
35188 a
35189 multimap
35190 and
35191 a
35192 hash
35193 collision
35194 occurs
35195 the
35196 multimap
35197 unconditionally
35198 stores
35199 both
35200 items
35201 When
35202 storing
35203 a
35204 new
35205 item
35206 into
35207 a
35208 typical
35209 associative
35210 array
35211 and
35212 a
35213 hash
35214 collision
35215 occurs
35216 but
35217 the
35218 actual
35219 keys
35220 themselves
35221 are
35222 different
35223 the
35224 associative
35225 array
35226 likewise
35227 stores
35228 both
35229 items
35230 However
35231 if
35232 the
35233 key
35234 of
35235 the
35236 new
35237 item
35238 exactly
35239 matches
35240 the
35241 key
35242 of
35243 an
35244 old
35245 item
35246 the
35247 associative
35248 array
35249 typically
35250 erases
35251 the
35252 old
35253 item
35254 and
35255 overwrites
35256 it
35257 with
35258 the
35259 new
35260 item
35261 so
35262 every
35263 item
35264 in
35265 the
35266 table
35267 has
35268 a
35269 unique
35270 key
35271 Database
35272 indexing
35273 Hash
35274 tables
35275 may
35276 also
35277 be
35278 used
35279 as
35280 disk
35281 based
35282 data
35283 structures
35284 and
35285 database
35286 indices
35287 such
35288 as
35289 in
35290 dbm
35291 although
35292 B
35293 trees
35294 are
35295 more
35296 popular
35297 in
35298 these
35299 applications
35300 Caches
35301 Hash
35302 tables
35303 can
35304 be
35305 used
35306 to
35307 implement
35308 caches
35309 auxiliary
35310 data
35311 tables
35312 that
35313 are
35314 used
35315 to
35316 speed
35317 up
35318 the
35319 access
35320 to
35321 data
35322 that
35323 is
35324 primarily
35325 stored
35326 in
35327 slower
35328 media
35329 In
35330 this
35331 application
35332 hash
35333 collisions
35334 can
35335 be
35336 handled
35337 by
35338 discarding
35339 one
35340 of
35341 the
35342 two
35343 colliding
35344 entries
35345 usually
35346 erasing
35347 the
35348 old
35349 item
35350 that
35351 is
35352 currently
35353 stored
35354 in
35355 the
35356 table
35357 and
35358 overwriting
35359 it
35360 with
35361 the
35362 new
35363 item
35364 so
35365 every
35366 item
35367 in
35368 the
35369 table
35370 has
35371 a
35372 unique
35373 hash
35374 value
35375 Sets
35376 Besides
35377 recovering
35378 the
35379 entry
35380 that
35381 has
35382 a
35383 given
35384 key
35385 many
35386 hash
35387 table
35388 implementations
35389 can
35390 also
35391 tell
35392 whether
35393 such
35394 an
35395 entry
35396 exists
35397 or
35398 not
35399 Those
35400 structures
35401 can
35402 therefore
35403 be
35404 used
35405 to
35406 implement
35407 a
35408 set
35409 data
35410 structure
35411 which
35412 merely
35413 records
35414 whether
35415 a
35416 given
35417 key
35418 belongs
35419 to
35420 a
35421 specified
35422 set
35423 of
35424 keys
35425 In
35426 this
35427 case
35428 the
35429 structure
35430 can
35431 be
35432 simplified
35433 by
35434 eliminating
35435 all
35436 parts
35437 that
35438 have
35439 to
35440 do
35441 with
35442 the
35443 entry
35444 values
35445 Hashing
35446 can
35447 be
35448 used
35449 to
35450 implement
35451 both
35452 static
35453 and
35454 dynamic
35455 sets
35456 Object
35457 representation
35458 Several
35459 dynamic
35460 languages
35461 such
35462 as
35463 Perl
35464 Python
35465 JavaScript
35466 and
35467 Ruby
35468 use
35469 hash
35470 tables
35471 to
35472 implement
35473 objects
35474 In
35475 this
35476 representation
35477 the
35478 keys
35479 are
35480 the
35481 names
35482 of
35483 the
35484 members
35485 and
35486 methods
35487 of
35488 the
35489 object
35490 and
35491 the
35492 values
35493 are
35494 pointers
35495 to
35496 the
35497 corresponding
35498 member
35499 or
35500 method
35501 Unique
35502 data
35503 representation
35504 Hash
35505 tables
35506 can
35507 be
35508 used
35509 by
35510 some
35511 programs
35512 to
35513 avoid
35514 creating
35515 multiple
35516 character
35517 strings
35518 with
35519 the
35520 same
35521 contents
35522 For
35523 that
35524 purpose
35525 all
35526 strings
35527 in
35528 use
35529 by
35530 the
35531 program
35532 are
35533 stored
35534 in
35535 a
35536 single
35537 string
35538 pool
35539 implemented
35540 as
35541 a
35542 hash
35543 table
35544 which
35545 is
35546 checked
35547 whenever
35548 a
35549 new
35550 string
35551 has
35552 to
35553 be
35554 created
35555 This
35556 technique
35557 was
35558 introduced
35559 in
35560 Lisp
35561 interpreters
35562 under
35563 the
35564 name
35565 hash
35566 consing
35567 and
35568 can
35569 be
35570 used
35571 with
35572 many
35573 other
35574 kinds
35575 of
35576 data
35577 expression
35578 trees
35579 in
35580 a
35581 symbolic
35582 algebra
35583 system
35584 records
35585 in
35586 a
35587 database
35588 files
35589 in
35590 a
35591 file
35592 system
35593 binary
35594 decision
35595 diagrams
35596 etc
35597 String
35598 interning
35599 Main
35600 article
35601 String
35602 interning
35603 Implementations
35604 In
35605 programming
35606 languages
35607 Many
35608 programming
35609 languages
35610 provide
35611 hash
35612 table
35613 functionality
35614 either
35615 as
35616 built
35617 in
35618 associative
35619 arrays
35620 or
35621 as
35622 standard
35623 library
35624 modules
35625 In
35626 C
35627 11
35628 for
35629 example
35630 the
35631 unordered
35632 map
35633 class
35634 provides
35635 hash
35636 tables
35637 for
35638 keys
35639 and
35640 values
35641 of
35642 arbitrary
35643 type
35644 In
35645 PHP
35646 5
35647 the
35648 Zend
35649 2
35650 engine
35651 uses
35652 one
35653 of
35654 the
35655 hash
35656 functions
35657 from
35658 Daniel
35659 J
35660 Bernstein
35661 to
35662 generate
35663 the
35664 hash
35665 values
35666 used
35667 in
35668 managing
35669 the
35670 mappings
35671 of
35672 data
35673 pointers
35674 stored
35675 in
35676 a
35677 hash
35678 table
35679 In
35680 the
35681 PHP
35682 source
35683 code
35684 it
35685 is
35686 labelled
35687 as
35688 DJBX33A
35689 Daniel
35690 J
35691 Bernstein
35692 Times
35693 33
35694 with
35695 Addition
35696 Pythons
35697 built
35698 in
35699 hash
35700 table
35701 implementation
35702 in
35703 the
35704 form
35705 of
35706 the
35707 dict
35708 type
35709 as
35710 well
35711 as
35712 Perls
35713 hash
35714 type
35715 are
35716 used
35717 internally
35718 to
35719 implement
35720 namespaces
35721 and
35722 therefore
35723 need
35724 to
35725 pay
35726 more
35727 attention
35728 to
35729 security
35730 ie
35731 collision
35732 attacks
35733 In
35734 the
35735 NET
35736 Framework
35737 support
35738 for
35739 hash
35740 tables
35741 is
35742 provided
35743 via
35744 the
35745 non
35746 generic
35747 Hashtable
35748 and
35749 generic
35750 Dictionary
35751 classes
35752 which
35753 store
35754 key
35755 value
35756 pairs
35757 and
35758 the
35759 generic
35760 HashSet
35761 class
35762 which
35763 stores
35764 only
35765 values
35766 Independent
35767 packages
35768 SparseHash
35769 formerly
35770 Google
35771 SparseHash
35772 An
35773 extremely
35774 memory
35775 efficient
35776 hash
35777 map
35778 implementation
35779 with
35780 only
35781 2
35782 bits
35783 entry
35784 of
35785 overhead
35786 The
35787 SparseHash
35788 library
35789 has
35790 several
35791 C
35792 hash
35793 map
35794 implementations
35795 with
35796 different
35797 performance
35798 characteristics
35799 including
35800 one
35801 that
35802 optimizes
35803 for
35804 memory
35805 use
35806 and
35807 another
35808 that
35809 optimizes
35810 for
35811 speed
35812 Sunrise
35813 DD
35814 An
35815 open
35816 source
35817 C
35818 library
35819 for
35820 hash
35821 table
35822 storage
35823 of
35824 arbitrary
35825 data
35826 objects
35827 with
35828 lock
35829 free
35830 lookups
35831 built
35832 in
35833 reference
35834 counting
35835 and
35836 guaranteed
35837 order
35838 iteration
35839 The
35840 library
35841 can
35842 participate
35843 in
35844 external
35845 reference
35846 counting
35847 systems
35848 or
35849 use
35850 its
35851 own
35852 built
35853 in
35854 reference
35855 counting
35856 It
35857 comes
35858 with
35859 a
35860 variety
35861 of
35862 hash
35863 functions
35864 and
35865 allows
35866 the
35867 use
35868 of
35869 runtime
35870 supplied
35871 hash
35872 functions
35873 via
35874 callback
35875 mechanism
35876 Source
35877 code
35878 is
35879 well
35880 documented
35881 uthash
35882 This
35883 is
35884 an
35885 easy
35886 to
35887 use
35888 hash
35889 table
35890 for
35891 C
35892 structures
35893 History
35894 The
35895 idea
35896 of
35897 hashing
35898 arose
35899 independently
35900 in
35901 different
35902 places
35903 In
35904 January
35905 1953
35906 H
35907 P
35908 Luhn
35909 wrote
35910 an
35911 internal
35912 IBM
35913 memorandum
35914 that
35915 used
35916 hashing
35917 with
35918 chaining24
35919 G
35920 N
35921 Amdahl
35922 E
35923 M
35924 Boehme
35925 N
35926 Rochester
35927 and
35928 Arthur
35929 Samuel
35930 implemented
35931 a
35932 program
35933 using
35934 hashing
35935 at
35936 about
35937 the
35938 same
35939 time
35940 Open
35941 addressing
35942 with
35943 linear
35944 probing
35945 relatively
35946 prime
35947 stepping
35948 is
35949 cr
35950 ed
35951 to
35952 Amdahl
35953 but
35954 Ershov
35955 in
35956 Russia
35957 had
35958 the
35959 same
35960 idea24
35961 See
35962 also
35963 Rabin
35964 Karp
35965 string
35966 search
35967 algorithm
35968 Stable
35969 hashing
35970 Consistent
35971 hashing
35972 Extendible
35973 hashing
35974 Lazy
35975 deletion
35976 Pearson
35977 hashing
35978 Related
35979 data
35980 structures
35981 There
35982 are
35983 several
35984 data
35985 structures
35986 that
35987 use
35988 hash
35989 functions
35990 but
35991 cannot
35992 be
35993 considered
35994 special
35995 cases
35996 of
35997 hash
35998 tables
35999 Bloom
36000 filter
36001 memory
36002 efficient
36003 data
36004 structure
36005 designed
36006 for
36007 constant
36008 time
36009 approximate
36010 lookups
36011 uses
36012 hash
36013 functions
36014 and
36015 can
36016 be
36017 seen
36018 as
36019 an
36020 approximate
36021 hash
36022 table
36023 Distributed
36024 hash
36025 table
36026 DHT
36027 a
36028 resilient
36029 dynamic
36030 table
36031 spread
36032 over
36033 several
36034 nodes
36035 of
36036 a
36037 network
36038 Hash
36039 array
36040 mapped
36041 trie
36042 a
36043 trie
36044 structure
36045 similar
36046 to
36047 the
36048 array
36049 mapped
36050 trie
36051 but
36052 where
36053 each
36054 key
36055 is
36056 hashed
36057 first
36058 A
36059 red
36060 black
36061 tree
36062 is
36063 a
36064 data
36065 structure
36066 which
36067 is
36068 a
36069 type
36070 of
36071 self
36072 balancing
36073 binary
36074 search
36075 tree
36076 Balance
36077 is
36078 preserved
36079 by
36080 painting
36081 each
36082 node
36083 of
36084 the
36085 tree
36086 with
36087 one
36088 of
36089 two
36090 colors
36091 typically
36092 called
36093 red
36094 and
36095 black
36096 in
36097 a
36098 way
36099 that
36100 satisfies
36101 certain
36102 properties
36103 which
36104 collectively
36105 constrain
36106 how
36107 unbalanced
36108 the
36109 tree
36110 can
36111 become
36112 in
36113 the
36114 worst
36115 case
36116 When
36117 the
36118 tree
36119 is
36120 modified
36121 the
36122 new
36123 tree
36124 is
36125 subsequently
36126 rearranged
36127 and
36128 repainted
36129 to
36130 restore
36131 the
36132 coloring
36133 properties
36134 The
36135 properties
36136 are
36137 designed
36138 in
36139 such
36140 a
36141 way
36142 that
36143 this
36144 rearranging
36145 and
36146 recoloring
36147 can
36148 be
36149 performed
36150 efficiently
36151 The
36152 balancing
36153 of
36154 the
36155 tree
36156 is
36157 not
36158 perfect
36159 but
36160 it
36161 is
36162 good
36163 enough
36164 to
36165 allow
36166 it
36167 to
36168 guarantee
36169 searching
36170 in
36171 O
36172 log
36173 n
36174 time
36175 where
36176 n
36177 is
36178 the
36179 total
36180 number
36181 of
36182 elements
36183 in
36184 the
36185 tree
36186 The
36187 insertion
36188 and
36189 deletion
36190 operations
36191 along
36192 with
36193 the
36194 tree
36195 rearrangement
36196 and
36197 recoloring
36198 are
36199 also
36200 performed
36201 in
36202 O
36203 log
36204 n
36205 time
36206 1
36207 Tracking
36208 the
36209 color
36210 of
36211 each
36212 node
36213 requires
36214 only
36215 1
36216 bit
36217 of
36218 information
36219 per
36220 node
36221 because
36222 there
36223 are
36224 only
36225 two
36226 colors
36227 The
36228 tree
36229 does
36230 not
36231 contain
36232 any
36233 other
36234 data
36235 specific
36236 to
36237 its
36238 being
36239 a
36240 red
36241 black
36242 tree
36243 so
36244 its
36245 memory
36246 footprint
36247 is
36248 almost
36249 identical
36250 to
36251 a
36252 classic
36253 uncolored
36254 binary
36255 search
36256 tree
36257 In
36258 many
36259 cases
36260 the
36261 additional
36262 bit
36263 of
36264 information
36265 can
36266 be
36267 stored
36268 at
36269 no
36270 additional
36271 memory
36272 cost
36273 The
36274 original
36275 data
36276 structure
36277 was
36278 invented
36279 in
36280 1972
36281 by
36282 Rudolf
36283 Bayer
36284 2
36285 and
36286 named
36287 symmetric
36288 binary
36289 B
36290 tree
36291 but
36292 acquired
36293 its
36294 modern
36295 name
36296 in
36297 a
36298 paper
36299 in
36300 1978
36301 by
36302 Leonidas
36303 J
36304 Guibas
36305 and
36306 Robert
36307 Sedgewick
36308 entitled
36309 A
36310 Dichromatic
36311 Framework
36312 for
36313 Balanced
36314 Trees
36315 3
36316 The
36317 color
36318 red
36319 was
36320 chosen
36321 because
36322 it
36323 was
36324 the
36325 best
36326 looking
36327 color
36328 produced
36329 by
36330 the
36331 color
36332 laser
36333 printer
36334 available
36335 to
36336 the
36337 authors
36338 while
36339 working
36340 at
36341 Xerox
36342 PARC
36343 4
36344 Terminology
36345 A
36346 red
36347 black
36348 tree
36349 is
36350 a
36351 special
36352 type
36353 of
36354 binary
36355 tree
36356 used
36357 in
36358 computer
36359 science
36360 to
36361 organize
36362 pieces
36363 of
36364 comparable
36365 data
36366 such
36367 as
36368 text
36369 fragments
36370 or
36371 numbers
36372 The
36373 leaf
36374 nodes
36375 of
36376 red
36377 black
36378 trees
36379 do
36380 not
36381 contain
36382 data
36383 These
36384 leaves
36385 need
36386 not
36387 be
36388 explicit
36389 in
36390 computer
36391 memory—a
36392 null
36393 child
36394 pointer
36395 can
36396 encode
36397 the
36398 fact
36399 that
36400 this
36401 child
36402 is
36403 a
36404 leaf—but
36405 it
36406 simplifies
36407 some
36408 algorithms
36409 for
36410 operating
36411 on
36412 red
36413 black
36414 trees
36415 if
36416 the
36417 leaves
36418 really
36419 are
36420 explicit
36421 nodes
36422 To
36423 save
36424 memory
36425 sometimes
36426 a
36427 single
36428 sentinel
36429 node
36430 performs
36431 the
36432 role
36433 of
36434 all
36435 leaf
36436 nodes
36437 all
36438 references
36439 from
36440 internal
36441 nodes
36442 to
36443 leaf
36444 nodes
36445 then
36446 point
36447 to
36448 the
36449 sentinel
36450 node
36451 Red
36452 black
36453 trees
36454 like
36455 all
36456 binary
36457 search
36458 trees
36459 allow
36460 efficient
36461 in
36462 order
36463 traversal
36464 that
36465 is
36466 in
36467 the
36468 order
36469 Left
36470 Root
36471 Right
36472 of
36473 their
36474 elements
36475 The
36476 search
36477 time
36478 results
36479 from
36480 the
36481 traversal
36482 from
36483 root
36484 to
36485 leaf
36486 and
36487 therefore
36488 a
36489 balanced
36490 tree
36491 of
36492 n
36493 nodes
36494 having
36495 the
36496 least
36497 possible
36498 tree
36499 height
36500 results
36501 in
36502 O
36503 log
36504 n
36505 search
36506 time
36507 Properties
36508 Diagram
36509 of
36510 binary
36511 tree
36512 The
36513 black
36514 root
36515 node
36516 has
36517 two
36518 red
36519 children
36520 and
36521 four
36522 black
36523 grandchildren
36524 The
36525 child
36526 nodes
36527 of
36528 the
36529 grandchildren
36530 are
36531 black
36532 nil
36533 pointers
36534 or
36535 red
36536 nodes
36537 with
36538 black
36539 nil
36540 pointers
36541 An
36542 example
36543 of
36544 a
36545 red
36546 black
36547 tree
36548 In
36549 addition
36550 to
36551 the
36552 requirements
36553 imposed
36554 on
36555 a
36556 binary
36557 search
36558 tree
36559 the
36560 following
36561 must
36562 be
36563 satisfied
36564 by
36565 a
36566 red
36567 black
36568 tree
36569 5
36570 A
36571 node
36572 is
36573 either
36574 red
36575 or
36576 black
36577 The
36578 root
36579 is
36580 black
36581 This
36582 rule
36583 is
36584 sometimes
36585 omitted
36586 Since
36587 the
36588 root
36589 can
36590 always
36591 be
36592 changed
36593 from
36594 red
36595 to
36596 black
36597 but
36598 not
36599 necessarily
36600 vice
36601 versa
36602 this
36603 rule
36604 has
36605 little
36606 effect
36607 on
36608 analysis
36609 All
36610 leaves
36611 NIL
36612 are
36613 black
36614 All
36615 leaves
36616 are
36617 same
36618 color
36619 as
36620 the
36621 root
36622 Every
36623 red
36624 node
36625 must
36626 have
36627 two
36628 black
36629 child
36630 nodes
36631 Every
36632 path
36633 from
36634 a
36635 given
36636 node
36637 to
36638 any
36639 of
36640 its
36641 descendant
36642 leaves
36643 contains
36644 the
36645 same
36646 number
36647 of
36648 black
36649 nodes
36650 These
36651 constraints
36652 enforce
36653 a
36654 critical
36655 property
36656 of
36657 red
36658 black
36659 trees
36660 that
36661 the
36662 path
36663 from
36664 the
36665 root
36666 to
36667 the
36668 furthest
36669 leaf
36670 is
36671 no
36672 more
36673 than
36674 twice
36675 as
36676 long
36677 as
36678 the
36679 path
36680 from
36681 the
36682 root
36683 to
36684 the
36685 nearest
36686 leaf
36687 The
36688 result
36689 is
36690 that
36691 the
36692 tree
36693 is
36694 roughly
36695 height
36696 balanced
36697 Since
36698 operations
36699 such
36700 as
36701 inserting
36702 deleting
36703 and
36704 finding
36705 values
36706 require
36707 worst
36708 case
36709 time
36710 proportional
36711 to
36712 the
36713 height
36714 of
36715 the
36716 tree
36717 this
36718 theoretical
36719 upper
36720 bound
36721 on
36722 the
36723 height
36724 allows
36725 red
36726 black
36727 trees
36728 to
36729 be
36730 efficient
36731 in
36732 the
36733 worst
36734 case
36735 unlike
36736 ordinary
36737 binary
36738 search
36739 trees
36740 To
36741 see
36742 why
36743 this
36744 is
36745 guaranteed
36746 it
36747 suffices
36748 to
36749 consider
36750 the
36751 effect
36752 of
36753 properties
36754 4
36755 and
36756 5
36757 together
36758 For
36759 a
36760 red
36761 black
36762 tree
36763 T
36764 let
36765 B
36766 be
36767 the
36768 number
36769 of
36770 black
36771 nodes
36772 in
36773 property
36774 5
36775 Let
36776 the
36777 shortest
36778 possible
36779 path
36780 from
36781 the
36782 root
36783 of
36784 T
36785 to
36786 any
36787 leaf
36788 consist
36789 of
36790 B
36791 black
36792 nodes
36793 Longer
36794 possible
36795 paths
36796 may
36797 be
36798 constructed
36799 by
36800 inserting
36801 red
36802 nodes
36803 However
36804 property
36805 4
36806 makes
36807 it
36808 impossible
36809 to
36810 insert
36811 more
36812 than
36813 one
36814 consecutive
36815 red
36816 node
36817 Therefore
36818 the
36819 longest
36820 possible
36821 path
36822 consists
36823 of
36824 2B
36825 nodes
36826 alternating
36827 black
36828 and
36829 red
36830 The
36831 shortest
36832 possible
36833 path
36834 has
36835 all
36836 black
36837 nodes
36838 and
36839 the
36840 longest
36841 possible
36842 path
36843 alternates
36844 between
36845 red
36846 and
36847 black
36848 nodes
36849 Since
36850 all
36851 maximal
36852 paths
36853 have
36854 the
36855 same
36856 number
36857 of
36858 black
36859 nodes
36860 by
36861 property
36862 5
36863 this
36864 shows
36865 that
36866 no
36867 path
36868 is
36869 more
36870 than
36871 twice
36872 as
36873 long
36874 as
36875 any
36876 other
36877 path
36878 Analogy
36879 to
36880 B
36881 trees
36882 of
36883 order
36884 4
36885 The
36886 same
36887 red
36888 black
36889 tree
36890 as
36891 in
36892 the
36893 example
36894 above
36895 seen
36896 as
36897 a
36898 B
36899 tree
36900 A
36901 red
36902 black
36903 tree
36904 is
36905 similar
36906 in
36907 structure
36908 to
36909 a
36910 B
36911 tree
36912 of
36913 order
36914 note
36915 1
36916 4
36917 where
36918 each
36919 node
36920 can
36921 contain
36922 between
36923 1
36924 and
36925 3
36926 values
36927 and
36928 accordingly
36929 between
36930 2
36931 and
36932 4
36933 child
36934 pointers
36935 In
36936 such
36937 a
36938 B
36939 tree
36940 each
36941 node
36942 will
36943 contain
36944 only
36945 one
36946 value
36947 matching
36948 the
36949 value
36950 in
36951 a
36952 black
36953 node
36954 of
36955 the
36956 red
36957 black
36958 tree
36959 with
36960 an
36961 optional
36962 value
36963 before
36964 and
36965 or
36966 after
36967 it
36968 in
36969 the
36970 same
36971 node
36972 both
36973 matching
36974 an
36975 equivalent
36976 red
36977 node
36978 of
36979 the
36980 red
36981 black
36982 tree
36983 One
36984 way
36985 to
36986 see
36987 this
36988 equivalence
36989 is
36990 to
36991 move
36992 up
36993 the
36994 red
36995 nodes
36996 in
36997 a
36998 graphical
36999 representation
37000 of
37001 the
37002 red
37003 black
37004 tree
37005 so
37006 that
37007 they
37008 align
37009 horizontally
37010 with
37011 their
37012 parent
37013 black
37014 node
37015 by
37016 creating
37017 together
37018 a
37019 horizontal
37020 cluster
37021 In
37022 the
37023 B
37024 tree
37025 or
37026 in
37027 the
37028 modified
37029 graphical
37030 representation
37031 of
37032 the
37033 red
37034 black
37035 tree
37036 all
37037 leaf
37038 nodes
37039 are
37040 at
37041 the
37042 same
37043 depth
37044 The
37045 red
37046 black
37047 tree
37048 is
37049 then
37050 structurally
37051 equivalent
37052 to
37053 a
37054 B
37055 tree
37056 of
37057 order
37058 4
37059 with
37060 a
37061 minimum
37062 fill
37063 factor
37064 of
37065 33
37066 of
37067 values
37068 per
37069 cluster
37070 with
37071 a
37072 maximum
37073 capacity
37074 of
37075 3
37076 values
37077 This
37078 B
37079 tree
37080 type
37081 is
37082 still
37083 more
37084 general
37085 than
37086 a
37087 red
37088 black
37089 tree
37090 though
37091 as
37092 it
37093 allows
37094 ambiguity
37095 in
37096 a
37097 red
37098 black
37099 tree
37100 conversion—multiple
37101 red
37102 black
37103 trees
37104 can
37105 be
37106 produced
37107 from
37108 an
37109 equivalent
37110 B
37111 tree
37112 of
37113 order
37114 4
37115 If
37116 a
37117 B
37118 tree
37119 cluster
37120 contains
37121 only
37122 1
37123 value
37124 it
37125 is
37126 the
37127 minimum
37128 black
37129 and
37130 has
37131 two
37132 child
37133 pointers
37134 If
37135 a
37136 cluster
37137 contains
37138 3
37139 values
37140 then
37141 the
37142 central
37143 value
37144 will
37145 be
37146 black
37147 and
37148 each
37149 value
37150 stored
37151 on
37152 its
37153 sides
37154 will
37155 be
37156 red
37157 If
37158 the
37159 cluster
37160 contains
37161 two
37162 values
37163 however
37164 either
37165 one
37166 can
37167 become
37168 the
37169 black
37170 node
37171 in
37172 the
37173 red
37174 black
37175 tree
37176 and
37177 the
37178 other
37179 one
37180 will
37181 be
37182 red
37183 So
37184 the
37185 order
37186 4
37187 B
37188 tree
37189 does
37190 not
37191 maintain
37192 which
37193 of
37194 the
37195 values
37196 contained
37197 in
37198 each
37199 cluster
37200 is
37201 the
37202 root
37203 black
37204 tree
37205 for
37206 the
37207 whole
37208 cluster
37209 and
37210 the
37211 parent
37212 of
37213 the
37214 other
37215 values
37216 in
37217 the
37218 same
37219 cluster
37220 Despite
37221 this
37222 the
37223 operations
37224 on
37225 red
37226 black
37227 trees
37228 are
37229 more
37230 economical
37231 in
37232 time
37233 because
37234 you
37235 don
37236 t
37237 have
37238 to
37239 maintain
37240 the
37241 vector
37242 of
37243 values
37244 It
37245 may
37246 be
37247 costly
37248 if
37249 values
37250 are
37251 stored
37252 directly
37253 in
37254 each
37255 node
37256 rather
37257 than
37258 being
37259 stored
37260 by
37261 reference
37262 B
37263 tree
37264 nodes
37265 however
37266 are
37267 more
37268 economical
37269 in
37270 space
37271 because
37272 you
37273 don
37274 t
37275 need
37276 to
37277 store
37278 the
37279 color
37280 attribute
37281 for
37282 each
37283 node
37284 Instead
37285 you
37286 have
37287 to
37288 know
37289 which
37290 slot
37291 in
37292 the
37293 cluster
37294 vector
37295 is
37296 used
37297 If
37298 values
37299 are
37300 stored
37301 by
37302 reference
37303 e
37304 g
37305 objects
37306 null
37307 references
37308 can
37309 be
37310 used
37311 and
37312 so
37313 the
37314 cluster
37315 can
37316 be
37317 represented
37318 by
37319 a
37320 vector
37321 containing
37322 3
37323 slots
37324 for
37325 value
37326 pointers
37327 plus
37328 4
37329 slots
37330 for
37331 child
37332 references
37333 in
37334 the
37335 tree
37336 In
37337 that
37338 case
37339 the
37340 B
37341 tree
37342 can
37343 be
37344 more
37345 compact
37346 in
37347 memory
37348 improving
37349 data
37350 locality
37351 The
37352 same
37353 analogy
37354 can
37355 be
37356 made
37357 with
37358 B
37359 trees
37360 with
37361 larger
37362 orders
37363 that
37364 can
37365 be
37366 structurally
37367 equivalent
37368 to
37369 a
37370 colored
37371 binary
37372 tree
37373 you
37374 just
37375 need
37376 more
37377 colors
37378 Suppose
37379 that
37380 you
37381 add
37382 blue
37383 then
37384 the
37385 blue
37386 red
37387 black
37388 tree
37389 defined
37390 like
37391 red
37392 black
37393 trees
37394 but
37395 with
37396 the
37397 additional
37398 constraint
37399 that
37400 no
37401 two
37402 successive
37403 nodes
37404 in
37405 the
37406 hierarchy
37407 will
37408 be
37409 blue
37410 and
37411 all
37412 blue
37413 nodes
37414 will
37415 be
37416 children
37417 of
37418 a
37419 red
37420 node
37421 then
37422 it
37423 becomes
37424 equivalent
37425 to
37426 a
37427 B
37428 tree
37429 whose
37430 clusters
37431 will
37432 have
37433 at
37434 most
37435 7
37436 values
37437 in
37438 the
37439 following
37440 colors
37441 blue
37442 red
37443 blue
37444 black
37445 blue
37446 red
37447 blue
37448 For
37449 each
37450 cluster
37451 there
37452 will
37453 be
37454 at
37455 most
37456 1
37457 black
37458 node
37459 2
37460 red
37461 nodes
37462 and
37463 4
37464 blue
37465 nodes
37466 For
37467 moderate
37468 volumes
37469 of
37470 values
37471 insertions
37472 and
37473 deletions
37474 in
37475 a
37476 colored
37477 binary
37478 tree
37479 are
37480 faster
37481 compared
37482 to
37483 B
37484 trees
37485 because
37486 colored
37487 trees
37488 don
37489 t
37490 attempt
37491 to
37492 maximize
37493 the
37494 fill
37495 factor
37496 of
37497 each
37498 horizontal
37499 cluster
37500 of
37501 nodes
37502 only
37503 the
37504 minimum
37505 fill
37506 factor
37507 is
37508 guaranteed
37509 in
37510 colored
37511 binary
37512 trees
37513 limiting
37514 the
37515 number
37516 of
37517 splits
37518 or
37519 junctions
37520 of
37521 clusters
37522 B
37523 trees
37524 will
37525 be
37526 faster
37527 for
37528 performing
37529 rotations
37530 because
37531 rotations
37532 will
37533 frequently
37534 occur
37535 within
37536 the
37537 same
37538 cluster
37539 rather
37540 than
37541 with
37542 multiple
37543 separate
37544 nodes
37545 in
37546 a
37547 colored
37548 binary
37549 tree
37550 However
37551 for
37552 storing
37553 large
37554 volumes
37555 B
37556 trees
37557 will
37558 be
37559 much
37560 faster
37561 as
37562 they
37563 will
37564 be
37565 more
37566 compact
37567 by
37568 grouping
37569 several
37570 children
37571 in
37572 the
37573 same
37574 cluster
37575 where
37576 they
37577 can
37578 be
37579 accessed
37580 locally
37581 All
37582 optimizations
37583 possible
37584 in
37585 B
37586 trees
37587 to
37588 increase
37589 the
37590 average
37591 fill
37592 factors
37593 of
37594 clusters
37595 are
37596 possible
37597 in
37598 the
37599 equivalent
37600 multicolored
37601 binary
37602 tree
37603 Notably
37604 maximizing
37605 the
37606 average
37607 fill
37608 factor
37609 in
37610 a
37611 structurally
37612 equivalent
37613 B
37614 tree
37615 is
37616 the
37617 same
37618 as
37619 reducing
37620 the
37621 total
37622 height
37623 of
37624 the
37625 multicolored
37626 tree
37627 by
37628 increasing
37629 the
37630 number
37631 of
37632 non
37633 black
37634 nodes
37635 The
37636 worst
37637 case
37638 occurs
37639 when
37640 all
37641 nodes
37642 in
37643 a
37644 colored
37645 binary
37646 tree
37647 are
37648 black
37649 the
37650 best
37651 case
37652 occurs
37653 when
37654 only
37655 a
37656 third
37657 of
37658 them
37659 are
37660 black
37661 and
37662 the
37663 other
37664 two
37665 thirds
37666 are
37667 red
37668 nodes
37669 Notes
37670 Jump
37671 up
37672 Using
37673 Knuth
37674 s
37675 definition
37676 of
37677 order
37678 the
37679 maximum
37680 number
37681 of
37682 children
37683 Applications
37684 and
37685 related
37686 data
37687 structures
37688 Red
37689 black
37690 trees
37691 offer
37692 worst
37693 case
37694 guarantees
37695 for
37696 insertion
37697 time
37698 deletion
37699 time
37700 and
37701 search
37702 time
37703 Not
37704 only
37705 does
37706 this
37707 make
37708 them
37709 valuable
37710 in
37711 time
37712 sensitive
37713 applications
37714 such
37715 as
37716 real
37717 time
37718 applications
37719 but
37720 it
37721 makes
37722 them
37723 valuable
37724 building
37725 blocks
37726 in
37727 other
37728 data
37729 structures
37730 which
37731 provide
37732 worst
37733 case
37734 guarantees
37735 for
37736 example
37737 many
37738 data
37739 structures
37740 used
37741 in
37742 computational
37743 geometry
37744 can
37745 be
37746 based
37747 on
37748 red
37749 black
37750 trees
37751 and
37752 the
37753 Completely
37754 Fair
37755 Scheduler
37756 used
37757 in
37758 current
37759 Linux
37760 kernels
37761 uses
37762 red
37763 black
37764 trees
37765 The
37766 AVL
37767 tree
37768 is
37769 another
37770 structure
37771 supporting
37772 O
37773 log
37774 n
37775 search
37776 insertion
37777 and
37778 removal
37779 It
37780 is
37781 more
37782 rigidly
37783 balanced
37784 than
37785 red
37786 black
37787 trees
37788 leading
37789 to
37790 slower
37791 insertion
37792 and
37793 removal
37794 but
37795 faster
37796 retrieval
37797 This
37798 makes
37799 it
37800 attractive
37801 for
37802 data
37803 structures
37804 that
37805 may
37806 be
37807 built
37808 once
37809 and
37810 loaded
37811 without
37812 reconstruction
37813 such
37814 as
37815 language
37816 dictionaries
37817 or
37818 program
37819 dictionaries
37820 such
37821 as
37822 the
37823 opcodes
37824 of
37825 an
37826 assembler
37827 or
37828 interpreter
37829 Red
37830 black
37831 trees
37832 are
37833 also
37834 particularly
37835 valuable
37836 in
37837 functional
37838 programming
37839 where
37840 they
37841 are
37842 one
37843 of
37844 the
37845 most
37846 common
37847 persistent
37848 data
37849 structures
37850 used
37851 to
37852 construct
37853 associative
37854 arrays
37855 and
37856 sets
37857 which
37858 can
37859 retain
37860 previous
37861 versions
37862 after
37863 mutations
37864 The
37865 persistent
37866 version
37867 of
37868 red
37869 black
37870 trees
37871 requires
37872 O
37873 log
37874 n
37875 space
37876 for
37877 each
37878 insertion
37879 or
37880 deletion
37881 in
37882 addition
37883 to
37884 time
37885 For
37886 every
37887 2
37888 4
37889 tree
37890 there
37891 are
37892 corresponding
37893 red
37894 black
37895 trees
37896 with
37897 data
37898 elements
37899 in
37900 the
37901 same
37902 order
37903 The
37904 insertion
37905 and
37906 deletion
37907 operations
37908 on
37909 2
37910 4
37911 trees
37912 are
37913 also
37914 equivalent
37915 to
37916 color
37917 flipping
37918 and
37919 rotations
37920 in
37921 red
37922 black
37923 trees
37924 This
37925 makes
37926 2
37927 4
37928 trees
37929 an
37930 important
37931 tool
37932 for
37933 understanding
37934 the
37935 logic
37936 behind
37937 red
37938 black
37939 trees
37940 and
37941 this
37942 is
37943 why
37944 many
37945 introductory
37946 algorithm
37947 texts
37948 introduce
37949 2
37950 4
37951 trees
37952 just
37953 before
37954 red
37955 black
37956 trees
37957 even
37958 though
37959 2
37960 4
37961 trees
37962 are
37963 not
37964 often
37965 used
37966 in
37967 practice
37968 In
37969 2008
37970 Sedgewick
37971 introduced
37972 a
37973 simpler
37974 version
37975 of
37976 the
37977 red
37978 black
37979 tree
37980 called
37981 the
37982 left
37983 leaning
37984 red
37985 black
37986 tree
37987 6
37988 by
37989 eliminating
37990 a
37991 previously
37992 unspecified
37993 degree
37994 of
37995 freedom
37996 in
37997 the
37998 implementation
37999 The
38000 LLRB
38001 maintains
38002 an
38003 additional
38004 invariant
38005 that
38006 all
38007 red
38008 links
38009 must
38010 lean
38011 left
38012 except
38013 during
38014 inserts
38015 and
38016 deletes
38017 Red
38018 black
38019 trees
38020 can
38021 be
38022 made
38023 isometric
38024 to
38025 either
38026 2
38027 3
38028 trees
38029 7
38030 or
38031 2
38032 4
38033 trees
38034 6
38035 for
38036 any
38037 sequence
38038 of
38039 operations
38040 The
38041 2
38042 4
38043 tree
38044 isometry
38045 was
38046 described
38047 in
38048 1978
38049 by
38050 Sedgewick
38051 this
38052 quote
38053 needs
38054 a
38055 citation
38056 With
38057 2
38058 4
38059 trees
38060 the
38061 isometry
38062 is
38063 resolved
38064 by
38065 a
38066 color
38067 flip
38068 corresponding
38069 to
38070 a
38071 split
38072 in
38073 which
38074 the
38075 red
38076 color
38077 of
38078 two
38079 children
38080 nodes
38081 leaves
38082 the
38083 children
38084 and
38085 moves
38086 to
38087 the
38088 parent
38089 node
38090 The
38091 tango
38092 tree
38093 a
38094 type
38095 of
38096 tree
38097 optimized
38098 for
38099 fast
38100 searches
38101 usually
38102 when
38103 uses
38104 red
38105 black
38106 trees
38107 as
38108 part
38109 of
38110 its
38111 data
38112 structure
38113 Operations
38114 Read
38115 only
38116 operations
38117 on
38118 a
38119 red
38120 black
38121 tree
38122 require
38123 no
38124 modification
38125 from
38126 those
38127 used
38128 for
38129 binary
38130 search
38131 trees
38132 because
38133 every
38134 red
38135 black
38136 tree
38137 is
38138 a
38139 special
38140 case
38141 of
38142 a
38143 simple
38144 binary
38145 search
38146 tree
38147 However
38148 the
38149 immediate
38150 result
38151 of
38152 an
38153 insertion
38154 or
38155 removal
38156 may
38157 violate
38158 the
38159 properties
38160 of
38161 a
38162 red
38163 black
38164 tree
38165 Restoring
38166 the
38167 red
38168 black
38169 properties
38170 requires
38171 a
38172 small
38173 number
38174 O
38175 log
38176 n
38177 or
38178 amortized
38179 O
38180 1
38181 of
38182 color
38183 changes
38184 which
38185 are
38186 very
38187 quick
38188 in
38189 practice
38190 and
38191 no
38192 more
38193 than
38194 three
38195 tree
38196 rotations
38197 two
38198 for
38199 insertion
38200 Although
38201 insert
38202 and
38203 delete
38204 operations
38205 are
38206 complicated
38207 their
38208 times
38209 remain
38210 O
38211 log
38212 n
38213 Insertion
38214 Insertion
38215 begins
38216 by
38217 adding
38218 the
38219 node
38220 as
38221 any
38222 binary
38223 search
38224 tree
38225 insertion
38226 does
38227 and
38228 by
38229 coloring
38230 it
38231 red
38232 Whereas
38233 in
38234 the
38235 binary
38236 search
38237 tree
38238 we
38239 always
38240 add
38241 a
38242 leaf
38243 in
38244 the
38245 red
38246 black
38247 tree
38248 leaves
38249 contain
38250 no
38251 information
38252 so
38253 instead
38254 we
38255 add
38256 a
38257 red
38258 interior
38259 node
38260 with
38261 two
38262 black
38263 leaves
38264 in
38265 place
38266 of
38267 an
38268 existing
38269 black
38270 leaf
38271 What
38272 happens
38273 next
38274 depends
38275 on
38276 the
38277 color
38278 of
38279 other
38280 nearby
38281 nodes
38282 The
38283 term
38284 uncle
38285 node
38286 will
38287 be
38288 used
38289 to
38290 refer
38291 to
38292 the
38293 sibling
38294 of
38295 a
38296 node
38297 s
38298 parent
38299 as
38300 in
38301 human
38302 family
38303 trees
38304 Note
38305 that
38306 property
38307 3
38308 all
38309 leaves
38310 are
38311 black
38312 always
38313 holds
38314 property
38315 4
38316 both
38317 children
38318 of
38319 every
38320 red
38321 node
38322 are
38323 black
38324 is
38325 threatened
38326 only
38327 by
38328 adding
38329 a
38330 red
38331 node
38332 repainting
38333 a
38334 black
38335 node
38336 red
38337 or
38338 a
38339 rotation
38340 property
38341 5
38342 all
38343 paths
38344 from
38345 any
38346 given
38347 node
38348 to
38349 its
38350 leaf
38351 nodes
38352 contain
38353 the
38354 same
38355 number
38356 of
38357 black
38358 nodes
38359 is
38360 threatened
38361 only
38362 by
38363 adding
38364 a
38365 black
38366 node
38367 repainting
38368 a
38369 red
38370 node
38371 black
38372 or
38373 vice
38374 versa
38375 or
38376 a
38377 rotation
38378 Note
38379 The
38380 label
38381 N
38382 will
38383 be
38384 used
38385 to
38386 denote
38387 the
38388 current
38389 node
38390 colored
38391 red
38392 At
38393 the
38394 beginning
38395 this
38396 is
38397 the
38398 new
38399 node
38400 being
38401 inserted
38402 but
38403 the
38404 entire
38405 procedure
38406 may
38407 also
38408 be
38409 applied
38410 recursively
38411 to
38412 other
38413 nodes
38414 see
38415 case
38416 3
38417 P
38418 will
38419 denote
38420 N
38421 s
38422 parent
38423 node
38424 G
38425 will
38426 denote
38427 N
38428 s
38429 grandparent
38430 and
38431 U
38432 will
38433 denote
38434 N
38435 s
38436 uncle
38437 Note
38438 that
38439 in
38440 between
38441 some
38442 cases
38443 the
38444 roles
38445 and
38446 labels
38447 of
38448 the
38449 nodes
38450 are
38451 exchanged
38452 but
38453 in
38454 each
38455 case
38456 every
38457 label
38458 continues
38459 to
38460 represent
38461 the
38462 same
38463 node
38464 it
38465 represented
38466 at
38467 the
38468 beginning
38469 of
38470 the
38471 case
38472 Any
38473 color
38474 shown
38475 in
38476 the
38477 diagram
38478 is
38479 either
38480 assumed
38481 in
38482 its
38483 case
38484 or
38485 implied
38486 by
38487 those
38488 assumptions
38489 A
38490 numbered
38491 triangle
38492 represents
38493 a
38494 subtree
38495 of
38496 unspecified
38497 depth
38498 A
38499 black
38500 circle
38501 atop
38502 the
38503 triangle
38504 designates
38505 a
38506 black
38507 root
38508 node
38509 otherwise
38510 the
38511 root
38512 node
38513 s
38514 color
38515 is
38516 unspecified
38517 Each
38518 case
38519 will
38520 be
38521 demonstrated
38522 with
38523 example
38524 C
38525 code
38526 The
38527 uncle
38528 and
38529 grandparent
38530 nodes
38531 can
38532 be
38533 found
38534 by
38535 these
38536 functions
38537 In
38538 a
38539 regular
38540 binary
38541 search
38542 tree
38543 when
38544 deleting
38545 a
38546 node
38547 with
38548 two
38549 non
38550 leaf
38551 children
38552 we
38553 find
38554 either
38555 the
38556 maximum
38557 element
38558 in
38559 its
38560 left
38561 subtree
38562 which
38563 is
38564 the
38565 in
38566 order
38567 predecessor
38568 or
38569 the
38570 minimum
38571 element
38572 in
38573 its
38574 right
38575 subtree
38576 which
38577 is
38578 the
